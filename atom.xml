<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anderson Blog</title>
  
  
  <link href="http://nikolahuang.github.io/atom.xml" rel="self"/>
  
  <link href="http://nikolahuang.github.io/"/>
  <updated>2024-11-05T16:26:17.932Z</updated>
  <id>http://nikolahuang.github.io/</id>
  
  <author>
    <name>Anderson</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AMT-APC自动钢琴伴奏</title>
    <link href="http://nikolahuang.github.io/2024/11/05/AMT-APC%E8%87%AA%E5%8A%A8%E9%92%A2%E7%90%B4%E4%BC%B4%E5%A5%8F/"/>
    <id>http://nikolahuang.github.io/2024/11/05/AMT-APC%E8%87%AA%E5%8A%A8%E9%92%A2%E7%90%B4%E4%BC%B4%E5%A5%8F/</id>
    <published>2024-11-05T14:55:57.000Z</published>
    <updated>2024-11-05T16:26:17.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>MT-APC是一种通过微调AMT（自动音乐转录）模型来训练自动钢琴封面生成模型的方法。通过微调自动音乐转录模型来训练自动钢琴伴奏生成模型，让你的音乐创作更加智能和便捷</p><h2 id="用法（钢琴封面生成）"><a href="#用法（钢琴封面生成）" class="headerlink" title="用法（钢琴封面生成）"></a>用法（钢琴封面生成）</h2><p>Python版本：3.10</p><ol><li><p>Install dependencies 安装依赖项</p><p>- </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li></ol><p>或者，如果只需要运行推理代码，则可以仅安装必要的包。</p><ol><li>下载预训练模型</li></ol><p>- </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P models/params/ https://github.com/misya11p/amt-apc/releases/download/beta/apc.pth</span><br></pre></td></tr></table></figure><ol><li>运行推理代码</li></ol><p>- </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python infer <span class="built_in">input</span>.wav</span><br></pre></td></tr></table></figure><p>还可以输入视频的 URL（需要<code>yt-dlp</code> ）。</p><p>- </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python infer &#x27;https://www.youtube.com/watch?v=...&#x27;</span><br></pre></td></tr></table></figure><p>还可以指定样式（ <code>level1</code> 、 <code>level2</code> 、 <code>level3</code> ）。</p><p>- </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python infer input.wav --style level3</span><br></pre></td></tr></table></figure><h2 id="使用（训练和评估）"><a href="#使用（训练和评估）" class="headerlink" title="使用（训练和评估）"></a>使用（训练和评估）</h2><p>Python版本：3.10</p><ol><li>Install dependencies 安装依赖项</li></ol><p>- </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><ol><li>下载预训练的 AMT 模型</li></ol><p>- </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P models/params/ https://github.com/misya11p/amt-apc/releases/download/beta/amt.pth</span><br></pre></td></tr></table></figure><ol start="3"><li>下载数据集</li></ol><p>- </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python download.py</span><br></pre></td></tr></table></figure><ol><li>创建数据集</li></ol><p>- </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python data/sync.pypython data/transcribe.pypython data/sv/extract.pypython data/create_labels.pypython data/create_dataset.py</span><br></pre></td></tr></table></figure><ol><li>训练模型</li></ol><p>- </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train --n_gpus 1</span><br></pre></td></tr></table></figure><ol start="6"><li>评估模型</li></ol><p> 计算 Qmax。</p><p>- </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/albincorreya/ChromaCoverId.git eval/ChromaCoverIdpython eval/cover.pypython eval/distance.py</span><br></pre></td></tr></table></figure><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p>详细的配置可以通过<code>config.json</code>或使用命令行选项来完成，这些选项通过 –help 进行解释。默认值是论文实验中使用的值。</p><h2 id="项目链接"><a href="#项目链接" class="headerlink" title="项目链接"></a>项目链接</h2><blockquote><p><a href="https://github.com/misya11p/amt-apc">https://github.com/misya11p/amt-apc</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h2&gt;&lt;p&gt;MT-APC是一种通过微调AMT（自动音乐转录）模型来训练自动钢琴封面生成模型的方法。通过微调自动音乐转录模型来训练自动钢琴</summary>
      
    
    
    
    
    <category term="Github精选" scheme="http://nikolahuang.github.io/tags/Github%E7%B2%BE%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>从零开始训练一个神经网络之四：模型调优</title>
    <link href="http://nikolahuang.github.io/2024/08/18/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E5%9B%9B%EF%BC%9A%E6%A8%A1%E5%9E%8B%E8%B0%83%E4%BC%98%E5%92%8C%E9%83%A8%E7%BD%B2/"/>
    <id>http://nikolahuang.github.io/2024/08/18/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E5%9B%9B%EF%BC%9A%E6%A8%A1%E5%9E%8B%E8%B0%83%E4%BC%98%E5%92%8C%E9%83%A8%E7%BD%B2/</id>
    <published>2024-08-18T14:21:24.000Z</published>
    <updated>2024-08-18T16:44:07.608Z</updated>
    
    <content type="html"><![CDATA[<p>在上期我们实现了多算法训练的不同的模型来对金价走势进行预测，可以看到LSTM得到的模型拟合的精度最高；</p><p>我们后续提出了两个问题：</p><ol><li>如何实现多算法结合的混合模型？</li><li>如何将得到的最佳模型进行部署和实战检验？</li></ol><hr><h1 id="如何实现多算法结合的混合模型？"><a href="#如何实现多算法结合的混合模型？" class="headerlink" title="如何实现多算法结合的混合模型？"></a>如何实现多算法结合的混合模型？</h1><p>创建一个混合模型的思路是将多个模型的预测结果结合在一起，以期望获得比任何单一模型更好的性能。这通常通过以下几种方法来实现：</p><ol><li><strong>加权平均法</strong>：根据各个模型在验证集上的表现，对它们的预测结果进行加权平均。权重可以基于每个模型的均方误差（MSE）反向设置，MSE越低的模型权重越高。</li><li><strong>堆叠（Stacking）</strong>：将多个模型的预测结果作为输入，使用一个元模型（如线性回归、决策树、SVM等）来学习如何最佳地组合这些预测。</li><li><strong>投票法</strong>：对于分类任务，混合模型也可以通过多数投票的方法来确定最终预测。</li></ol><p>当前场景中，我们可以用加权平均法来构建一个混合模型。这是因为主要关注的目标“金价”是时间序列，且使用的模型都是回归模型。</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol><li><strong>训练多个模型</strong>：分别训练LSTM、GRU、CNN、XGBoost、RandomForest、SVM、MLP等模型，并获取它们在验证集上的预测结果和对应的MSE。</li><li><strong>计算加权平均</strong>：使用每个模型的MSE反向作为权重，对它们的预测结果进行加权平均。MSE越低的模型，其预测结果权重越高。</li><li><strong>生成最终预测</strong>：对测试集进行加权平均预测，并计算最终的MSE。</li></ol><p>以下是代码的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPRegressor</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> LSTM, GRU, Conv1D, Dense, Dropout, Flatten</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> data_solve <span class="keyword">import</span> main <span class="keyword">as</span> data_preprocessing_main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Matplotlib使用中文字体，确保图表中的中文字符正常显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 使用黑体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 确保负号显示正常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_model</span>(<span class="params">model_type, input_shape=<span class="literal">None</span>, units=<span class="number">50</span>, dropout_rate=<span class="number">0.2</span></span>):</span><br><span class="line">    <span class="keyword">if</span> model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">        model = Sequential()</span><br><span class="line">        <span class="keyword">if</span> model_type == <span class="string">&#x27;LSTM&#x27;</span>:</span><br><span class="line">            model.add(LSTM(units=units, return_sequences=<span class="literal">True</span>, input_shape=input_shape))</span><br><span class="line">            model.add(Dropout(dropout_rate))</span><br><span class="line">            model.add(LSTM(units=units, return_sequences=<span class="literal">False</span>))</span><br><span class="line">        <span class="keyword">elif</span> model_type == <span class="string">&#x27;GRU&#x27;</span>:</span><br><span class="line">            model.add(GRU(units=units, return_sequences=<span class="literal">True</span>, input_shape=input_shape))</span><br><span class="line">            model.add(Dropout(dropout_rate))</span><br><span class="line">            model.add(GRU(units=units, return_sequences=<span class="literal">False</span>))</span><br><span class="line">        <span class="keyword">elif</span> model_type == <span class="string">&#x27;CNN&#x27;</span>:</span><br><span class="line">            model.add(Conv1D(filters=<span class="number">64</span>, kernel_size=<span class="number">2</span>, activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=input_shape))</span><br><span class="line">            model.add(Dropout(dropout_rate))</span><br><span class="line">            model.add(Flatten())</span><br><span class="line">        model.add(Dropout(dropout_rate))</span><br><span class="line">        model.add(Dense(units=<span class="number">3</span>))  <span class="comment"># 输出3个时间步的预测</span></span><br><span class="line">        model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mean_squared_error&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> model</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;XGBoost&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [XGBRegressor(objective=<span class="string">&#x27;reg:squarederror&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;RandomForest&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [RandomForestRegressor(n_estimators=<span class="number">100</span>, random_state=<span class="number">42</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;SVM&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [SVR(kernel=<span class="string">&#x27;rbf&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;MLP&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [MLPRegressor(hidden_layer_sizes=(units, units), max_iter=<span class="number">500</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;未知的模型类型: <span class="subst">&#123;model_type&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate_model</span>(<span class="params">model, X_test, y_test, model_type</span>):</span><br><span class="line">    <span class="keyword">if</span> model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">        predictions = model.predict(X_test)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        X_test_flat = X_test.reshape(X_test.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">        predictions = np.zeros(y_test.shape)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            predictions[:, i] = model[i].predict(X_test_flat)</span><br><span class="line"></span><br><span class="line">    mse = mean_squared_error(y_test, predictions)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;测试集上的均方误差: <span class="subst">&#123;mse&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(predictions.shape[<span class="number">1</span>]):  <span class="comment"># 针对每个时间步绘制预测和真实值的对比图</span></span><br><span class="line">        plt.plot(y_test[:, i], label=<span class="string">f&#x27;真实值 - 时间步 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">        plt.plot(predictions[:, i], label=<span class="string">f&#x27;预测值 - 时间步 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">f&#x27;金价预测 vs 真实值 (<span class="subst">&#123;model_type&#125;</span>)&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;时间步&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;金价&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mse, predictions</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">model_search</span>(<span class="params">X_train, y_train, X_val, y_val, X_test, y_test,</span></span><br><span class="line"><span class="params">                 model_types=[<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>, <span class="string">&#x27;XGBoost&#x27;</span>, <span class="string">&#x27;RandomForest&#x27;</span>, <span class="string">&#x27;SVM&#x27;</span>, <span class="string">&#x27;MLP&#x27;</span>], epochs=<span class="number">50</span>, batch_size=<span class="number">32</span></span>):</span><br><span class="line">    model_results = []</span><br><span class="line">    <span class="keyword">for</span> model_type <span class="keyword">in</span> model_types:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练模型: <span class="subst">&#123;model_type&#125;</span>&quot;</span>)</span><br><span class="line">        model = build_model(model_type, input_shape=(X_train.shape[<span class="number">1</span>], X_train.shape[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">            model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=epochs, batch_size=batch_size, verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X_train_flat = X_train.reshape(X_train.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">            X_val_flat = X_val.reshape(X_val.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  <span class="comment"># 训练每个时间步的模型</span></span><br><span class="line">                model[i].fit(X_train_flat, y_train[:, i])</span><br><span class="line"></span><br><span class="line">        mse, predictions = evaluate_model(model, X_test, y_test, model_type)</span><br><span class="line">        model_results.append((model_type, model, mse))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model_results</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combine_models</span>(<span class="params">model_results, X_test</span>):</span><br><span class="line">    inv_mse_sum = <span class="built_in">sum</span>(<span class="number">1</span>/mse <span class="keyword">for</span> _, _, mse <span class="keyword">in</span> model_results)</span><br><span class="line">    combined_predictions = np.zeros_like(model_results[<span class="number">0</span>][<span class="number">1</span>].predict(X_test))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, model, mse <span class="keyword">in</span> model_results:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(model, <span class="built_in">list</span>):  <span class="comment"># 对于非神经网络模型</span></span><br><span class="line">            predictions = np.zeros((X_test.shape[<span class="number">0</span>], <span class="number">3</span>))</span><br><span class="line">            X_test_flat = X_test.reshape(X_test.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                predictions[:, i] = model[i].predict(X_test_flat)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 对于神经网络模型</span></span><br><span class="line">            predictions = model.predict(X_test)</span><br><span class="line"></span><br><span class="line">        weight = (<span class="number">1</span>/mse) / inv_mse_sum</span><br><span class="line">        combined_predictions += weight * predictions</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> combined_predictions</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate_combined_model</span>(<span class="params">y_test, combined_predictions</span>):</span><br><span class="line">    mse = mean_squared_error(y_test, combined_predictions)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;混合模型的均方误差: <span class="subst">&#123;mse&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(combined_predictions.shape[<span class="number">1</span>]):  <span class="comment"># 针对每个时间步绘制预测和真实值的对比图</span></span><br><span class="line">        plt.plot(y_test[:, i], label=<span class="string">f&#x27;真实值 - 时间步 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">        plt.plot(combined_predictions[:, i], label=<span class="string">f&#x27;混合预测值 - 时间步 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;金价预测 vs 真实值 (混合模型)&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;时间步&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;金价&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    X_train, X_val, X_test, y_train, y_val, y_test = data_preprocessing_main(</span><br><span class="line">        file_path=<span class="string">&#x27;gold_price_data_extracted.csv&#x27;</span>,</span><br><span class="line">        window_size=<span class="number">10</span>,</span><br><span class="line">        prediction_horizon=<span class="number">3</span>,</span><br><span class="line">        normalization_method=<span class="string">&#x27;minmax&#x27;</span>,</span><br><span class="line">        train_size=<span class="number">0.7</span>,</span><br><span class="line">        validation_size=<span class="number">0.1</span>,</span><br><span class="line">        drop_columns=[<span class="string">&#x27;Adj&#x27;</span>, <span class="string">&#x27;Volume&#x27;</span>],</span><br><span class="line">        indicators=[<span class="string">&#x27;MA&#x27;</span>, <span class="string">&#x27;RSI&#x27;</span>, <span class="string">&#x27;MACD&#x27;</span>, <span class="string">&#x27;Bollinger&#x27;</span>, <span class="string">&#x27;ATR&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    model_results = model_search(X_train, y_train, X_val, y_val, X_test, y_test)</span><br><span class="line"></span><br><span class="line">    combined_predictions = combine_models(model_results, X_test)</span><br><span class="line"></span><br><span class="line">    evaluate_combined_model(y_test, combined_predictions)</span><br><span class="line"></span><br><span class="line">    best_model_type, best_model, _ = <span class="built_in">min</span>(model_results, key=<span class="keyword">lambda</span> x: x[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">if</span> best_model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">        best_model.save(<span class="string">f&#x27;best_model_<span class="subst">&#123;best_model_type&#125;</span>.h5&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;最佳模型 <span class="subst">&#123;best_model_type&#125;</span> 已保存。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行的结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">2024-08-18 22:45:34.472344: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.</span><br><span class="line">2024-08-18 22:45:34.999176: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.</span><br><span class="line">2024-08-18 22:45:36,762 - INFO - 数据加载完成</span><br><span class="line">2024-08-18 22:45:36,762 - INFO - 原始数据包含 3474 行，7 列</span><br><span class="line">2024-08-18 22:45:36,774 - INFO - 数据清理完成</span><br><span class="line">2024-08-18 22:45:36,774 - INFO - 清理后的数据包含 3474 行，5 列</span><br><span class="line">2024-08-18 22:45:36,776 - INFO - 数据预览:</span><br><span class="line">           Date    Open    High     Low   Close</span><br><span class="line">3473 2010-10-05  134.10  134.10  134.10  134.03</span><br><span class="line">3472 2010-10-06  134.10  135.00  134.10  134.77</span><br><span class="line">3471 2010-10-19  136.98  136.98  132.93  133.60</span><br><span class="line">3470 2010-10-20  133.43  134.70  133.38  134.42</span><br><span class="line">3469 2010-10-21  134.32  134.72  131.88  132.56</span><br><span class="line">2024-08-18 22:45:36,776 - INFO - 生成技术指标: [&#x27;MA&#x27;, &#x27;RSI&#x27;, &#x27;MACD&#x27;, &#x27;Bollinger&#x27;, &#x27;ATR&#x27;]</span><br><span class="line">2024-08-18 22:45:36,795 - INFO - 技术指标生成完成</span><br><span class="line">2024-08-18 22:45:36,798 - INFO - 数据归一化/标准化完成，方法: minmax</span><br><span class="line">2024-08-18 22:45:36,909 - INFO - 滑动窗口生成特征和标签，窗口大小: 10, 预测范围: 3</span><br><span class="line">2024-08-18 22:45:36,910 - INFO - 数据集划分完成: 训练集大小=(2407, 10, 11), 验证集大小=(343, 10, 11), 测试集大小=(689, 10, 11)</span><br><span class="line">2024-08-18 22:45:36,910 - INFO - 训练集大小: (2407, 10, 11), 验证集大小: (343, 10, 11), 测试集大小: (689, 10, 11)</span><br><span class="line">2024-08-18 22:45:36.913249: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.</span><br><span class="line">To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.</span><br><span class="line">训练模型: LSTM</span><br><span class="line">E:\ProgramData\anaconda3\envs\goldenpre\Lib\site-packages\keras\src\layers\rnn\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.</span><br><span class="line">  super().__init__(**kwargs)</span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 6ms/step</span><br><span class="line">测试集上的均方误差: 0.00027118924039005093</span><br><span class="line">训练模型: GRU</span><br><span class="line">E:\ProgramData\anaconda3\envs\goldenpre\Lib\site-packages\keras\src\layers\rnn\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.</span><br><span class="line">  super().__init__(**kwargs)</span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 8ms/step</span><br><span class="line">测试集上的均方误差: 0.0002801844536378178</span><br><span class="line">训练模型: CNN</span><br><span class="line">E:\ProgramData\anaconda3\envs\goldenpre\Lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.</span><br><span class="line">  super().__init__(activity_regularizer=activity_regularizer, **kwargs)</span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step </span><br><span class="line">测试集上的均方误差: 0.0003564422049939142</span><br><span class="line">训练模型: XGBoost</span><br><span class="line">测试集上的均方误差: 0.013671010934760258</span><br><span class="line">训练模型: RandomForest</span><br><span class="line">测试集上的均方误差: 0.013248586110257024</span><br><span class="line">训练模型: SVM</span><br><span class="line">测试集上的均方误差: 0.04974934214151624</span><br><span class="line">训练模型: MLP</span><br><span class="line">测试集上的均方误差: 0.0011011161628656963</span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 952us/step</span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 905us/step</span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 1000us/step</span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 524us/step</span><br><span class="line">混合模型的均方误差: 0.0003560467854642135</span><br><span class="line">2024-08-18 22:46:58,301 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save(&#x27;my_model.keras&#x27;)` or `keras.saving.save_model(model, &#x27;my_model.keras&#x27;)`. </span><br><span class="line">最佳模型 LSTM 已保存。</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240818230301007.png" alt="image-20240818230301007"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240818230317689.png" alt="image-20240818230317689"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240818230326067.png" alt="image-20240818230326067"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240818230333527.png" alt="image-20240818230333527"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240818230340772.png" alt="image-20240818230340772"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240818230347867.png" alt="image-20240818230347867"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240818230354945.png" alt="image-20240818230354945"></p><p><u>我们可以注意到：</u></p><ol><li><u>运用LSTM设计的模型在测试集上的均方误差: 0.00027118924039005093，而我们最终的混合模型的均方误差: 0.0003560467854642135，反而比LSTM大；</u></li><li><u>模型训练的结果波动幅度比较大(经过本人多次测试)；</u></li></ol><hr><h3 id="解决上述问题的实现思路和方法："><a href="#解决上述问题的实现思路和方法：" class="headerlink" title="解决上述问题的实现思路和方法："></a>解决上述问题的实现思路和方法：</h3><p>混合模型的表现有时可能不如某个单独模型的原因可能包括以下几点：</p><ol><li><strong>权重分配</strong>：在混合模型中，模型的预测结果是基于每个模型的均方误差（MSE）进行加权的。如果一个模型的预测误差相对较小，它的权重就会更大。然而，如果这些模型的预测结果具有较大的方差，即使一个模型的MSE较小，整体的加权平均可能并不会显著提升预测精度。</li><li><strong>模型之间的相似性</strong>：如果多个模型的预测结果非常相似，那么组合它们并不会显著提高性能。在这种情况下，混合模型的表现可能接近于最好的单个模型。</li><li><strong>混合策略的局限性</strong>：当前的混合策略只是简单地基于MSE进行加权平均，没有考虑更复杂的混合策略，例如非线性组合、堆叠模型（stacking），这些更复杂的方法可能会捕捉到单个模型未能捕捉到的模式，从而提高整体模型的表现。</li><li><strong>模型多样性不足</strong>：混合模型的效果依赖于不同模型之间的多样性。如果模型之间的多样性不足（即它们预测出的结果过于相似），混合模型的效果可能不会显著提升。</li></ol><h3 id="可能的解决方法"><a href="#可能的解决方法" class="headerlink" title="可能的解决方法"></a>可能的解决方法</h3><ol><li><strong>尝试其他混合策略</strong>：除了简单的加权平均，你可以尝试其他混合方法，例如堆叠（stacking），其中一个元学习器（如线性回归、神经网络）学习如何组合不同模型的预测结果。</li><li><strong>增加模型的多样性</strong>：通过加入更多不同类型的模型，或者调整现有模型的超参数，可以增加模型的多样性，从而提升混合模型的效果。</li><li><strong>模型选择</strong>：有时，简单的选择表现最好的单一模型可能比混合所有模型效果更好。你可以通过更多的验证和交叉验证来决定是否需要混合模型。</li><li><strong>手动调整权重</strong>：尝试对各个模型的权重进行手动调整，而不仅仅依赖于MSE来进行加权。手动权重调整可以基于经验或者通过优化方法找到最佳的权重组合。</li></ol><h4 id="尝试使用其他混合方法，例如堆叠（stacking），学习如何组合不同模型的预测结果、调整现有模型的超参数增加模型的多样性"><a href="#尝试使用其他混合方法，例如堆叠（stacking），学习如何组合不同模型的预测结果、调整现有模型的超参数增加模型的多样性" class="headerlink" title="尝试使用其他混合方法，例如堆叠（stacking），学习如何组合不同模型的预测结果、调整现有模型的超参数增加模型的多样性"></a>尝试使用其他混合方法，例如堆叠（stacking），学习如何组合不同模型的预测结果、调整现有模型的超参数增加模型的多样性</h4><ol><li><strong>整体框架和模块设计</strong><ul><li><strong>数据预处理模块</strong> (<code>data_preprocessing_main</code>): 这一部分代码从CSV文件中加载数据，并进行清洗、标准化、技术指标生成等处理，生成用于模型训练和测试的数据集（<code>X_train</code>, <code>X_val</code>, <code>X_test</code>, <code>y_train</code>, <code>y_val</code>, <code>y_test</code>）。</li><li><strong>模型构建模块</strong> (<code>build_model</code>): 该函数根据传入的模型类型 (<code>model_type</code>) 构建不同类型的模型。支持的模型类型包括神经网络模型（<code>LSTM</code>, <code>GRU</code>, <code>CNN</code>）和传统机器学习模型（<code>XGBoost</code>, <code>RandomForest</code>, <code>SVM</code>, <code>MLP</code>）。对于神经网络模型，使用Keras框架进行构建，并返回编译好的模型；对于传统机器学习模型，返回的是模型实例列表，每个列表中的模型用于预测一个时间步。</li><li><strong>模型评估模块</strong> (<code>evaluate_model</code>): 该函数评估训练好的模型在测试集上的表现，计算并打印均方误差（MSE），并绘制模型的预测结果与真实值的对比图。神经网络模型直接通过<code>model.predict</code>生成预测值，而传统机器学习模型则针对每个时间步分别进行预测并组合。</li><li><strong>堆叠模型模块</strong> (<code>stack_models</code>): 此函数实现了使用堆叠方法来组合多个模型的预测结果。对于每个时间步，堆叠模型结合了来自不同基础模型的预测结果，并使用线性回归作为初级学习器，最后通过随机森林回归器作为终极学习器进行堆叠预测。</li><li><strong>模型搜索与混合模块</strong> (<code>model_search</code>): 这是核心函数，负责搜索最优模型。函数遍历不同模型类型，分别训练并评估每种模型的性能。评估完所有模型后，调用<code>stack_models</code>函数对模型进行堆叠组合。最后输出最优单一模型及其均方误差，同时输出堆叠组合模型的均方误差。</li></ul></li><li><strong>代码流程</strong><ul><li><strong>数据生成</strong>: 通过<code>data_preprocessing_main</code>函数生成训练集、验证集和测试集的数据。</li><li><strong>模型搜索与训练</strong>: <code>model_search</code>函数遍历所有指定的模型类型（包括神经网络模型和传统机器学习模型），为每种模型训练并评估其在测试集上的表现。</li><li><strong>堆叠模型组合</strong>: 使用堆叠方法对所有模型进行组合预测，并计算组合模型的均方误差。</li><li><strong>模型保存</strong>: 将最优的单一模型保存为HDF5格式，便于后续使用。</li></ul></li><li><strong>模型混合策略</strong><ul><li><strong>多模型训练</strong>: 每种模型都独立训练，并在测试集上进行评估。</li><li><strong>堆叠策略</strong>: 对不同模型的预测结果进行堆叠，通过线性回归和随机森林等方法来学习如何最优地组合这些模型的预测，得到最终的组合模型预测结果。</li></ul></li><li><strong>主要亮点</strong><ul><li><strong>多样化的模型选择</strong>: 支持多种神经网络模型（LSTM、GRU、CNN）以及传统机器学习模型（XGBoost、RandomForest、SVM、MLP）。</li><li><strong>堆叠方法的应用</strong>: 通过堆叠多种模型的预测结果，实现了不同模型的优势互补，旨在提高最终预测的准确性。</li><li><strong>代码的灵活性和可扩展性</strong>: 使用统一的框架处理不同类型的模型，使得代码具有很高的可读性和可维护性，便于进一步扩展。</li></ul></li></ol><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor, StackingRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPRegressor</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, ParameterGrid</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> LSTM, GRU, Conv1D, Dense, Dropout, Flatten</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> data_solve <span class="keyword">import</span> main <span class="keyword">as</span> data_preprocessing_main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Matplotlib使用中文字体，确保图表中的中文字符正常显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 使用黑体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 确保负号显示正常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_model</span>(<span class="params">model_type, input_shape=<span class="literal">None</span>, units=<span class="number">50</span>, dropout_rate=<span class="number">0.2</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    构建并编译模型或实例化机器学习算法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - model_type: 模型类型 (&#x27;LSTM&#x27;, &#x27;GRU&#x27;, &#x27;CNN&#x27;, &#x27;XGBoost&#x27;, &#x27;RandomForest&#x27;, &#x27;SVM&#x27;, &#x27;MLP&#x27;)</span></span><br><span class="line"><span class="string">    - input_shape: 输入数据的形状 (time_steps, num_features)，仅适用于神经网络</span></span><br><span class="line"><span class="string">    - units: 神经元数量，适用于神经网络</span></span><br><span class="line"><span class="string">    - dropout_rate: Dropout层的比例，用于防止过拟合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - 编译好的模型或实例化好的机器学习算法</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">        model = Sequential()</span><br><span class="line">        <span class="keyword">if</span> model_type == <span class="string">&#x27;LSTM&#x27;</span>:</span><br><span class="line">            model.add(LSTM(units=units, return_sequences=<span class="literal">True</span>, input_shape=input_shape))</span><br><span class="line">            model.add(Dropout(dropout_rate))</span><br><span class="line">            model.add(LSTM(units=units, return_sequences=<span class="literal">False</span>))</span><br><span class="line">        <span class="keyword">elif</span> model_type == <span class="string">&#x27;GRU&#x27;</span>:</span><br><span class="line">            model.add(GRU(units=units, return_sequences=<span class="literal">True</span>, input_shape=input_shape))</span><br><span class="line">            model.add(Dropout(dropout_rate))</span><br><span class="line">            model.add(GRU(units=units, return_sequences=<span class="literal">False</span>))</span><br><span class="line">        <span class="keyword">elif</span> model_type == <span class="string">&#x27;CNN&#x27;</span>:</span><br><span class="line">            model.add(Conv1D(filters=<span class="number">64</span>, kernel_size=<span class="number">2</span>, activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=input_shape))</span><br><span class="line">            model.add(Dropout(dropout_rate))</span><br><span class="line">            model.add(Flatten())</span><br><span class="line">        model.add(Dropout(dropout_rate))</span><br><span class="line">        model.add(Dense(units=<span class="number">3</span>))  <span class="comment"># 输出3个时间步的预测</span></span><br><span class="line">        model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mean_squared_error&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> model</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;XGBoost&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [XGBRegressor(objective=<span class="string">&#x27;reg:squarederror&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;RandomForest&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [RandomForestRegressor(n_estimators=<span class="number">100</span>, random_state=<span class="number">42</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;SVM&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [SVR(kernel=<span class="string">&#x27;rbf&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;MLP&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [MLPRegressor(hidden_layer_sizes=(units, units), max_iter=<span class="number">500</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;未知的模型类型: <span class="subst">&#123;model_type&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate_model</span>(<span class="params">model, X_test, y_test, model_type</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    评估模型在测试集上的表现，并绘制预测值与真实值的对比图。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - model: 训练好的模型</span></span><br><span class="line"><span class="string">    - X_test, y_test: 测试数据及其标签</span></span><br><span class="line"><span class="string">    - model_type: 模型类型，决定如何处理数据输入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - 测试集上的均方误差 (MSE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">        predictions = model.predict(X_test)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        X_test_flat = X_test.reshape(X_test.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">        predictions = np.zeros(y_test.shape)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            predictions[:, i] = model[i].predict(X_test_flat)</span><br><span class="line"></span><br><span class="line">    mse = mean_squared_error(y_test, predictions)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;测试集上的均方误差: <span class="subst">&#123;mse&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(predictions.shape[<span class="number">1</span>]):  <span class="comment"># 针对每个时间步绘制预测和真实值的对比图</span></span><br><span class="line">        plt.plot(y_test[:, i], label=<span class="string">f&#x27;真实值 - 时间步 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">        plt.plot(predictions[:, i], label=<span class="string">f&#x27;预测值 - 时间步 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">f&#x27;金价预测 vs 真实值 (<span class="subst">&#123;model_type&#125;</span>)&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;时间步&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;金价&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stack_models</span>(<span class="params">model_results, X_test, y_test</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用堆叠方法结合多个模型的预测结果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - model_results: 每个模型的结果，包括模型实例、类型等信息</span></span><br><span class="line"><span class="string">    - X_test: 测试数据特征</span></span><br><span class="line"><span class="string">    - y_test: 测试数据标签</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - 堆叠后的模型均方误差</span></span><br><span class="line"><span class="string">    - 堆叠模型的预测结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    combined_predictions = np.zeros_like(y_test)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(y_test.shape[<span class="number">1</span>]):  <span class="comment"># 针对每个时间步</span></span><br><span class="line">        stacked_predictions = np.column_stack([</span><br><span class="line">            np.mean([sub_model.predict(X_test.reshape(X_test.shape[<span class="number">0</span>], -<span class="number">1</span>)) <span class="keyword">for</span> sub_model <span class="keyword">in</span> model], axis=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(model, <span class="built_in">list</span>) <span class="keyword">else</span> model.predict(X_test)[:, t]</span><br><span class="line">            <span class="keyword">for</span> model_type, model, mse, _ <span class="keyword">in</span> model_results</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用线性回归作为堆叠模型</span></span><br><span class="line">        stacker = StackingRegressor(</span><br><span class="line">            estimators=[(<span class="string">f&#x27;model_<span class="subst">&#123;i&#125;</span>&#x27;</span>, LinearRegression()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stacked_predictions.shape[<span class="number">1</span>])],</span><br><span class="line">            final_estimator=RandomForestRegressor(n_estimators=<span class="number">100</span>, random_state=<span class="number">42</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        stacker.fit(stacked_predictions, y_test[:, t])</span><br><span class="line">        combined_predictions[:, t] = stacker.predict(stacked_predictions)</span><br><span class="line"></span><br><span class="line">    mse = mean_squared_error(y_test, combined_predictions)</span><br><span class="line">    <span class="keyword">return</span> mse, combined_predictions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">model_search</span>(<span class="params">X_train, y_train, X_val, y_val, X_test, y_test,</span></span><br><span class="line"><span class="params">                 model_types=[<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>, <span class="string">&#x27;XGBoost&#x27;</span>, <span class="string">&#x27;RandomForest&#x27;</span>, <span class="string">&#x27;SVM&#x27;</span>, <span class="string">&#x27;MLP&#x27;</span>], epochs=<span class="number">50</span>, batch_size=<span class="number">32</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    搜索最佳模型类型、训练步数，并评估模型性能。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - X_train, y_train: 训练数据及其标签</span></span><br><span class="line"><span class="string">    - X_val, y_val: 验证数据及其标签</span></span><br><span class="line"><span class="string">    - X_test, y_test: 测试数据及其标签</span></span><br><span class="line"><span class="string">    - model_types: 模型类型列表 ([&#x27;LSTM&#x27;, &#x27;GRU&#x27;, &#x27;CNN&#x27;, &#x27;XGBoost&#x27;, &#x27;RandomForest&#x27;, &#x27;SVM&#x27;, &#x27;MLP&#x27;])</span></span><br><span class="line"><span class="string">    - epochs: 最大训练轮次</span></span><br><span class="line"><span class="string">    - batch_size: 批次大小</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - 最佳模型类型和性能</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    best_model = <span class="literal">None</span></span><br><span class="line">    best_mse = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    best_model_type = <span class="literal">None</span></span><br><span class="line">    model_results = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> model_type <span class="keyword">in</span> model_types:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练模型: <span class="subst">&#123;model_type&#125;</span>&quot;</span>)</span><br><span class="line">        model = build_model(model_type, input_shape=(X_train.shape[<span class="number">1</span>], X_train.shape[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">            model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=epochs, batch_size=batch_size, verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X_train_flat = X_train.reshape(X_train.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">            X_val_flat = X_val.reshape(X_val.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  <span class="comment"># 训练每个时间步的模型</span></span><br><span class="line">                model[i].fit(X_train_flat, y_train[:, i])</span><br><span class="line"></span><br><span class="line">        mse = evaluate_model(model, X_test, y_test, model_type)</span><br><span class="line">        model_results.append((model_type, model, mse, model))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mse &lt; best_mse:</span><br><span class="line">            best_mse = mse</span><br><span class="line">            best_model = model</span><br><span class="line">            best_model_type = model_type</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用堆叠方法结合模型</span></span><br><span class="line">    combined_mse, combined_predictions = stack_models(model_results, X_test, y_test)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;混合模型的均方误差: <span class="subst">&#123;combined_mse&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> best_model, best_model_type, best_mse, combined_mse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 生成数据 (你可以根据你的情况替换为实际的数据生成过程)</span></span><br><span class="line">    <span class="comment"># 数据生成部分需要根据你具体的数据情况进行替换</span></span><br><span class="line">    X_train, X_val, X_test, y_train, y_val, y_test = data_preprocessing_main(</span><br><span class="line">        file_path=<span class="string">&#x27;gold_price_data_extracted.csv&#x27;</span>,</span><br><span class="line">        window_size=<span class="number">10</span>,</span><br><span class="line">        prediction_horizon=<span class="number">3</span>,</span><br><span class="line">        normalization_method=<span class="string">&#x27;minmax&#x27;</span>,</span><br><span class="line">        train_size=<span class="number">0.7</span>,</span><br><span class="line">        validation_size=<span class="number">0.1</span>,</span><br><span class="line">        drop_columns=[<span class="string">&#x27;Adj&#x27;</span>, <span class="string">&#x27;Volume&#x27;</span>],</span><br><span class="line">        indicators=[<span class="string">&#x27;MA&#x27;</span>, <span class="string">&#x27;RSI&#x27;</span>, <span class="string">&#x27;MACD&#x27;</span>, <span class="string">&#x27;Bollinger&#x27;</span>, <span class="string">&#x27;ATR&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行模型搜索</span></span><br><span class="line">    best_model, best_model_type, best_mse, combined_mse = model_search(X_train, y_train, X_val, y_val, X_test, y_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存最佳模型</span></span><br><span class="line">    <span class="keyword">if</span> best_model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">        best_model.save(<span class="string">f&#x27;best_model_<span class="subst">&#123;best_model_type&#125;</span>.h5&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;最佳模型 <span class="subst">&#123;best_model_type&#125;</span> 已保存。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240819003754338.png" alt="image-20240819003754338"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">2024-08-19 00:32:57,653 - INFO - 数据加载完成</span><br><span class="line">2024-08-19 00:32:57,653 - INFO - 原始数据包含 3474 行，7 列</span><br><span class="line">2024-08-19 00:32:57,665 - INFO - 数据清理完成</span><br><span class="line">2024-08-19 00:32:57,665 - INFO - 清理后的数据包含 3474 行，5 列</span><br><span class="line">2024-08-19 00:32:57,668 - INFO - 数据预览:</span><br><span class="line">           Date    Open    High     Low   Close</span><br><span class="line">3473 2010-10-05  134.10  134.10  134.10  134.03</span><br><span class="line">3472 2010-10-06  134.10  135.00  134.10  134.77</span><br><span class="line">3471 2010-10-19  136.98  136.98  132.93  133.60</span><br><span class="line">3470 2010-10-20  133.43  134.70  133.38  134.42</span><br><span class="line">3469 2010-10-21  134.32  134.72  131.88  132.56</span><br><span class="line">2024-08-19 00:32:57,668 - INFO - 生成技术指标: [&#x27;MA&#x27;, &#x27;RSI&#x27;, &#x27;MACD&#x27;, &#x27;Bollinger&#x27;, &#x27;ATR&#x27;]</span><br><span class="line">2024-08-19 00:32:57,688 - INFO - 技术指标生成完成</span><br><span class="line">2024-08-19 00:32:57,691 - INFO - 数据归一化/标准化完成，方法: minmax</span><br><span class="line">2024-08-19 00:32:57,814 - INFO - 滑动窗口生成特征和标签，窗口大小: 10, 预测范围: 3</span><br><span class="line">2024-08-19 00:32:57,816 - INFO - 数据集划分完成: 训练集大小=(2407, 10, 11), 验证集大小=(343, 10, 11), 测试集大小=(689, 10, 11)</span><br><span class="line">2024-08-19 00:32:57,816 - INFO - 训练集大小: (2407, 10, 11), 验证集大小: (343, 10, 11), 测试集大小: (689, 10, 11)</span><br><span class="line">E:\ProgramData\anaconda3\envs\goldenpre\Lib\site-packages\keras\src\layers\rnn\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.</span><br><span class="line">  super().__init__(**kwargs)</span><br><span class="line">训练模型: LSTM</span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step</span><br><span class="line">测试集上的均方误差: 0.0005383426715256204</span><br><span class="line">训练模型: GRU</span><br><span class="line">E:\ProgramData\anaconda3\envs\goldenpre\Lib\site-packages\keras\src\layers\rnn\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.</span><br><span class="line">  super().__init__(**kwargs)</span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 9ms/step</span><br><span class="line">测试集上的均方误差: 0.0022094757470167074</span><br><span class="line">训练模型: CNN</span><br><span class="line">E:\ProgramData\anaconda3\envs\goldenpre\Lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.</span><br><span class="line">  super().__init__(activity_regularizer=activity_regularizer, **kwargs)</span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step </span><br><span class="line">测试集上的均方误差: 0.0009394372486201054</span><br><span class="line">训练模型: XGBoost</span><br><span class="line">测试集上的均方误差: 0.013671010934760258</span><br><span class="line">训练模型: RandomForest</span><br><span class="line">测试集上的均方误差: 0.013248586110257024</span><br><span class="line">训练模型: SVM</span><br><span class="line">测试集上的均方误差: 0.04974934214151624</span><br><span class="line">训练模型: MLP</span><br><span class="line">测试集上的均方误差: 0.0010740313068716674</span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step </span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step </span><br><span class="line">22/22 ━━━━━━━━━━━━━━━━━━━━ 0s 667us/step</span><br><span class="line">混合模型的均方误差: 1.7644727252183848e-05</span><br><span class="line">混合模型已保存为 stacked_model.joblib</span><br><span class="line">最佳模型类型: LSTM，测试集MSE: 0.0005383426715256204</span><br><span class="line">混合模型的测试集MSE: 1.7644727252183848e-05</span><br><span class="line">2024-08-19 00:34:38,340 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save(&#x27;my_model.keras&#x27;)` or `keras.saving.save_model(model, &#x27;my_model.keras&#x27;)`. </span><br><span class="line">最佳模型 LSTM 已保存。</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>这样我们就得到了最佳拟合的混合模型stacked_model.joblib，基准测试显示精度非常高，与真实值几乎一致！！！</p><hr><h2 id="下一期内容："><a href="#下一期内容：" class="headerlink" title="下一期内容："></a>下一期内容：</h2><p>模型的部署和上线。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在上期我们实现了多算法训练的不同的模型来对金价走势进行预测，可以看到LSTM得到的模型拟合的精度最高；&lt;/p&gt;
&lt;p&gt;我们后续提出了两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何实现多算法结合的混合模型？&lt;/li&gt;
&lt;li&gt;如何将得到的最佳模型进行部署和实战检验？&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="从零开始训练一个神经网络" scheme="http://nikolahuang.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>从零开始训练一个神经网络之三：设计和训练预测金价走势的深度学习模型</title>
    <link href="http://nikolahuang.github.io/2024/08/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E4%B8%89%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%92%8C%E8%AE%AD%E7%BB%83%E9%A2%84%E6%B5%8B%E9%87%91%E4%BB%B7%E8%B5%B0%E5%8A%BF%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/"/>
    <id>http://nikolahuang.github.io/2024/08/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E4%B8%89%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%92%8C%E8%AE%AD%E7%BB%83%E9%A2%84%E6%B5%8B%E9%87%91%E4%BB%B7%E8%B5%B0%E5%8A%BF%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/</id>
    <published>2024-08-14T16:23:12.000Z</published>
    <updated>2024-08-16T18:15:23.440Z</updated>
    
    <content type="html"><![CDATA[<p>当前步骤的主要任务目标是<strong>数据集划分</strong>，其目的是将经过预处理和特征工程生成的数据划分为不同的子集，以便于模型的训练、验证和测试，进一步进行模型设计与训练。具体目标如下：</p><h3 id="1-生成适合时间序列模型的特征和标签"><a href="#1-生成适合时间序列模型的特征和标签" class="headerlink" title="1. 生成适合时间序列模型的特征和标签"></a>1. <strong>生成适合时间序列模型的特征和标签</strong></h3><ul><li><strong>滑动窗口生成</strong>：通过滑动窗口方法从时间序列数据中生成特征和标签，使模型能够捕捉时间序列中的模式和趋势。</li><li><strong>标签创建</strong>：生成的标签对应于未来若干天的金价变化，目的是让模型能够预测这些未来的值。</li></ul><h3 id="2-归一化-标准化数据"><a href="#2-归一化-标准化数据" class="headerlink" title="2. 归一化&#x2F;标准化数据"></a>2. <strong>归一化&#x2F;标准化数据</strong></h3><ul><li><strong>数据归一化&#x2F;标准化</strong>：对数据进行归一化或标准化处理，确保模型在训练过程中更快收敛，并且不同特征之间的数值差异不会导致模型性能的不稳定。</li></ul><h3 id="3-划分训练集、验证集和测试集"><a href="#3-划分训练集、验证集和测试集" class="headerlink" title="3. 划分训练集、验证集和测试集"></a>3. <strong>划分训练集、验证集和测试集</strong></h3><ul><li><strong>训练集</strong>：用于模型的训练，占数据的主要部分。目的是通过这一部分数据调整模型参数，使模型能够学习到数据的模式。</li><li><strong>验证集</strong>：用于模型的超参数调优和早停（Early Stopping），帮助确定模型的最佳配置并防止过拟合。</li><li><strong>测试集</strong>：用于最终评估模型性能，确保模型在未见过的数据上能够良好地泛化。</li></ul><h3 id="为什么这些步骤重要？"><a href="#为什么这些步骤重要？" class="headerlink" title="为什么这些步骤重要？"></a>为什么这些步骤重要？</h3><ul><li><strong>时间序列的特性</strong>：时间序列数据有其独特的模式和依赖关系，直接使用传统的随机划分方法可能破坏这些模式。因此，采用滑动窗口等方法能够保持时间序列的连续性。</li><li><strong>数据归一化&#x2F;标准化</strong>：归一化和标准化可以帮助模型更好地理解和处理不同量级的数据，防止某些特征由于值的范围过大而主导模型的学习过程。</li><li><strong>数据集划分</strong>：适当划分数据集可以有效地评估模型的泛化能力，防止过拟合，提高模型在实际应用中的表现。</li></ul><h3 id="最终目标"><a href="#最终目标" class="headerlink" title="最终目标"></a>最终目标</h3><p>通过完成这一步，将准备好高质量的训练集、验证集和测试集，这些子集将为下一步的<strong>模型设计与训练</strong>奠定坚实的基础。模型训练的效果将很大程度上取决于数据集的划分质量，因此这是一个至关重要的步骤。</p><hr><p>让我们开始吧！</p><p>具体来说：</p><h3 id="1-数据加载与清理"><a href="#1-数据加载与清理" class="headerlink" title="1. 数据加载与清理"></a>1. <strong>数据加载与清理</strong></h3><h4 id="为什么这么做？"><a href="#为什么这么做？" class="headerlink" title="为什么这么做？"></a>为什么这么做？</h4><p>在处理金融数据时，首先要确保数据的完整性和一致性。金融数据通常包含多余的列、格式不一致的数值（如带有逗号的字符串形式的数值）、时间序列不连续或未排序的情况。清理数据的目的是确保接下来的特征生成和模型训练能在干净的数据上进行，以保证结果的准确性。</p><h4 id="如何设计？"><a href="#如何设计？" class="headerlink" title="如何设计？"></a>如何设计？</h4><p>数据加载后，首先对列名进行标准化处理，去除空白和不必要的说明，确保列名的一致性。然后，数据中的日期列被转换为<code>datetime</code>类型，以便后续的时间序列分析。接着，对数值列进行处理，将带有逗号的字符串形式数值转换为浮点数。此外，删除不相关的列以简化数据。</p><h4 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h4><p>利用<code>pandas</code>库中的<code>read_csv</code>函数加载数据，并使用<code>str.replace()</code>和<code>astype(float)</code>方法将字符串数值转换为浮点数。删除不必要的列，并按日期排序。</p><h3 id="2-特征生成"><a href="#2-特征生成" class="headerlink" title="2. 特征生成"></a>2. <strong>特征生成</strong></h3><p>特征工程是提升模型性能的关键步骤。通过生成技术指标（如移动平均线、相对强弱指数、MACD、布林带、ATR等），我们可以提取和增强时间序列中的趋势、波动性、动量等信息，这些信息有助于模型更好地理解市场行为并进行预测。</p><h4 id="如何设计？-1"><a href="#如何设计？-1" class="headerlink" title="如何设计？"></a>如何设计？</h4><p>选取常用的技术指标（如MA、RSI、MACD、布林带、ATR），每个指标都针对不同的市场特性进行设计，帮助模型识别市场中的模式和趋势。</p><p>使用<code>pandas</code>的内置函数进行技术指标计算。例如，<code>rolling</code>方法用于计算移动平均线，<code>ewm</code>方法用于计算指数移动平均线。通过封装函数如<code>compute_RSI()</code>、<code>compute_bollinger_bands()</code>和<code>compute_atr()</code>，生成各类技术指标。</p><h3 id="3-数据归一化"><a href="#3-数据归一化" class="headerlink" title="3. 数据归一化"></a>3. <strong>数据归一化</strong></h3><h4 id="为什么这么做？-1"><a href="#为什么这么做？-1" class="headerlink" title="为什么这么做？"></a>为什么这么做？</h4><p>归一化是为了使数据特征的数值范围相似，避免某些特征因数值范围过大而主导模型的学习过程。归一化还可以加速模型训练的收敛速度。</p><p>目前脚本提供了多种归一化方法（如<code>MinMaxScaler</code>和<code>StandardScaler</code>），用户可以根据需求选择不同的归一化策略。一般来说，<code>MinMaxScaler</code>将数据缩放到[0, 1]区间，而<code>StandardScaler</code>将数据转换为零均值和单位方差的分布。</p><p>使用<code>sklearn.preprocessing</code>中的<code>MinMaxScaler</code>和<code>StandardScaler</code>进行数据归一化，并返回归一化后的数据和对应的<code>scaler</code>对象。</p><p>归一化过程确保不同特征对模型的影响是均衡的，从而提高模型的学习能力和稳定性。</p><h3 id="4-滑动窗口处理"><a href="#4-滑动窗口处理" class="headerlink" title="4. 滑动窗口处理"></a>4. <strong>滑动窗口处理</strong></h3><h4 id="为什么这么做？-2"><a href="#为什么这么做？-2" class="headerlink" title="为什么这么做？"></a>为什么这么做？</h4><p>滑动窗口是处理时间序列数据的一种常用方法，它能够将时间序列数据转化为适合深度学习模型输入的特征矩阵。通过滑动窗口，可以捕捉时间序列中的模式和依赖关系。</p><p>通过指定窗口大小和预测范围，将时间序列数据转换为适合LSTM、GRU等模型输入的特征和标签对。每个滑动窗口生成一段时间序列，作为模型的输入特征，标签则是后续几天的目标值。</p><h4 id="如何实现？-1"><a href="#如何实现？-1" class="headerlink" title="如何实现？"></a>如何实现？</h4><p>使用一个循环遍历整个时间序列数据，根据窗口大小提取连续的时间序列段作为特征，并将预测范围内的目标值作为标签。</p><p>滑动窗口技术将时间序列数据转化为多个短期序列，使得深度学习模型能够在局部时间内识别模式和依赖关系。</p><h3 id="5-数据集划分"><a href="#5-数据集划分" class="headerlink" title="5. 数据集划分"></a>5. <strong>数据集划分</strong></h3><p>为了评估模型的性能并避免过拟合，我们需要将数据划分为训练集、验证集和测试集。训练集用于模型训练，验证集用于调参和避免过拟合，测试集用于最终评估模型的泛化能力。</p><p>根据用户指定的比例，将数据集划分为训练集、验证集和测试集，保证训练、验证和测试集之间不存在重叠，确保评估的公平性。</p><h4 id="如何实现？-2"><a href="#如何实现？-2" class="headerlink" title="如何实现？"></a>如何实现？</h4><p>使用Python的数组切片功能，将特征和标签数据按比例划分为训练、验证和测试集。</p><p>通过数据集划分，可以评估模型在未见过的数据上的表现，从而判断模型的泛化能力和实际应用效果。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>包括数据预处理、特征生成、滑动窗口处理、数据集划分，以及数据归一化和标准化等步骤。为了进一步提高灵活性，代码中包括更多的参数选项，允许用户自定义处理流程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler, StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_and_clean_data</span>(<span class="params">file_path, drop_columns=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载数据并进行初步清理，包括处理列名、转换数据类型、删除无关列。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    file_path - CSV文件路径</span></span><br><span class="line"><span class="string">    drop_columns - 要删除的列列表 (list)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    清理后的DataFrame</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 加载数据</span></span><br><span class="line">    data = pd.read_csv(file_path)</span><br><span class="line">    logging.info(<span class="string">&quot;数据加载完成&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;原始数据包含 <span class="subst">&#123;data.shape[<span class="number">0</span>]&#125;</span> 行，<span class="subst">&#123;data.shape[<span class="number">1</span>]&#125;</span> 列&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清理列名：去除多余空白和说明</span></span><br><span class="line">    data.columns = data.columns.<span class="built_in">str</span>.strip().<span class="built_in">str</span>.split().<span class="built_in">str</span>[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换日期列</span></span><br><span class="line">    data[<span class="string">&#x27;Date&#x27;</span>] = pd.to_datetime(data[<span class="string">&#x27;Date&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换数值列（移除逗号并转换为浮点数）</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> [<span class="string">&#x27;Open&#x27;</span>, <span class="string">&#x27;High&#x27;</span>, <span class="string">&#x27;Low&#x27;</span>, <span class="string">&#x27;Close&#x27;</span>]:</span><br><span class="line">        data[col] = data[col].<span class="built_in">str</span>.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>).astype(<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除无关列</span></span><br><span class="line">    <span class="keyword">if</span> drop_columns:</span><br><span class="line">        data = data.drop(columns=drop_columns)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按日期排序</span></span><br><span class="line">    data = data.sort_values(<span class="string">&#x27;Date&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">&quot;数据清理完成&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;清理后的数据包含 <span class="subst">&#123;data.shape[<span class="number">0</span>]&#125;</span> 行，<span class="subst">&#123;data.shape[<span class="number">1</span>]&#125;</span> 列&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;数据预览:\n<span class="subst">&#123;data.head()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_technical_indicators</span>(<span class="params">data, indicators=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成技术指标。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    data - 输入的DataFrame</span></span><br><span class="line"><span class="string">    indicators - 要生成的技术指标列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    包含技术指标的DataFrame</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> indicators <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        indicators = [<span class="string">&#x27;MA&#x27;</span>, <span class="string">&#x27;RSI&#x27;</span>, <span class="string">&#x27;MACD&#x27;</span>, <span class="string">&#x27;Bollinger&#x27;</span>, <span class="string">&#x27;ATR&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;生成技术指标: <span class="subst">&#123;indicators&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;MA&#x27;</span> <span class="keyword">in</span> indicators:</span><br><span class="line">        data[<span class="string">&#x27;MA_5&#x27;</span>] = data[<span class="string">&#x27;Close&#x27;</span>].rolling(window=<span class="number">5</span>).mean()</span><br><span class="line">        data[<span class="string">&#x27;MA_10&#x27;</span>] = data[<span class="string">&#x27;Close&#x27;</span>].rolling(window=<span class="number">10</span>).mean()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;RSI&#x27;</span> <span class="keyword">in</span> indicators:</span><br><span class="line">        data[<span class="string">&#x27;RSI_14&#x27;</span>] = compute_RSI(data[<span class="string">&#x27;Close&#x27;</span>], window=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;MACD&#x27;</span> <span class="keyword">in</span> indicators:</span><br><span class="line">        short_ema = data[<span class="string">&#x27;Close&#x27;</span>].ewm(span=<span class="number">12</span>, adjust=<span class="literal">False</span>).mean()</span><br><span class="line">        long_ema = data[<span class="string">&#x27;Close&#x27;</span>].ewm(span=<span class="number">26</span>, adjust=<span class="literal">False</span>).mean()</span><br><span class="line">        data[<span class="string">&#x27;MACD&#x27;</span>] = short_ema - long_ema</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Bollinger&#x27;</span> <span class="keyword">in</span> indicators:</span><br><span class="line">        data[<span class="string">&#x27;BB_upper&#x27;</span>], data[<span class="string">&#x27;BB_lower&#x27;</span>] = compute_bollinger_bands(data[<span class="string">&#x27;Close&#x27;</span>], window=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;ATR&#x27;</span> <span class="keyword">in</span> indicators:</span><br><span class="line">        data[<span class="string">&#x27;ATR&#x27;</span>] = compute_atr(data, window=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移除因滚动计算产生的NaN值</span></span><br><span class="line">    data = data.dropna()</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">&quot;技术指标生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_RSI</span>(<span class="params">series, window=<span class="number">14</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算相对强弱指数 (RSI)。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    diff = series.diff(<span class="number">1</span>).dropna()</span><br><span class="line">    gain = <span class="number">0.5</span> * (diff + <span class="built_in">abs</span>(diff))</span><br><span class="line">    loss = <span class="number">0.5</span> * (diff - <span class="built_in">abs</span>(diff))</span><br><span class="line">    avg_gain = gain.rolling(window=window, min_periods=<span class="number">1</span>).mean()</span><br><span class="line">    avg_loss = <span class="built_in">abs</span>(loss.rolling(window=window, min_periods=<span class="number">1</span>).mean())</span><br><span class="line">    rs = avg_gain / avg_loss</span><br><span class="line">    rsi = <span class="number">100</span> - (<span class="number">100</span> / (<span class="number">1</span> + rs))</span><br><span class="line">    <span class="keyword">return</span> rsi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_bollinger_bands</span>(<span class="params">series, window=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算布林带的上下轨道。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sma = series.rolling(window=window).mean()</span><br><span class="line">    std = series.rolling(window=window).std()</span><br><span class="line">    upper_band = sma + (std * <span class="number">2</span>)</span><br><span class="line">    lower_band = sma - (std * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> upper_band, lower_band</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_atr</span>(<span class="params">data, window=<span class="number">14</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算平均真实波动幅度 (ATR)。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    high_low = data[<span class="string">&#x27;High&#x27;</span>] - data[<span class="string">&#x27;Low&#x27;</span>]</span><br><span class="line">    high_close = np.<span class="built_in">abs</span>(data[<span class="string">&#x27;High&#x27;</span>] - data[<span class="string">&#x27;Close&#x27;</span>].shift())</span><br><span class="line">    low_close = np.<span class="built_in">abs</span>(data[<span class="string">&#x27;Low&#x27;</span>] - data[<span class="string">&#x27;Close&#x27;</span>].shift())</span><br><span class="line">    tr = high_low.combine(high_close, <span class="built_in">max</span>).combine(low_close, <span class="built_in">max</span>)</span><br><span class="line">    atr = tr.rolling(window=window, min_periods=<span class="number">1</span>).mean()</span><br><span class="line">    <span class="keyword">return</span> atr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">normalize_data</span>(<span class="params">data, method=<span class="string">&#x27;minmax&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    归一化或标准化数据。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    data - 输入的DataFrame</span></span><br><span class="line"><span class="string">    method - 归一化或标准化方法 (&#x27;minmax&#x27; 或 &#x27;standard&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    归一化或标准化后的DataFrame，及Scaler对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&#x27;minmax&#x27;</span>:</span><br><span class="line">        scaler = MinMaxScaler()</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&#x27;standard&#x27;</span>:</span><br><span class="line">        scaler = StandardScaler()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unsupported normalization method&quot;</span>)</span><br><span class="line"></span><br><span class="line">    scaled_data = scaler.fit_transform(data)</span><br><span class="line">    logging.info(<span class="string">f&quot;数据归一化/标准化完成，方法: <span class="subst">&#123;method&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> pd.DataFrame(scaled_data, columns=data.columns), scaler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_sliding_windows</span>(<span class="params">data, window_size, prediction_horizon</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过滑动窗口生成特征和标签序列。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    data - 输入的DataFrame</span></span><br><span class="line"><span class="string">    window_size - 滑动窗口的大小</span></span><br><span class="line"><span class="string">    prediction_horizon - 预测的时间范围</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    特征矩阵和标签向量</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    X, y = [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) - window_size - prediction_horizon):</span><br><span class="line">        X.append(data[i:(i + window_size)].values)</span><br><span class="line">        y.append(data[(i + window_size):(i + window_size + prediction_horizon)][<span class="string">&#x27;Close&#x27;</span>].values)</span><br><span class="line">    logging.info(<span class="string">f&quot;滑动窗口生成特征和标签，窗口大小: <span class="subst">&#123;window_size&#125;</span>, 预测范围: <span class="subst">&#123;prediction_horizon&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> np.array(X), np.array(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_data</span>(<span class="params">X, y, train_size=<span class="number">0.7</span>, validation_size=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将数据划分为训练集、验证集和测试集。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    X - 特征矩阵</span></span><br><span class="line"><span class="string">    y - 标签向量</span></span><br><span class="line"><span class="string">    train_size - 训练集比例</span></span><br><span class="line"><span class="string">    validation_size - 验证集比例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    分割后的数据集</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total_size = X.shape[<span class="number">0</span>]</span><br><span class="line">    train_end = <span class="built_in">int</span>(total_size * train_size)</span><br><span class="line">    val_end = train_end + <span class="built_in">int</span>(total_size * validation_size)</span><br><span class="line"></span><br><span class="line">    X_train, X_val, X_test = X[:train_end], X[train_end:val_end], X[val_end:]</span><br><span class="line">    y_train, y_val, y_test = y[:train_end], y[train_end:val_end], y[val_end:]</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;数据集划分完成: 训练集大小=<span class="subst">&#123;X_train.shape&#125;</span>, 验证集大小=<span class="subst">&#123;X_val.shape&#125;</span>, 测试集大小=<span class="subst">&#123;X_test.shape&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> X_train, X_val, X_test, y_train, y_val, y_test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">file_path, window_size=<span class="number">10</span>, prediction_horizon=<span class="number">3</span>, normalization_method=<span class="string">&#x27;minmax&#x27;</span>,</span></span><br><span class="line"><span class="params">         train_size=<span class="number">0.7</span>, validation_size=<span class="number">0.1</span>, drop_columns=<span class="literal">None</span>, indicators=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    综合数据加载、清理、特征生成、归一化、滑动窗口处理和数据集划分的一体化流程。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    file_path - 数据文件路径</span></span><br><span class="line"><span class="string">    window_size - 滑动窗口大小</span></span><br><span class="line"><span class="string">    prediction_horizon - 预测时间范围</span></span><br><span class="line"><span class="string">    normalization_method - 归一化或标准化方法 (&#x27;minmax&#x27; 或 &#x27;standard&#x27;)</span></span><br><span class="line"><span class="string">    train_size - 训练集比例</span></span><br><span class="line"><span class="string">    validation_size - 验证集比例</span></span><br><span class="line"><span class="string">    drop_columns - 要删除的列列表</span></span><br><span class="line"><span class="string">    indicators - 要生成的技术指标列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    分割后的训练集、验证集、测试集</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 加载和清理数据</span></span><br><span class="line">    data = load_and_clean_data(file_path, drop_columns)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 生成技术指标</span></span><br><span class="line">    data = generate_technical_indicators(data, indicators)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 创建目标变量 (Target)</span></span><br><span class="line">    data[<span class="string">&#x27;Target&#x27;</span>] = data[<span class="string">&#x27;Close&#x27;</span>].shift(-prediction_horizon) - data[<span class="string">&#x27;Close&#x27;</span>]</span><br><span class="line">    data = data.dropna()  <span class="comment"># 删除因目标列创建而产生的NaN值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 归一化或标准化数据</span></span><br><span class="line">    normalized_data, scaler = normalize_data(data.drop(columns=[<span class="string">&#x27;Date&#x27;</span>, <span class="string">&#x27;Target&#x27;</span>]), method=normalization_method)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. 生成滑动窗口特征和标签</span></span><br><span class="line">    X, y = create_sliding_windows(normalized_data, window_size, prediction_horizon)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6. 数据集划分</span></span><br><span class="line">    X_train, X_val, X_test, y_train, y_val, y_test = split_data(X, y, train_size, validation_size)</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;训练集大小: <span class="subst">&#123;X_train.shape&#125;</span>, 验证集大小: <span class="subst">&#123;X_val.shape&#125;</span>, 测试集大小: <span class="subst">&#123;X_test.shape&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> X_train, X_val, X_test, y_train, y_val, y_test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    X_train, X_val, X_test, y_train, y_val, y_test = main(</span><br><span class="line">        file_path=<span class="string">&#x27;gold_price_data_extracted.csv&#x27;</span>,</span><br><span class="line">        window_size=<span class="number">10</span>,</span><br><span class="line">        prediction_horizon=<span class="number">3</span>,</span><br><span class="line">        normalization_method=<span class="string">&#x27;minmax&#x27;</span>,</span><br><span class="line">        train_size=<span class="number">0.7</span>,</span><br><span class="line">        validation_size=<span class="number">0.1</span>,</span><br><span class="line">        drop_columns=[<span class="string">&#x27;Adj&#x27;</span>, <span class="string">&#x27;Volume&#x27;</span>],  <span class="comment"># 示例：删除不需要的列</span></span><br><span class="line">        indicators=[<span class="string">&#x27;MA&#x27;</span>, <span class="string">&#x27;RSI&#x27;</span>, <span class="string">&#x27;MACD&#x27;</span>, <span class="string">&#x27;Bollinger&#x27;</span>, <span class="string">&#x27;ATR&#x27;</span>]  <span class="comment"># 选择要生成的技术指标</span></span><br><span class="line">    )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/08/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E4%B8%89%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%92%8C%E8%AE%AD%E7%BB%83%E9%A2%84%E6%B5%8B%E9%87%91%E4%BB%B7%E8%B5%B0%E5%8A%BF%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/Users\17769\AppData\Local\Temp\QQ_1723658243436.png" alt="QQ_1723658243436"></p><p>这样就初步完成了数据清理和特征工程、数据划分等；</p><p>进入下一步：</p><p>我们将重点放在<strong>模型的设计与训练</strong>上，尤其是在处理时间序列数据时，LSTM（长短期记忆网络）和GRU（门控循环单元）等深度学习模型是常用的选择。以下是将要进行的步骤：</p><h3 id="1-模型选择与设计"><a href="#1-模型选择与设计" class="headerlink" title="1. 模型选择与设计"></a>1. <strong>模型选择与设计</strong></h3><p>设计一个LSTM模型，LSTM模型擅长处理具有长期依赖关系的时间序列数据。LSTM模型可以记住长期的模式和趋势，因此非常适合用于预测未来的金价。</p><h4 id="模型设计的思路："><a href="#模型设计的思路：" class="headerlink" title="模型设计的思路："></a>模型设计的思路：</h4><ul><li><strong>输入层</strong>：处理滑动窗口生成的时间序列数据。</li><li><strong>LSTM层</strong>：捕捉时间序列中的长期依赖关系。</li><li><strong>Dropout层</strong>：防止过拟合。</li><li><strong>全连接层</strong>：将LSTM的输出映射到预测值。</li><li><strong>输出层</strong>：输出未来的金价变化。</li></ul><h3 id="2-模型训练"><a href="#2-模型训练" class="headerlink" title="2. 模型训练"></a>2. <strong>模型训练</strong></h3><p>在训练模型时，我们会使用已经划分的训练集，并在验证集上进行超参数调优，以防止过拟合。我们还可以设置早停机制来自动终止训练，当验证集的损失不再下降时。</p><h4 id="训练的步骤："><a href="#训练的步骤：" class="headerlink" title="训练的步骤："></a>训练的步骤：</h4><ul><li><strong>定义损失函数</strong>：我们会选择均方误差（MSE）作为损失函数，这是回归问题中常用的损失函数。</li><li><strong>选择优化器</strong>：使用Adam优化器，因为它能够自适应地调整学习率，通常表现较好。</li><li><strong>设置训练轮数和批次大小</strong>：这些超参数可以在训练过程中进行调优。</li></ul><h3 id="3-模型评估"><a href="#3-模型评估" class="headerlink" title="3. 模型评估"></a>3. <strong>模型评估</strong></h3><p>在训练完成后，我们会在测试集上评估模型的性能，使用MSE、RMSE（均方根误差）等指标来衡量预测的准确性。</p><h3 id="4-模型保存与加载"><a href="#4-模型保存与加载" class="headerlink" title="4. 模型保存与加载"></a>4. <strong>模型保存与加载</strong></h3><p>为了便于模型的重用和部署，我们可以将训练好的模型保存到文件中，并提供加载模型的接口，以便在实际预测中使用。</p><h3 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p><strong>模型设计与编译</strong></p></li><li><p><strong>模型训练</strong></p></li><li><p><strong>模型评估</strong></p></li><li><p><strong>模型保存与加载</strong></p></li></ol><p>如果在训练过程中没有输出或图表显示，我们还可以添加一些日志或检查<code>evaluate_model</code>函数中是否正确显示了测试结果。</p><h4 id="检查模型性能"><a href="#检查模型性能" class="headerlink" title="检查模型性能"></a>检查模型性能</h4><p>可以使用以下方法来验证和分析模型的性能：</p><ol><li><strong>检查损失值</strong>：在训练和验证过程中，损失值应该随着训练轮数的增加而减少。如果设置了<code>EarlyStopping</code>，训练可能会提前停止，这说明模型已经达到最优状态。</li><li><strong>绘制损失曲线</strong>：查看训练和验证的损失曲线，确保没有发生过拟合（即验证损失明显高于训练损失）。</li><li><strong>评估测试集性能</strong>：通过测试集上的均方误差（MSE）或均方根误差（RMSE）来衡量模型的泛化能力。</li><li><strong>预测 vs. 真实值的对比</strong>：查看模型预测结果与真实值的对比图表，直观地理解模型的预测效果。</li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> LSTM, Dense, Dropout</span><br><span class="line"><span class="keyword">from</span> data_solve <span class="keyword">import</span> main <span class="keyword">as</span> data_preprocessing_main  <span class="comment"># 导入数据预处理的主函数</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Matplotlib使用中文字体，确保图表中的中文字符正常显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 使用黑体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 确保负号显示正常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_lstm_model</span>(<span class="params">input_shape, units=<span class="number">50</span>, dropout_rate=<span class="number">0.2</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    构建并编译LSTM模型。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - input_shape: 输入数据的形状 (time_steps, num_features)</span></span><br><span class="line"><span class="string">    - units: LSTM单元的数量</span></span><br><span class="line"><span class="string">    - dropout_rate: Dropout层的比例，用于防止过拟合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - 编译好的LSTM模型</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = Sequential([</span><br><span class="line">        LSTM(units=units, return_sequences=<span class="literal">True</span>, input_shape=input_shape),</span><br><span class="line">        Dropout(dropout_rate),</span><br><span class="line">        LSTM(units=units, return_sequences=<span class="literal">False</span>),</span><br><span class="line">        Dropout(dropout_rate),</span><br><span class="line">        Dense(units=<span class="number">3</span>)  <span class="comment"># 输出3个时间步的预测</span></span><br><span class="line">    ])</span><br><span class="line">    model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mean_squared_error&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_model</span>(<span class="params">model, X_train, y_train, X_val, y_val, epochs=<span class="number">50</span>, batch_size=<span class="number">32</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    训练LSTM模型，并返回训练历史。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - model: 编译好的LSTM模型</span></span><br><span class="line"><span class="string">    - X_train, y_train: 训练数据及其标签</span></span><br><span class="line"><span class="string">    - X_val, y_val: 验证数据及其标签</span></span><br><span class="line"><span class="string">    - epochs: 训练轮数</span></span><br><span class="line"><span class="string">    - batch_size: 批次大小</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - 训练历史 (history) 对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    early_stopping = tf.keras.callbacks.EarlyStopping(</span><br><span class="line">        monitor=<span class="string">&#x27;val_loss&#x27;</span>, patience=<span class="number">10</span>, restore_best_weights=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line">    history = model.fit(</span><br><span class="line">        X_train, y_train,</span><br><span class="line">        validation_data=(X_val, y_val),</span><br><span class="line">        epochs=epochs, batch_size=batch_size,</span><br><span class="line">        callbacks=[early_stopping]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> history</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_training_history</span>(<span class="params">history</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制训练和验证损失随训练轮次的变化曲线。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - history: 训练历史对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">    plt.plot(history.history[<span class="string">&#x27;loss&#x27;</span>], label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">    plt.plot(history.history[<span class="string">&#x27;val_loss&#x27;</span>], label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;训练和验证损失随训练轮次的变化&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;训练轮次&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;损失&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate_model</span>(<span class="params">model, X_test, y_test</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    评估模型在测试集上的表现，并绘制预测值与真实值的对比图。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - model: 训练好的LSTM模型</span></span><br><span class="line"><span class="string">    - X_test, y_test: 测试数据及其标签</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - 测试集上的均方误差 (MSE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    predictions = model.predict(X_test)</span><br><span class="line">    mse = mean_squared_error(y_test, predictions)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;测试集上的均方误差: <span class="subst">&#123;mse&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(predictions.shape[<span class="number">1</span>]):  <span class="comment"># 针对每个时间步绘制预测和真实值的对比图</span></span><br><span class="line">        plt.plot(y_test[:, i], label=<span class="string">f&#x27;真实值 - 时间步 <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">        plt.plot(predictions[:, i], label=<span class="string">f&#x27;预测值 - 时间步 <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;金价预测 vs 真实值&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;时间步&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;金价&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_model</span>(<span class="params">model, file_path=<span class="string">&#x27;lstm_gold_price_model.h5&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    保存训练好的模型。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - model: 训练好的LSTM模型</span></span><br><span class="line"><span class="string">    - file_path: 保存模型的路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model.save(file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;模型已保存到 <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_model</span>(<span class="params">file_path=<span class="string">&#x27;lstm_model.h5&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载保存的模型。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - file_path: 模型文件路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - 加载的LSTM模型</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = tf.keras.models.load_model(file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;模型已从 <span class="subst">&#123;file_path&#125;</span> 加载&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 数据预处理: 生成训练集、验证集和测试集</span></span><br><span class="line">    X_train, X_val, X_test, y_train, y_val, y_test = data_preprocessing_main(</span><br><span class="line">        file_path=<span class="string">&#x27;gold_price_data_extracted.csv&#x27;</span>,</span><br><span class="line">        window_size=<span class="number">10</span>,</span><br><span class="line">        prediction_horizon=<span class="number">3</span>,</span><br><span class="line">        normalization_method=<span class="string">&#x27;minmax&#x27;</span>,</span><br><span class="line">        train_size=<span class="number">0.7</span>,</span><br><span class="line">        validation_size=<span class="number">0.1</span>,</span><br><span class="line">        drop_columns=[<span class="string">&#x27;Adj&#x27;</span>, <span class="string">&#x27;Volume&#x27;</span>],</span><br><span class="line">        indicators=[<span class="string">&#x27;MA&#x27;</span>, <span class="string">&#x27;RSI&#x27;</span>, <span class="string">&#x27;MACD&#x27;</span>, <span class="string">&#x27;Bollinger&#x27;</span>, <span class="string">&#x27;ATR&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建LSTM模型</span></span><br><span class="line">    input_shape = (X_train.shape[<span class="number">1</span>], X_train.shape[<span class="number">2</span>])</span><br><span class="line">    model = build_lstm_model(input_shape=input_shape, units=<span class="number">50</span>, dropout_rate=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练LSTM模型</span></span><br><span class="line">    history = train_model(model, X_train, y_train, X_val, y_val, epochs=<span class="number">50</span>, batch_size=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制训练历史</span></span><br><span class="line">    plot_training_history(history)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估模型</span></span><br><span class="line">    mse = evaluate_model(model, X_test, y_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存模型</span></span><br><span class="line">    save_model(model, <span class="string">&#x27;lstm_gold_price_model.h5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试加载模型</span></span><br><span class="line">    loaded_model = load_model(<span class="string">&#x27;lstm_gold_price_model.h5&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240817013929552.png" alt="image-20240817013929552"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240817013948176.png" alt="image-20240817013948176"></p><p>预测的数值与真实值十分接近！</p><h3 id="接下来可以做什么？"><a href="#接下来可以做什么？" class="headerlink" title="接下来可以做什么？"></a>接下来可以做什么？</h3><ol><li><strong>进一步调优模型</strong>：如果模型的性能不如预期(实际上已经绝佳了)，可以考虑调整LSTM的层数、神经元数量、学习率、批次大小等超参数。</li><li><strong>尝试其他模型</strong>：除了LSTM，你还可以尝试其他模型（如GRU或卷积神经网络）来进一步提升预测效果。</li><li><strong>部署模型</strong>：如果你计划在实际应用中使用这个模型，可以考虑将其部署为API或集成到你的应用程序中。</li></ol><hr><p>让我们一步一步的来分析，首先，上面我们主要使用了主流的一种LSTM算法作为模型训练的方法，但是实际上还有许多其他的模型训练方法也是可以套用的，但是每种模型训练的方法对应的训练步数和超参数调优都是存在区别的，因此，我们是否可以设计一种策略，让机器自己决定使用哪种算法训练的模型，并比较出最佳精度的模型作为我们的目标模型？</p><h4 id="大致思路和步骤如下："><a href="#大致思路和步骤如下：" class="headerlink" title="大致思路和步骤如下："></a>大致思路和步骤如下：</h4><h3 id="1-自动模型选择与训练流程"><a href="#1-自动模型选择与训练流程" class="headerlink" title="1. 自动模型选择与训练流程"></a>1. <strong>自动模型选择与训练流程</strong></h3><p>将以下几个算法纳入选择范围：</p><ul><li><strong>LSTM</strong>（长短期记忆网络）</li><li><strong>GRU</strong>（门控循环单元）</li><li><strong>CNN</strong>（卷积神经网络）</li><li><strong>XGBoost</strong>（极端梯度提升）</li></ul><p>为了自动化模型选择与训练，可以使用 <code>GridSearchCV</code>（网格搜索）或 <code>RandomizedSearchCV</code>（随机搜索）来优化模型的超参数，包括选择不同的算法和训练步数。</p><h3 id="2-如何工作"><a href="#2-如何工作" class="headerlink" title="2. 如何工作"></a>2. <strong>如何工作</strong></h3><ol><li><strong>模型类型选择</strong>：可以在 <code>model_types</code> 列表中添加更多的模型类型，例如 <code>&#39;LSTM&#39;, &#39;GRU&#39;, &#39;CNN&#39;</code>。</li><li><strong>自动化模型训练和评估</strong>：<code>model_search</code> 函数将自动遍历给定的模型类型，训练每种模型，并通过在验证集上的表现来评估每种模型的性能。</li><li><strong>最佳模型保存</strong>：经过训练后，脚本会自动保存表现最好的模型。</li></ol><h4 id="脚本思路："><a href="#脚本思路：" class="headerlink" title="脚本思路："></a>脚本思路：</h4><h4 id="1-导入必要的库"><a href="#1-导入必要的库" class="headerlink" title="1. 导入必要的库"></a>1. <strong>导入必要的库</strong></h4><ul><li><strong>TensorFlow &amp; Keras</strong>：用于构建和训练深度学习模型，如 LSTM、GRU 和 CNN。</li><li><strong>Scikit-learn</strong>：用于传统机器学习模型（如随机森林、SVM、MLP）的构建和评估，以及模型评估指标的计算。</li><li><strong>XGBoost</strong>：用于构建和训练 XGBoost 模型，这是一个非常流行的基于决策树的集成算法。</li><li><strong>Matplotlib</strong>：用于绘制模型预测结果与真实值的对比图，以直观地展示模型性能。</li><li><strong>Numpy</strong>：用于数据处理，特别是对多维数组的操作。</li><li><strong>Data_solve 模块</strong>：导入数据预处理的主函数，该函数用于生成训练集、验证集和测试集。</li></ul><h4 id="2-配置-Matplotlib"><a href="#2-配置-Matplotlib" class="headerlink" title="2. 配置 Matplotlib"></a>2. <strong>配置 Matplotlib</strong></h4><p>为了确保在绘制图表时中文能够正常显示，配置了 Matplotlib 的字体设置。这一步是为了支持中文字符的正常显示，避免乱码问题。</p><h4 id="3-模型构建函数-build-model"><a href="#3-模型构建函数-build-model" class="headerlink" title="3. 模型构建函数 (build_model)"></a>3. <strong>模型构建函数 (build_model)</strong></h4><p>该函数用于构建并返回不同类型的模型，具体包括：</p><ul><li><strong>LSTM（长短期记忆网络）</strong></li><li><strong>GRU（门控循环单元）</strong></li><li><strong>CNN（卷积神经网络）</strong></li><li><strong>XGBoost（极端梯度提升）</strong></li><li><strong>RandomForest（随机森林）</strong></li><li><strong>SVM（支持向量机）</strong></li><li><strong>MLP（多层感知机）</strong></li></ul><p>对于神经网络模型，函数使用 Keras Sequential API 构建模型，并在最后一层输出 3 个时间步的预测。对于传统机器学习模型（如 XGBoost、RandomForest、SVM、MLP），则使用 Scikit-learn 或 XGBoost 库创建每个时间步的独立模型。</p><h4 id="4-模型评估函数-evaluate-model"><a href="#4-模型评估函数-evaluate-model" class="headerlink" title="4. 模型评估函数 (evaluate_model)"></a>4. <strong>模型评估函数 (evaluate_model)</strong></h4><p>该函数用于评估模型在测试集上的性能，并绘制预测值与真实值的对比图。具体步骤如下：</p><ul><li>对于神经网络模型，直接调用模型的 <code>predict</code> 方法获取预测值。</li><li>对于传统机器学习模型，先将输入数据展平成二维数组，然后分别预测每个时间步的值。</li><li>计算均方误差（MSE）作为模型性能的评估指标，并通过 Matplotlib 绘制每个时间步的预测值与真实值对比图。</li></ul><h4 id="5-模型搜索函数-model-search"><a href="#5-模型搜索函数-model-search" class="headerlink" title="5. 模型搜索函数 (model_search)"></a>5. <strong>模型搜索函数 (model_search)</strong></h4><p>该函数负责在多种模型类型之间进行搜索，找到最适合的模型。具体步骤包括：</p><ul><li>循环遍历每种模型类型（如 LSTM、GRU、CNN、XGBoost、RandomForest、SVM、MLP）。</li><li>为每种模型类型构建模型，并在训练集和验证集上进行训练（对于神经网络模型）或单独训练每个时间步的模型（对于传统机器学习模型）。</li><li>使用测试集对模型进行评估，记录每个模型的均方误差（MSE）。</li><li>最后，选择 MSE 最小的模型作为最佳模型，并保存模型类型和性能指标。</li></ul><h4 id="6-主函数"><a href="#6-主函数" class="headerlink" title="6. 主函数"></a>6. <strong>主函数</strong></h4><p>主函数执行以下步骤：</p><ul><li>调用数据预处理模块，生成训练集、验证集和测试集。</li><li>调用 <code>model_search</code> 函数，搜索并训练最佳模型。</li><li>将最佳模型保存为文件，以便后续加载和使用。</li></ul><h5 id="详细脚本实现："><a href="#详细脚本实现：" class="headerlink" title="详细脚本实现："></a>详细脚本实现：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPRegressor</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, ParameterGrid</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> LSTM, GRU, Conv1D, Dense, Dropout, Flatten</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> data_solve <span class="keyword">import</span> main <span class="keyword">as</span> data_preprocessing_main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Matplotlib使用中文字体，确保图表中的中文字符正常显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 使用黑体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 确保负号显示正常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_model</span>(<span class="params">model_type, input_shape=<span class="literal">None</span>, units=<span class="number">50</span>, dropout_rate=<span class="number">0.2</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    构建并编译模型或实例化机器学习算法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - model_type: 模型类型 (&#x27;LSTM&#x27;, &#x27;GRU&#x27;, &#x27;CNN&#x27;, &#x27;XGBoost&#x27;, &#x27;RandomForest&#x27;, &#x27;SVM&#x27;, &#x27;MLP&#x27;)</span></span><br><span class="line"><span class="string">    - input_shape: 输入数据的形状 (time_steps, num_features)，仅适用于神经网络</span></span><br><span class="line"><span class="string">    - units: 神经元数量，适用于神经网络</span></span><br><span class="line"><span class="string">    - dropout_rate: Dropout层的比例，用于防止过拟合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - 编译好的模型或实例化好的机器学习算法</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">        model = Sequential()</span><br><span class="line">        <span class="keyword">if</span> model_type == <span class="string">&#x27;LSTM&#x27;</span>:</span><br><span class="line">            model.add(LSTM(units=units, return_sequences=<span class="literal">True</span>, input_shape=input_shape))</span><br><span class="line">            model.add(Dropout(dropout_rate))</span><br><span class="line">            model.add(LSTM(units=units, return_sequences=<span class="literal">False</span>))</span><br><span class="line">        <span class="keyword">elif</span> model_type == <span class="string">&#x27;GRU&#x27;</span>:</span><br><span class="line">            model.add(GRU(units=units, return_sequences=<span class="literal">True</span>, input_shape=input_shape))</span><br><span class="line">            model.add(Dropout(dropout_rate))</span><br><span class="line">            model.add(GRU(units=units, return_sequences=<span class="literal">False</span>))</span><br><span class="line">        <span class="keyword">elif</span> model_type == <span class="string">&#x27;CNN&#x27;</span>:</span><br><span class="line">            model.add(Conv1D(filters=<span class="number">64</span>, kernel_size=<span class="number">2</span>, activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=input_shape))</span><br><span class="line">            model.add(Dropout(dropout_rate))</span><br><span class="line">            model.add(Flatten())</span><br><span class="line">        model.add(Dropout(dropout_rate))</span><br><span class="line">        model.add(Dense(units=<span class="number">3</span>))  <span class="comment"># 输出3个时间步的预测</span></span><br><span class="line">        model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mean_squared_error&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> model</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;XGBoost&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [XGBRegressor(objective=<span class="string">&#x27;reg:squarederror&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;RandomForest&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [RandomForestRegressor(n_estimators=<span class="number">100</span>, random_state=<span class="number">42</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;SVM&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [SVR(kernel=<span class="string">&#x27;rbf&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">elif</span> model_type == <span class="string">&#x27;MLP&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> [MLPRegressor(hidden_layer_sizes=(units, units), max_iter=<span class="number">500</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;未知的模型类型: <span class="subst">&#123;model_type&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate_model</span>(<span class="params">model, X_test, y_test, model_type</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    评估模型在测试集上的表现，并绘制预测值与真实值的对比图。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - model: 训练好的模型</span></span><br><span class="line"><span class="string">    - X_test, y_test: 测试数据及其标签</span></span><br><span class="line"><span class="string">    - model_type: 模型类型，决定如何处理数据输入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - 测试集上的均方误差 (MSE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">        predictions = model.predict(X_test)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        X_test_flat = X_test.reshape(X_test.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">        predictions = np.zeros(y_test.shape)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            predictions[:, i] = model[i].predict(X_test_flat)</span><br><span class="line"></span><br><span class="line">    mse = mean_squared_error(y_test, predictions)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;测试集上的均方误差: <span class="subst">&#123;mse&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(predictions.shape[<span class="number">1</span>]):  <span class="comment"># 针对每个时间步绘制预测和真实值的对比图</span></span><br><span class="line">        plt.plot(y_test[:, i], label=<span class="string">f&#x27;真实值 - 时间步 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">        plt.plot(predictions[:, i], label=<span class="string">f&#x27;预测值 - 时间步 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">f&#x27;金价预测 vs 真实值 (<span class="subst">&#123;model_type&#125;</span>)&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;时间步&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;金价&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">model_search</span>(<span class="params">X_train, y_train, X_val, y_val, X_test, y_test,</span></span><br><span class="line"><span class="params">                 model_types=[<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>, <span class="string">&#x27;XGBoost&#x27;</span>, <span class="string">&#x27;RandomForest&#x27;</span>, <span class="string">&#x27;SVM&#x27;</span>, <span class="string">&#x27;MLP&#x27;</span>], epochs=<span class="number">50</span>, batch_size=<span class="number">32</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    搜索最佳模型类型、训练步数，并评估模型性能。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - X_train, y_train: 训练数据及其标签</span></span><br><span class="line"><span class="string">    - X_val, y_val: 验证数据及其标签</span></span><br><span class="line"><span class="string">    - X_test, y_test: 测试数据及其标签</span></span><br><span class="line"><span class="string">    - model_types: 模型类型列表 ([&#x27;LSTM&#x27;, &#x27;GRU&#x27;, &#x27;CNN&#x27;, &#x27;XGBoost&#x27;, &#x27;RandomForest&#x27;, &#x27;SVM&#x27;, &#x27;MLP&#x27;])</span></span><br><span class="line"><span class="string">    - epochs: 最大训练轮次</span></span><br><span class="line"><span class="string">    - batch_size: 批次大小</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - 最佳模型类型和性能</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    best_model = <span class="literal">None</span></span><br><span class="line">    best_mse = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    best_model_type = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> model_type <span class="keyword">in</span> model_types:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练模型: <span class="subst">&#123;model_type&#125;</span>&quot;</span>)</span><br><span class="line">        model = build_model(model_type, input_shape=(X_train.shape[<span class="number">1</span>], X_train.shape[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">            model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=epochs, batch_size=batch_size, verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X_train_flat = X_train.reshape(X_train.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">            X_val_flat = X_val.reshape(X_val.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  <span class="comment"># 训练每个时间步的模型</span></span><br><span class="line">                model[i].fit(X_train_flat, y_train[:, i])</span><br><span class="line"></span><br><span class="line">        mse = evaluate_model(model, X_test, y_test, model_type)</span><br><span class="line">        <span class="keyword">if</span> mse &lt; best_mse:</span><br><span class="line">            best_mse = mse</span><br><span class="line">            best_model = model</span><br><span class="line">            best_model_type = model_type</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;最佳模型类型: <span class="subst">&#123;best_model_type&#125;</span>，测试集MSE: <span class="subst">&#123;best_mse&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> best_model, best_model_type, best_mse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 生成数据 (你可以根据你的情况替换为实际的数据生成过程)</span></span><br><span class="line">    <span class="comment"># 数据生成部分需要根据你具体的数据情况进行替换</span></span><br><span class="line">    X_train, X_val, X_test, y_train, y_val, y_test = data_preprocessing_main(</span><br><span class="line">        file_path=<span class="string">&#x27;gold_price_data_extracted.csv&#x27;</span>,</span><br><span class="line">        window_size=<span class="number">10</span>,</span><br><span class="line">        prediction_horizon=<span class="number">3</span>,</span><br><span class="line">        normalization_method=<span class="string">&#x27;minmax&#x27;</span>,</span><br><span class="line">        train_size=<span class="number">0.7</span>,</span><br><span class="line">        validation_size=<span class="number">0.1</span>,</span><br><span class="line">        drop_columns=[<span class="string">&#x27;Adj&#x27;</span>, <span class="string">&#x27;Volume&#x27;</span>],</span><br><span class="line">        indicators=[<span class="string">&#x27;MA&#x27;</span>, <span class="string">&#x27;RSI&#x27;</span>, <span class="string">&#x27;MACD&#x27;</span>, <span class="string">&#x27;Bollinger&#x27;</span>, <span class="string">&#x27;ATR&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行模型搜索</span></span><br><span class="line">    best_model, best_model_type, best_mse = model_search(X_train, y_train, X_val, y_val, X_test, y_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存最佳模型</span></span><br><span class="line">    <span class="keyword">if</span> best_model_type <span class="keyword">in</span> [<span class="string">&#x27;LSTM&#x27;</span>, <span class="string">&#x27;GRU&#x27;</span>, <span class="string">&#x27;CNN&#x27;</span>]:</span><br><span class="line">        best_model.save(<span class="string">f&#x27;best_model_<span class="subst">&#123;best_model_type&#125;</span>.h5&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;最佳模型 <span class="subst">&#123;best_model_type&#125;</span> 已保存。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240817020926885.png" alt="image-20240817020926885"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240817020936673.png" alt="image-20240817020936673"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240817020948233.png" alt="image-20240817020948233"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240817020954407.png" alt="image-20240817020954407"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240817021001994.png" alt="image-20240817021001994"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240817021010536.png" alt="image-20240817021010536"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240817021018299.png" alt="image-20240817021018299"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/QQ_1723831837271.png" alt="QQ_1723831837271"></p><p>最佳模型LSTM保存！</p><hr><p>事实上还有一种做法也是常见的，那就是打造一个混合模型，即对每一个模型在进行验证时，截取最优的部分，将这些模型最优的部分相互比较，拼接出一个全新的，优于所有模型算法所得到的模型，这将在下期进行实现。</p><h2 id="下期预告："><a href="#下期预告：" class="headerlink" title="下期预告："></a>下期预告：</h2><ol><li>如何实现多算法结合的混合模型？</li><li>将得到的最佳模型进行部署和实战检验</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当前步骤的主要任务目标是&lt;strong&gt;数据集划分&lt;/strong&gt;，其目的是将经过预处理和特征工程生成的数据划分为不同的子集，以便于模型的训练、验证和测试，进一步进行模型设计与训练。具体目标如下：&lt;/p&gt;
&lt;h3 id=&quot;1-生成适合时间序列模型的特征和标签&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="从零开始训练一个神经网络" scheme="http://nikolahuang.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>从零开始训练一个神经网络之一：环境的搭建和准备</title>
    <link href="http://nikolahuang.github.io/2024/08/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E4%B8%80%EF%BC%9A%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E5%87%86%E5%A4%87/"/>
    <id>http://nikolahuang.github.io/2024/08/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E4%B8%80%EF%BC%9A%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E5%87%86%E5%A4%87/</id>
    <published>2024-08-12T17:08:51.000Z</published>
    <updated>2024-08-13T13:34:22.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="conda环境安装配置"><a href="#conda环境安装配置" class="headerlink" title="conda环境安装配置"></a>conda环境安装配置</h1><p>如果不使用图形化界面可以安装 miniconda ,要使用图形化UI界面可以安装完整的<strong>Anaconda</strong></p><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><ul><li>官网地址下载</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://repo.anaconda.com/archive/Anaconda3-2024.06-1-Windows-x86_64.exe</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/QQ_1723552838073.png" alt="QQ_1723552838073"></p><ul><li>清华镜像下载</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/32133_0xg9_5051.png" alt="img"></p><h2 id="安装如果完成，确认一下安装是否成功。-conda-–version"><a href="#安装如果完成，确认一下安装是否成功。-conda-–version" class="headerlink" title="安装如果完成，确认一下安装是否成功。 conda –version"></a>安装如果完成，确认一下安装是否成功。 conda –version</h2><ul><li>如果能显示版本说明已经正确安装</li></ul><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/32430_uahw_7479.png" alt="img"></p><ul><li><p>如果提示没有conda（手动配置一下环境变量）</p><p>按照这样配置miniconda到环境变量 D:\pinokio\bin\miniconda\condabin</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/32708_bs9z_5057.png" alt="img"><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/32755_1msr_3398.png" alt="img"></p><p>我这里项目里面有miniconda ，我就不重复安装了，直接配置一下环境变量就能使用。</p></li></ul><h1 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用conda创建虚拟环境、激活当前环境、安装项目依赖：</span></span><br><span class="line">conda create --prefix venv python=3.10</span><br><span class="line">conda activate .\venv</span><br><span class="line">pip install torch torchvision torchaudio xformers --index-url https://download.pytorch.org/whl/cu121</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭虚拟环境</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">升级依赖包</span></span><br><span class="line">pip install --upgrade xxxxx  (如：pip install --upgrade openai)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制重新安装</span></span><br><span class="line">pip install --force-reinstall xxxxx (如：pip install --force-reinstall httpx==0.13.3 openai)</span><br></pre></td></tr></table></figure><p>测试cuda、torch是否生效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/33286_jbqt_5530.png" alt="img"></p><p>进入Python环境执行以上三行代码就能测试cuda、torch是否生效，Ctrl + Z 可以返回到环境虚拟环境。</p><h1 id="关于Windows系统使用torch总结"><a href="#关于Windows系统使用torch总结" class="headerlink" title="关于Windows系统使用torch总结"></a>关于Windows系统使用torch总结</h1><p>我发现项目中的依赖写的不够清晰，比如这个<img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/33549_gz79_6639.png" alt="img"></p><p>安装的时候，系统默认会安装CPU版本的，所以会找不到Cuda，环境安装会失败。</p><p>一般情况我们不要去修改项目的requirements.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 安装全部依赖  pip install -r requirements.txt 后，先试cuda是否生效，不生效卸载，按照下面的方式安装</span><br></pre></td></tr></table></figure><h2 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h2><p><a href="https://download.pytorch.org/whl/cu118">https://download.pytorch.org/whl/cu118</a></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/34035_0zce_1263.png" alt="img"></p><p>从这里下载我们期望安装的版本，注意这个版本要和你们的Python版本一致才行。</p><p>这里我推荐Windows用户使用Python3.10、CU118的组合。因为有的项目会使用 triton ，这个东西这里只有linux版本的，没有Windows版本，这个自己编译也很容易出错（也可能是我太菜，编译了好多次都没成功）。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/34245_jm5l_9321.png" alt="img"></p><p>从网上找到一个编译好的，使用的Python3.10可以使用。这个分享给大家。</p><p><a href="https://www.hackyin.com/data/file/2024/02/17/34450_9iks_7793.whl"><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/unknown.svg" alt="unknown.svg">triton-2.0.0-cp310-cp310-win_amd64.whl</a></p><p>依赖安装使用pip install XXXX 一般会安装新版本的，很有可能和我们的torch版本不匹配，有一个办法可以让它自动选择一样的版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda activate ./venv</span><br><span class="line">pip uninstall torch torchaudio torchvision xformers</span><br><span class="line">pip install G:\Python环境torch2.0.0\torch-2.0.0+cu118-cp310-cp310-win_amd64.whl torchaudio torchvision xformers</span><br></pre></td></tr></table></figure><p>这里我把torch-2.0.0+cu118-cp310-cp310-win_amd64.whl下载到本地来安装。</p><p>激活虚拟环境，先卸载可能不匹配的依赖项，我常遇到这几个 torch torchaudio torchvision xformers </p><p>先全部卸载，限制会有提示，直接输入 y ，安装的时候，前面指定了torch-2.0.0+cu118-cp310-cp310-win_amd64.whl ，后面跟着torchaudio torchvision xformers，就会自动安装合适的版本了。</p><p>全部安装完毕后，在测试一下cuda、torch是否生效。这样一通操作做可以解决项目环境的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;conda环境安装配置&quot;&gt;&lt;a href=&quot;#conda环境安装配置&quot; class=&quot;headerlink&quot; title=&quot;conda环境安装配置&quot;&gt;&lt;/a&gt;conda环境安装配置&lt;/h1&gt;&lt;p&gt;如果不使用图形化界面可以安装 miniconda ,要使用图形化UI</summary>
      
    
    
    
    
    <category term="从零开始训练一个神经网络" scheme="http://nikolahuang.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>从零开始训练一个神经网络之数据收集和准备</title>
    <link href="http://nikolahuang.github.io/2024/08/10/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E4%BA%8C%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%92%8C%E5%87%86%E5%A4%87/"/>
    <id>http://nikolahuang.github.io/2024/08/10/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E4%BA%8C%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%92%8C%E5%87%86%E5%A4%87/</id>
    <published>2024-08-09T16:52:44.000Z</published>
    <updated>2024-08-13T15:53:19.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="任务目标：金价数据的收集、预处理和准备"><a href="#任务目标：金价数据的收集、预处理和准备" class="headerlink" title="任务目标：金价数据的收集、预处理和准备"></a><strong>任务目标：金价数据的收集、预处理和准备</strong></h1><hr><h3 id="1-数据收集"><a href="#1-数据收集" class="headerlink" title="1. 数据收集"></a>1. <strong>数据收集</strong></h3><p>1）使用<code>yfinance</code>库来获取历史金价数据。<code>yfinance</code> 是一个方便的库，可以从Yahoo Finance下载金融市场数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取金价的历史数据，代码为 &#x27;GC=F&#x27; (Gold Futures)</span></span><br><span class="line">gold_data = yf.download(<span class="string">&#x27;GC=F&#x27;</span>, start=<span class="string">&#x27;2010-01-01&#x27;</span>, end=<span class="string">&#x27;2023-12-31&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line"><span class="built_in">print</span>(gold_data.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据到本地文件</span></span><br><span class="line">gold_data.to_csv(<span class="string">&#x27;gold_price_data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据已成功收集并保存为 gold_price_data.csv 文件。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/QQ_1723556751605.png" alt="QQ_1723556751605"></p><p>似乎出现了一些问题…</p><p>从错误信息来看，<code>yfinance</code>在尝试获取<code>GC=F</code>（Gold Futures，黄金期货）数据时遇到了连接超时的错误，并且下载失败了。这个问题可能是由网络连接问题或Yahoo Finance服务器的暂时性问题引起的。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><strong>检查网络连接</strong>: 确保网络连接正常，尤其是在尝试访问外部API时。你可以尝试在不同的网络环境下再次运行代码。(我是OK的~)</li><li><strong>尝试其他数据源</strong>: 如果<code>yfinance</code>一直无法正常工作，考虑使用其他数据源，比如Quandl，或者直接从金融数据网站下载数据。(这个换赛道其实也行，但是不解决当前问题内心当然会OB~)</li><li><strong>增加超时时间</strong>: 可以尝试增加<code>yfinance</code>请求的超时时间，以防止连接超时问题。虽然这是一个临时解决方案，但有时可能有用。</li><li><strong>直接从其他站点下载</strong>: 如果问题持续，那就简单粗暴一点，直接手动从一些网站（如Yahoo Finance：<a href="https://finance.yahoo.com/quote/GOGL/%EF%BC%89%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E4%BF%9D%E5%AD%98%E4%B8%BACSV%E6%96%87%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E7%BB%A7%E7%BB%AD%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%AD%A5%E9%AA%A4%EF%BC%8C%E6%AC%B8%E5%98%BF%EF%BC%8C%E4%B8%BB%E6%89%93%E4%B8%80%E4%B8%AA%E5%BC%AF%E9%81%93%E7%9B%B4%E8%BE%BE">https://finance.yahoo.com/quote/GOGL/）直接下载数据，并将其保存为CSV文件，然后继续数据预处理步骤，欸嘿，主打一个弯道直达</a>~</li></ol><p>首先，尝试使用以下代码增加超时时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置超时时间为60秒</span></span><br><span class="line">gold_data = yf.download(<span class="string">&#x27;GC=F&#x27;</span>, start=<span class="string">&#x27;2010-01-01&#x27;</span>, end=<span class="string">&#x27;2023-12-31&#x27;</span>, timeout=<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查数据是否为空</span></span><br><span class="line"><span class="keyword">if</span> gold_data.empty:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未能成功获取数据。请检查网络连接或尝试其他数据源。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 保存数据到本地文件</span></span><br><span class="line">    gold_data.to_csv(<span class="string">&#x27;gold_price_data.csv&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据已成功收集并保存为 gold_price_data.csv 文件。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果还是不行，那就试试简单粗暴的办法吧：</p><h3 id="替代方法-1-手动下载数据"><a href="#替代方法-1-手动下载数据" class="headerlink" title="替代方法 1: 手动下载数据"></a>替代方法 1: 手动下载数据</h3><ol><li><p><strong>访问Yahoo Finance</strong>:</p><p>打开 <a href="https://finance.yahoo.com/">Yahoo Finance</a>。</p><p>搜索“Gold Futures”或直接搜索<code>GC=F</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/QQ_1723558894800.png" alt="QQ_1723558894800"></p><p>在页面中找到历史数据，选择你需要的时间范围（比如2010年至今），然后下载为CSV文件。</p><p>(找了半天没看到有download按键，而且网页还增加了反爬虫技术，tnnd<del>，那就直接把整个网页保存下来进行解析</del>简单粗暴)</p><p>保存网页：</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/QQ_1723560528665.png" alt="QQ_1723560528665"></p><p>在网页空白处右键选择“另存为”</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/QQ_1723560562289.png" alt="QQ_1723560562289"></p><p>保存为html文件后；</p><p>开始解析文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取保存的HTML文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/mnt/data/Micro Gold Futures,Dec-2024 (MGC=F) Stock Historical Prices &amp; Data - Yahoo Finance.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    soup = BeautifulSoup(file, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试查找包含历史数据的表格</span></span><br><span class="line">table = soup.find(<span class="string">&#x27;table&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> table <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到数据表格，请检查HTML文件的结构。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 如果找到了表格，继续提取数据</span></span><br><span class="line">    headers = []</span><br><span class="line">    <span class="keyword">if</span> table.find(<span class="string">&#x27;thead&#x27;</span>):</span><br><span class="line">        headers = [th.text.strip() <span class="keyword">for</span> th <span class="keyword">in</span> table.find(<span class="string">&#x27;thead&#x27;</span>).find_all(<span class="string">&#x27;th&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    rows = []</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> table.find(<span class="string">&#x27;tbody&#x27;</span>).find_all(<span class="string">&#x27;tr&#x27;</span>):</span><br><span class="line">        cells = [td.text.strip() <span class="keyword">for</span> td <span class="keyword">in</span> tr.find_all(<span class="string">&#x27;td&#x27;</span>)]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cells) &gt; <span class="number">1</span>:  <span class="comment"># 过滤掉空行</span></span><br><span class="line">            rows.append(cells)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查是否成功提取数据</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> headers <span class="keyword">or</span> <span class="keyword">not</span> rows:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未能提取到任何数据，请检查表格内容。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 将数据转换为DataFrame</span></span><br><span class="line">        gold_data = pd.DataFrame(rows, columns=headers)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存为CSV文件</span></span><br><span class="line">        gold_data.to_csv(<span class="string">&#x27;gold_price_data_extracted.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;数据已成功提取并保存为 gold_price_data_extracted.csv 文件。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/QQ_1723561257616.png" alt="QQ_1723561257616"></p><p>数据提取完成！</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/QQ_1723561309162.png" alt="QQ_1723561309162"></p><h3 id="2-数据预处理"><a href="#2-数据预处理" class="headerlink" title="2. 数据预处理"></a>2. <strong>数据预处理</strong></h3><p>数据收集完毕后，我们需要对数据进行一些预处理。</p><h3 id="1-数据检查和清洗"><a href="#1-数据检查和清洗" class="headerlink" title="1.数据检查和清洗"></a>1.<strong>数据检查和清洗</strong></h3><ul><li><strong>检查数据格式</strong>：确保日期列是<code>datetime</code>类型，价格数据是数值类型。</li><li><strong>处理缺失值</strong>：检查并处理任何缺失数据。</li><li><strong>删除无关列</strong>：如果有无关的列（如“交易量”等），可以选择删除。</li></ul><h3 id="2-特征工程"><a href="#2-特征工程" class="headerlink" title="2. 特征工程"></a>2. <strong>特征工程</strong></h3><ul><li><strong>生成技术指标</strong>：添加一些常用的技术指标（如移动平均线、相对强弱指数RSI、MACD等）。</li><li><strong>生成目标变量</strong>：创建模型的目标变量，即未来三天的金价变化。</li></ul><h3 id="3-数据标准化-归一化"><a href="#3-数据标准化-归一化" class="headerlink" title="3. 数据标准化&#x2F;归一化"></a>3. <strong>数据标准化&#x2F;归一化</strong></h3><ul><li>对特征进行标准化或归一化处理，以提高模型训练的效果。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取从网页提取并保存的CSV文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载并初步检查数据。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = pd.read_csv(file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;原始数据预览:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.head())</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理数据列名并处理数据类型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_data</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    清理列名，处理数据类型，并移除多余字符。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 清理列名：去除列名中的多余空白和说明</span></span><br><span class="line">    data.columns = data.columns.<span class="built_in">str</span>.strip().<span class="built_in">str</span>.split().<span class="built_in">str</span>[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将日期列转换为datetime类型</span></span><br><span class="line">    data[<span class="string">&#x27;Date&#x27;</span>] = pd.to_datetime(data[<span class="string">&#x27;Date&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将&#x27;Close&#x27;, &#x27;High&#x27;, &#x27;Low&#x27;列中的字符串转换为浮点数，先移除逗号</span></span><br><span class="line">    data[<span class="string">&#x27;Close&#x27;</span>] = data[<span class="string">&#x27;Close&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>).astype(<span class="built_in">float</span>)</span><br><span class="line">    data[<span class="string">&#x27;High&#x27;</span>] = data[<span class="string">&#x27;High&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>).astype(<span class="built_in">float</span>)</span><br><span class="line">    data[<span class="string">&#x27;Low&#x27;</span>] = data[<span class="string">&#x27;Low&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>).astype(<span class="built_in">float</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 按日期升序排序</span></span><br><span class="line">    data = data.sort_values(<span class="string">&#x27;Date&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查数据缺失情况</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n数据缺失值统计:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.isnull().<span class="built_in">sum</span>())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 移除缺失值</span></span><br><span class="line">    data = data.dropna()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征工程：生成技术指标</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_features</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成多种技术指标，包括移动平均线、RSI、MACD、布林带、ATR等。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 移动平均线 (MA)</span></span><br><span class="line">    data[<span class="string">&#x27;MA_5&#x27;</span>] = data[<span class="string">&#x27;Close&#x27;</span>].rolling(window=<span class="number">5</span>).mean()</span><br><span class="line">    data[<span class="string">&#x27;MA_10&#x27;</span>] = data[<span class="string">&#x27;Close&#x27;</span>].rolling(window=<span class="number">10</span>).mean()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 相对强弱指数 (RSI)</span></span><br><span class="line">    data[<span class="string">&#x27;RSI_14&#x27;</span>] = compute_RSI(data[<span class="string">&#x27;Close&#x27;</span>], window=<span class="number">14</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># MACD (移动平均收敛散度指标)</span></span><br><span class="line">    short_ema = data[<span class="string">&#x27;Close&#x27;</span>].ewm(span=<span class="number">12</span>, adjust=<span class="literal">False</span>).mean()  <span class="comment"># 12日指数移动平均线</span></span><br><span class="line">    long_ema = data[<span class="string">&#x27;Close&#x27;</span>].ewm(span=<span class="number">26</span>, adjust=<span class="literal">False</span>).mean()   <span class="comment"># 26日指数移动平均线</span></span><br><span class="line">    data[<span class="string">&#x27;MACD&#x27;</span>] = short_ema - long_ema</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 布林带 (Bollinger Bands)</span></span><br><span class="line">    data[<span class="string">&#x27;BB_upper&#x27;</span>], data[<span class="string">&#x27;BB_lower&#x27;</span>] = compute_bollinger_bands(data[<span class="string">&#x27;Close&#x27;</span>], window=<span class="number">20</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 平均真实波动幅度 (ATR)</span></span><br><span class="line">    data[<span class="string">&#x27;ATR&#x27;</span>] = compute_atr(data, window=<span class="number">14</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 移除因滚动计算产生的NaN值</span></span><br><span class="line">    data = data.dropna()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目标变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_target</span>(<span class="params">data, forward_days=<span class="number">3</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成目标变量，预测未来指定天数的收盘价变化。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data[<span class="string">&#x27;Target&#x27;</span>] = data[<span class="string">&#x27;Close&#x27;</span>].shift(-forward_days) - data[<span class="string">&#x27;Close&#x27;</span>]</span><br><span class="line">    data = data.dropna()  <span class="comment"># 移除最后几行因缺失目标而产生的NaN值</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相对强弱指数 (RSI)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_RSI</span>(<span class="params">series, window=<span class="number">14</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算相对强弱指数 (RSI)。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    diff = series.diff(<span class="number">1</span>).dropna()</span><br><span class="line">    gain = <span class="number">0.5</span> * (diff + <span class="built_in">abs</span>(diff))</span><br><span class="line">    loss = <span class="number">0.5</span> * (diff - <span class="built_in">abs</span>(diff))</span><br><span class="line">    avg_gain = gain.rolling(window=window, min_periods=<span class="number">1</span>).mean()</span><br><span class="line">    avg_loss = <span class="built_in">abs</span>(loss.rolling(window=window, min_periods=<span class="number">1</span>).mean())</span><br><span class="line">    rs = avg_gain / avg_loss</span><br><span class="line">    rsi = <span class="number">100</span> - (<span class="number">100</span> / (<span class="number">1</span> + rs))</span><br><span class="line">    <span class="keyword">return</span> rsi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算布林带 (Bollinger Bands)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_bollinger_bands</span>(<span class="params">series, window=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算布林带的上下轨道。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sma = series.rolling(window=window).mean()</span><br><span class="line">    std = series.rolling(window=window).std()</span><br><span class="line">    upper_band = sma + (std * <span class="number">2</span>)</span><br><span class="line">    lower_band = sma - (std * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> upper_band, lower_band</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算平均真实波动幅度 (ATR)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_atr</span>(<span class="params">data, window=<span class="number">14</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算平均真实波动幅度 (ATR)。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    high_low = data[<span class="string">&#x27;High&#x27;</span>] - data[<span class="string">&#x27;Low&#x27;</span>]</span><br><span class="line">    high_close = np.<span class="built_in">abs</span>(data[<span class="string">&#x27;High&#x27;</span>] - data[<span class="string">&#x27;Close&#x27;</span>].shift())</span><br><span class="line">    low_close = np.<span class="built_in">abs</span>(data[<span class="string">&#x27;Low&#x27;</span>] - data[<span class="string">&#x27;Close&#x27;</span>].shift())</span><br><span class="line">    tr = high_low.combine(high_close, <span class="built_in">max</span>).combine(low_close, <span class="built_in">max</span>)</span><br><span class="line">    atr = tr.rolling(window=window, min_periods=<span class="number">1</span>).mean()</span><br><span class="line">    <span class="keyword">return</span> atr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据到CSV文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_data</span>(<span class="params">data, file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    保存处理后的数据到指定的CSV文件。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data.to_csv(file_path, index=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n数据预处理完成并保存为 <span class="subst">&#123;file_path&#125;</span> 文件。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主流程</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 1. 加载数据</span></span><br><span class="line">    gold_data = load_data(<span class="string">&#x27;gold_price_data_extracted.csv&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 清理数据</span></span><br><span class="line">    gold_data = clean_data(gold_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 生成技术指标</span></span><br><span class="line">    gold_data = generate_features(gold_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 创建目标变量</span></span><br><span class="line">    gold_data = create_target(gold_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 5. 保存处理好的数据</span></span><br><span class="line">    save_data(gold_data, <span class="string">&#x27;processed_gold_data.csv&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功数据净化：</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/QQ_1723563959842.png" alt="QQ_1723563959842" style="zoom:50%;"><hr><p>下期预告：</p><h3 id="下一步：模型设计与训练"><a href="#下一步：模型设计与训练" class="headerlink" title="下一步：模型设计与训练"></a>下一步：模型设计与训练</h3><p>我们将从以下几个方面着手：</p><ol><li><strong>数据集划分</strong>：将数据分为训练集和测试集。</li><li><strong>模型选择</strong>：设计一个合适的深度学习模型（例如LSTM或GRU）来处理时间序列数据。</li><li><strong>模型训练</strong>：使用训练集对模型进行训练，并使用验证集进行超参数调优。</li><li><strong>模型评估</strong>：在测试集上评估模型的性能，使用指标如均方误差（MSE）等。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;任务目标：金价数据的收集、预处理和准备&quot;&gt;&lt;a href=&quot;#任务目标：金价数据的收集、预处理和准备&quot; class=&quot;headerlink&quot; title=&quot;任务目标：金价数据的收集、预处理和准备&quot;&gt;&lt;/a&gt;&lt;strong&gt;任务目标：金价数据的收集、预处理和准备&lt;/</summary>
      
    
    
    
    
    <category term="从零开始训练一个神经网络" scheme="http://nikolahuang.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>噬菌体进化概述</title>
    <link href="http://nikolahuang.github.io/2024/07/04/%E5%99%AC%E8%8F%8C%E4%BD%93%E8%BF%9B%E5%8C%96%E6%A6%82%E8%BF%B0/"/>
    <id>http://nikolahuang.github.io/2024/07/04/%E5%99%AC%E8%8F%8C%E4%BD%93%E8%BF%9B%E5%8C%96%E6%A6%82%E8%BF%B0/</id>
    <published>2024-07-04T12:49:03.000Z</published>
    <updated>2024-07-04T12:49:04.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>单碱基编辑系统</title>
    <link href="http://nikolahuang.github.io/2024/06/11/%E5%8D%95%E7%A2%B1%E5%9F%BA%E7%BC%96%E8%BE%91%E7%B3%BB%E7%BB%9F/"/>
    <id>http://nikolahuang.github.io/2024/06/11/%E5%8D%95%E7%A2%B1%E5%9F%BA%E7%BC%96%E8%BE%91%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-06-10T16:41:18.000Z</published>
    <updated>2024-06-10T16:52:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>全球有超过50000种人类相关的遗传疾病，其中大部分是由基因组的点突变引起的。而对于罕见病而言，80%是由基因缺陷引起的，同时这些基因缺陷中点突变又占了60%。比如多发性神经纤维瘤（Neurofibromatosis）则是由 Neurofibromin 1&#x2F;2基因发生碱基突变引起的。由此可以看出，对基因组点突变的研究不仅能揭示一些重要的生物学原理，更有利于人类疾病治疗手段的研发。</p><p>CRISPR-Cas系统被誉为基因组编辑的魔术手术刀，特别是基于CRISPR-Cas系统和细胞同源重组修复机制（HDR）的基因编辑技术，在基因点突变遗传病方向展现出巨大的应用潜力。但是存在同源重组效率不高、更容易启动非同源重组机制产生不可预知的突变类型等问题，使得需要开发一种更为简便、高效和精准的技术。而单碱基编辑系统便是在这样背景下被开发出来的。</p><p><strong>单碱基编辑系统包括胞嘧啶碱基编辑器（CBE）、腺嘌呤碱基编辑器（ABE）、鸟嘌呤编辑器（GBE）和先导编辑器（Prime Editor）。这些编辑器不会产生DNA双链断裂缺口（DSB），因此不会触发细胞的DNA双链修复机制。下面分别介绍上述四种编辑器。</strong></p><p><strong>胞嘧啶编辑器</strong></p><p>胞嘧啶编辑器（CBE）在CRISPR&#x2F;Cas系统的基础上被开发出来，包含sgRNA和融合蛋白两个部分。将Cas核酸酶的RucC和HNH两个功能域突变，产生突变型的dCas（dead Cas）或nCas（nickase nCas），然后将突变型Cas、胞嘧啶脱氨酶和尿嘧啶糖基化酶抑制子融合形成融合蛋白。胞嘧啶编辑器的工作原理是在sgRNA引导下，融合蛋白到特定的基因组位置上，然后胞嘧啶脱氨酶将C转变为U，然后U在DNA复制的过程中再转变为T（图1）。在这个过程中，尿嘧啶糖基化酶抑制子的作用是抑制中间体U的切除，提高T的转换率[1]。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/%25E5%259B%25BE1._CBE%25E7%259A%2584%25E5%25B7%25A5%25E4%25BD%259C%25E5%258E%259F%25E7%2590%2586.webp.jpg" alt="图1. CBE的工作原理"></p><p>​                                                                      图1. CBE的工作原理[1]</p><p>在第一代的胞嘧啶编辑器CBE1（rAPOBEC1-XTEN-dCas）中，融合蛋白由来源于大鼠的rAPOBEC1（大鼠胞嘧啶脱氨酶）和dCas组成[1]。其编辑活性窗口约为5个碱基，靶位点为第4－8位碱基。CBE1在体外具有较高的编辑效率，但是在哺乳动物体内的编辑效率则十分低下。经过研究人员的分析，这是可能由于DNA糖基化酶（Uracil DNA glycosylase, UDG）识别中间体UG，并通过碱基切除修复途径（BER）重新修复成CG。因此，抑制碱基切除修复途径能提高胞嘧啶编辑器的编辑效率。然后研究者们在rAPOBEC1-XTEN-dCas基础上将尿嘧啶DNA糖基化酶（UGI）也融合其中，研发出第二代胞嘧啶编辑器CBE2（rAPOBEC1-XTEN-dCas－UGI）[1]。CBE2展现出较高的编辑效率，最高可达到20%，比BE1高3倍。在实践的过程，由于CBE1与CBE2不会产生DSB，因此在基因组中发生非目标碱基插入、缺失和替换的概率极低。</p><p>但研究者们依然希望提高编辑效率，于是将dCas替换成nCas（Cas nickase nCas D10A），构建出第三代胞嘧啶编辑器CBE3（rAPOBEC-XTEN-nCas（D10A）-UGI）[1]。nCas具有切割非编辑DNA链（G所在的DNA链）的活性，能形成DNA单链缺口。然后细胞会启动碱基错配修复途径（MMR），以编辑链（含有编辑后U的DNA链）为模板进行修复（图2）。CBE3具有极高的编辑效率，比CBE2高2－6倍，但是CBE3除了能将C转变成T以外，还可能将C转变为G或A，并且还可能触发非同源修复机制（NHEJ）产生Indel。</p><p>为了进一步提高编辑效率，研发者在CBE3的基础上融合了第二个拷贝的UGI，同时优化rAPOBEC1、nCas和UGI之间的接头长度，构建出第四代胞嘧啶编辑器CBE4（rAPOBEC-XTEN-nCas（D10A）-2UGI）[2]。与CBE3相比，CBE4使得C到G和C到A基因编辑产物减少了2.3倍。并且在CBE4的基础上通过融合来源于噬菌体Mu的Gam蛋白或增加不同数量的核定位信号（NLS）以及使用不同公司优化的密码子序列等方法，降低NHEJ修复途径的发生，提高编辑效率。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/%25E5%259B%25BE2._CBE%25E7%259A%2584%25E5%258D%2587%25E7%25BA%25A7.webp.jpg" alt="图2. CBE的升级"></p><p>​                                                                                 图2. CBE的升级[1]</p><p><strong>腺嘌呤编辑器</strong></p><p>腺嘌呤编辑器（ABE）与CBE类似，ABE的融合蛋白由nCas（D10A）和人为改造的腺嘌呤脱氨酶组成，且无需抑制烷基腺嘌呤DNA糖基化酶（AAG）的活性，就这样构建出ABE7.10（ecTadA-ecTadA*-nCas）[3]。其工作原理是在sgRNA的引导下，融合蛋白结合到靶序列区，并将一定区域的腺嘌呤（A）脱氨形成肌酐（I），然后I再转变成G，实现A到G的转换（图3）。为了进一步提高ABE的编辑效率，研究者于是在ABE7.10的基础上融合了NLS以及使用不同公司优化的密码子序列等方法，提高了A到G的转换效率[4]。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/%25E5%259B%25BE3.__ABE%25E7%259A%2584%25E5%25B7%25A5%25E4%25BD%259C%25E5%258E%259F%25E7%2590%2586.webp.jpg" alt="图3.  ABE的工作原理"></p><p>图3. ABE的工作原理[3]</p><p><strong>GBE</strong></p><p>GBE技术是在CBE的基础上发展而来的。CBE在将C转变为U后，由于体内的UNG酶能将U碱基切除，形成无嘌呤无嘧啶的AP状态（apurinic&#x2F;apyrimidinic）。在AP态时，能够触发碱基切除修复机制，将U重新变回为C，但是也能被修复为其他三种碱基[5]。CBE是通过抑制UNG的活性，提高C到U再到T的转换效率。而GBE则是利用AP态向其他碱基转变的可能。研究者将UNG与nCas融合，发现在大肠杆菌中C变换成A是主要的编辑结果。但是在哺乳动物细胞HEK293T中则是以C转换成G为主要的编辑结果[6]（图4）。可以看出在AP状态下，细胞中存在着一种未知的修复机制使得AP态往不同的碱基进行修复。因此这项技术仍需继续完善。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/%25E5%259B%25BE4._GBE%25E5%259C%25A8%25E5%25A4%25A7%25E8%2582%25A0%25E6%259D%2586%25E8%258F%258C%25E6%2588%2596HEK293T%25E4%25B8%25AD%25E7%259A%2584%25E7%25BC%2596%25E8%25BE%2591%25E6%2595%2588%25E6%259E%259C-1.webp.jpg" alt="GBE在大肠杆菌中的编辑效果"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/%25E5%259B%25BE4._GBE%25E5%259C%25A8%25E5%25A4%25A7%25E8%2582%25A0%25E6%259D%2586%25E8%258F%258C%25E6%2588%2596HEK293T%25E4%25B8%25AD%25E7%259A%2584%25E7%25BC%2596%25E8%25BE%2591%25E6%2595%2588%25E6%259E%259C-2.webp.jpg" alt="GBE在HEK293T中的编辑效果"></p><p>图4. GBE在大肠杆菌或HEK293T中的编辑效果[6]</p><p>（A）GBE在大肠杆菌中的编辑效果。（B）GBE在HEK293T中的编辑效果</p><p><strong>先导编辑器</strong></p><p>虽然CBE和ABE能实现C到T和A到G的转换，但是其他不同碱基之间的转换仍然受限，于是研究者继续开发出能适应所有碱基转换的技术——先导编辑器（Prime Editor，PE）。PE除了能实现碱基的替换，还能有效实现多碱基的精准插入和删除[7]。PE也是以CRISPR&#x2F;Cas系统为基础，由改造的sgRNA（pegRNA）和融合蛋白组成。pegRNA是在原先sgRNA的基础上添加能互补断裂的靶DNA链3’末端的序列（PSB）和带有突变位点或插入缺失的目的序列（RT模板）。而融合蛋白是nCas（H840A）与逆转录酶融合而成。PE的工作原理是pegRNA引导融合蛋白到达靶序列区，然后nCas断裂被编辑的DNA，接着PSB结合上断裂的靶DNA，在逆转录酶和RT模板下逆转录出含有突变位点的目的序列。反应结束后会形成带有目标突变的3’flap结构的DNA链和无任何突变的5’flap结构的DNA链。细胞内5’flap结构易被结构特异性内切酶识别并切除，之后经DNA连接和修复便实现了精准的基因编辑（图4）。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/%25E5%259B%25BE5._PE%25E7%259A%2584%25E5%25B7%25A5%25E4%25BD%259C%25E5%258E%259F%25E7%2590%2586.webp.jpg" alt="图5. PE的工作原理"></p><p>图5. PE的工作原理[8]</p><p><strong>小结</strong></p><p>现今，基于CRISPR-Cas系统和细胞同源重组修复机制的基因编辑技术发展已经较为成熟。通过CRISPR-Cas系统在特定的基因组位置上产生双链DNA缺口，启动细胞中的同源重组修复机制，以含有目的突变的高度同源的DNA序列进行修复，从而达到碱基转换的目的。这项技术已经应用于基因治疗和基因功能研究等领域上。但是也存在部分的缺点，如同源重组效率不高、容易启动NHEJ修复方式导致不可预估的突变等。而单碱基编辑系统在CRISPR&#x2F;Cas系统基础上，通过突变Cas核酸内切酶的切割活性，使得不会产生DNA双链缺口，降低引入Indel的风险。同时在突变型Cas中融合脱氨酶等其他功能蛋白，实现不同碱基的转换。其简便、高效、不容易引入Indel等特点是基因治疗领域所看重的，所以单碱基编辑系统将会在基因功能研究和基因治疗等领域提供强劲持续的动力。</p><p><strong>参考文献：</strong></p><p>[1] Komor, Alexis C., et al. “Programmable Editing of a Target Base in Genomic DNA without Double-Stranded DNA Cleavage.” Nature, vol. 533, no. 7603, 2016, pp. 420–424.</p><p>[2] Komor, Alexis C., et al. “Improved Base Excision Repair Inhibition and Bacteriophage Mu Gam Protein Yields C:G-to-T:A Base Editors with Higher Efficiency and Product Purity.” Science Advances, vol. 3, no. 8, 2017.</p><p>[3] Gaudelli, Nicole M., et al. “Programmable Base Editing of A•T to G•C in Genomic DNA without DNA Cleavage.” Nature, vol. 551, no. 7681, 2017, pp. 464–471.</p><p>[4] Koblan, Luke W., et al. “Improving Cytidine and Adenine Base Editors by Expression Optimization and Ancestral Reconstruction.” Nature Biotechnology, vol. 36, no. 9, 2018, pp. 843–846.</p><p>[5] Nishida, Keiji, et al. “Targeted Nucleotide Editing Using Hybrid Prokaryotic and Vertebrate Adaptive Immune Systems.” Science, vol. 353, no. 6305, 2016.</p><p>[6] Zhao, Dongdong, et al. “Glycosylase Base Editors Enable C-to-A and C-to-G Base Changes.” Nature Biotechnology, vol. 39, no. 1, 2021, pp. 35–40.</p><p>[7] Doman, Jordan L., et al. “Evaluation and Minimization of Cas-Independent off-Target DNA Editing by Cytosine Base Editors.” Nature Biotechnology, vol. 38, no. 5, 2020, pp. 620–628.</p><p>[8] Anzalone, Andrew V., et al. “Search-and-Replace Genome Editing without Double-Strand Breaks or Donor DNA.” Nature, vol. 576, no. 7785, 2019, pp. 149–157.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;全球有超过50000种人类相关的遗传疾病，其中大部分是由基因组的点突变引起的。而对于罕见病而言，80%是由基因缺陷引起的，同时这些基因缺陷中点突变又占了60%。比如多发性神经纤维瘤（Neurofibromatosis）则是由 Neurofibromin 1&amp;#x2F;2基因</summary>
      
    
    
    
    
    <category term="BioNews" scheme="http://nikolahuang.github.io/tags/BioNews/"/>
    
  </entry>
  
  <entry>
    <title>CRISPR相关转座元件的研究.md</title>
    <link href="http://nikolahuang.github.io/2024/06/04/CRISPR%E7%9B%B8%E5%85%B3%E8%BD%AC%E5%BA%A7%E5%85%83%E4%BB%B6%E7%9A%84%E7%A0%94%E7%A9%B6/"/>
    <id>http://nikolahuang.github.io/2024/06/04/CRISPR%E7%9B%B8%E5%85%B3%E8%BD%AC%E5%BA%A7%E5%85%83%E4%BB%B6%E7%9A%84%E7%A0%94%E7%A9%B6/</id>
    <published>2024-06-03T17:08:28.000Z</published>
    <updated>2024-06-03T17:27:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CRISPR相关转座元件的研究"><a href="#CRISPR相关转座元件的研究" class="headerlink" title="CRISPR相关转座元件的研究"></a>CRISPR相关转座元件的研究</h1><p>脑图：</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240604012325237.png" alt="image-20240604012325237" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240604012234610.png" alt="image-20240604012234610" style="zoom:50%;"><h3 id="CRISPR相关转座元件的研究进展"><a href="#CRISPR相关转座元件的研究进展" class="headerlink" title="CRISPR相关转座元件的研究进展"></a>CRISPR相关转座元件的研究进展</h3><p>CRISPR相关转座元件是一类新兴的基因编辑工具，它们结合了CRISPR-Cas系统的精确切割能力和转座元件的移动特性。这些元件可以在不依赖同源重组的情况下，将指定的DNA片段定向插入到细胞染色体中，从而实现基因的定向整合。近年来，研究人员发现了具有转座机制的CRISPR相关转座元件，它们在基因编辑领域展现出了巨大的潜力和应用前景。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/clip_image002.jpg" alt="img"></p><h4 id="研究方向和应用进展"><a href="#研究方向和应用进展" class="headerlink" title="研究方向和应用进展"></a>研究方向和应用进展</h4><p>CRISPR相关转座元件的研究主要集中在以下几个方面：</p><p>\1.    <strong>基因编辑能力的提升</strong>：研究人员正在探索如何提高CRISPR相关转座元件的基因编辑效率，以便更有效地进行基因敲除、插入和修复等操作。</p><p>\2.    <strong>基因簇重组和单碱基编辑</strong>：除了传统的基因编辑应用，CRISPR相关转座元件还被用于基因簇重组和单碱基编辑，这对于研究基因功能和疾病机制具有重要意义。</p><p>\3.    <strong>基因转录调控</strong>：CRISPR相关转座元件可以作为基因转录调控的工具，通过改变基因表达水平来研究基因功能和疾病状态。</p><p>\4.    <strong>人工融合的dCas9-transposase****系统</strong>：研究人员正在尝试将CRISPR-Cas系统与转座酶融合，创造出新的基因编辑工具，以提高编辑的灵活性和效率。</p><h4 id="未来的应用前景和挑战"><a href="#未来的应用前景和挑战" class="headerlink" title="未来的应用前景和挑战"></a>未来的应用前景和挑战</h4><p>CRISPR相关转座元件的未来应用前景广阔，它们有望在基因疗法、农业生物技术和基础生物学研究等领域发挥重要作用。然而，这些技术的发展也面临着一系列挑战，包括提高编辑精度、减少脱靶效应、解决安全性问题以及克服技术实施的复杂性等。</p><p>综上所述，CRISPR相关转座元件的研究正处于快速发展阶段，它们的应用潜力正在逐步被发掘，未来有望为基因编辑领域带来革命性的变革。</p><h2 id="深入研究"><a href="#深入研究" class="headerlink" title="深入研究"></a>深入研究</h2><h3 id="CRISPR相关转座元素在基因组编辑中相比传统方法有哪些优势？"><a href="#CRISPR相关转座元素在基因组编辑中相比传统方法有哪些优势？" class="headerlink" title="CRISPR相关转座元素在基因组编辑中相比传统方法有哪些优势？"></a>CRISPR相关转座元素在基因组编辑中相比传统方法有哪些优势？</h3><h3 id="CRISPR相关转座元素在基因组编辑中的优势"><a href="#CRISPR相关转座元素在基因组编辑中的优势" class="headerlink" title="CRISPR相关转座元素在基因组编辑中的优势"></a>CRISPR相关转座元素在基因组编辑中的优势</h3><p>CRISPR相关转座元素（CRISPR-associated transposable elements）是一种新型的基因组编辑工具，它们在基因组编辑领域相对于传统方法具有显著的优势。以下是一些主要的优势：</p><p>\1.    <strong>高效率</strong>：CRISPR相关转座元素能够快速准确地定位到基因组中的特定位置，并进行切割或插入操作，大大提高了基因组编辑的效率。</p><p>\2.    <strong>高精度</strong>：由于CRISPR系统的指导RNA（gRNA）可以高度特异地识别目标DNA序列，因此CRISPR相关转座元素能够实现非常精确的基因组编辑，减少了非特异性切割的风险。</p><p>\3.    <strong>易于操作</strong>：CRISPR相关转座元素的操作相对简单，只需要设计相应的gRNA和供体DNA片段，就可以在体外或体内进行基因组编辑实验，降低了技术门槛。</p><p>\4.    <strong>广泛适用性</strong>：CRISPR相关转座元素不仅可以用于植物和动物的基因组编辑，还可以用于微生物和病毒的基因组改造，具有很广的应用范围。</p><p>\5.    <strong>多重编辑能力</strong>：CRISPR相关转座元素可以同时对多个位点进行编辑，实现复杂的基因组改造，这对于研究基因之间的相互作用和功能网络具有重要意义。</p><p>综上所述，CRISPR相关转座元素在基因组编辑中展现出了强大的优势，有望在未来的生命科学研究和生物技术应用中发挥更大的作用。</p><h3 id="目前CRISPR相关转座元件在提高编辑精度方面存在哪些挑战？"><a href="#目前CRISPR相关转座元件在提高编辑精度方面存在哪些挑战？" class="headerlink" title="目前CRISPR相关转座元件在提高编辑精度方面存在哪些挑战？"></a>目前CRISPR相关转座元件在提高编辑精度方面存在哪些挑战？</h3><h3 id="CRISPR相关转座元件在提高编辑精度方面的挑战"><a href="#CRISPR相关转座元件在提高编辑精度方面的挑战" class="headerlink" title="CRISPR相关转座元件在提高编辑精度方面的挑战"></a>CRISPR相关转座元件在提高编辑精度方面的挑战</h3><p>CRISPR相关转座元件，尤其是CRISPR-Cas9系统，在基因组编辑中展现出了巨大的潜力和应用价值。然而，在提高编辑精度方面，该系统仍面临一些挑战：</p><p>\1.    <strong>脱靶效应</strong>：CRISPR-Cas9系统虽然能够通过gRNA（指导RNA）精确地定位目标DNA序列，但也存在脱靶切割的风险，即在非目标位置切割DNA，导致意外的基因突变。这种脱靶效应可能会引起不可预测的生物学变化，甚至导致细胞死亡。</p><p>\2.    <strong>gRNA****设计的复杂性</strong>：为了减少脱靶效应，需要精心设计gRNA以确保高特异性。然而，gRNA的设计涉及到对目标DNA序列的深入理解，以及对潜在脱靶位点的预测，这是一个复杂且耗时的过程。</p><p>\3.    <strong>Cas9****蛋白的优化</strong>：Cas9蛋白的活性和特异性也是影响编辑精度的关键因素。尽管已经有多种Cas9变体被开发出来，以改善其在不同细胞类型中的编辑效率和减少脱靶效应，但找到最佳的Cas9变体仍然是一个挑战。</p><p>\4.    <strong>细胞毒性</strong>：在某些情况下，CRISPR-Cas9系统可能会对宿主细胞产生毒性，这可能限制其在某些应用中的使用。</p><p>\5.    <strong>免疫反应</strong>：在人体中使用CRISPR-Cas9系统可能会触发免疫反应，这对于其在临床治疗中的应用构成了障碍。</p><p>\6.    <strong>伦理和法律问题</strong>：CRISPR-Cas9系统的使用还涉及到一系列伦理和法律问题，特别是在涉及人类胚胎编辑时，这些问题尤为敏感和复杂。</p><p>综上所述，尽管CRISPR相关转座元件在提高编辑精度方面取得了显著进展，但仍需克服上述挑战，以便更好地应用于科学研究和临床治疗。</p><h3 id="CRISPR相关转座元件在基因治疗领域的潜在应用有哪些？"><a href="#CRISPR相关转座元件在基因治疗领域的潜在应用有哪些？" class="headerlink" title="CRISPR相关转座元件在基因治疗领域的潜在应用有哪些？"></a>CRISPR相关转座元件在基因治疗领域的潜在应用有哪些？</h3><h3 id="CRISPR相关转座元件在基因治疗领域的潜在应用"><a href="#CRISPR相关转座元件在基因治疗领域的潜在应用" class="headerlink" title="CRISPR相关转座元件在基因治疗领域的潜在应用"></a>CRISPR相关转座元件在基因治疗领域的潜在应用</h3><p>CRISPR相关转座元件，特别是CRISPR&#x2F;Cas系统，已经成为基因治疗领域的重要工具。这些系统最初是细菌用来抵御病毒入侵的防御机制，但科学家们发现它们可以被改造用于精确地修改生物体的基因组。以下是CRISPR相关转座元件在基因治疗中的一些潜在应用：</p><p>\1.    <strong>疾病模型建立</strong>：通过CRISPR&#x2F;Cas系统，研究人员可以在动物模型中模拟人类遗传疾病，从而更好地理解疾病的发病机理并测试新的治疗方法。</p><p>\2.    <strong>基因修复</strong>：对于那些由于单个或几个基因突变导致的遗传病，CRISPR&#x2F;Cas系统可以被用来修复这些突变，恢复正常的基因功能。</p><p>\3.    <strong>基因沉默</strong>：通过设计特定的向导RNA，CRISPR&#x2F;Cas系统可以靶向并沉默致病基因的表达，为某些无法通过传统药物治疗的疾病提供新的治疗策略。</p><p>\4.    <strong>基因激活</strong>：除了沉默基因外，CRISPR&#x2F;Cas系统还可以被用来激活那些在疾病状态下被抑制的有益基因，增强机体的自我修复能力。</p><p>\5.    <strong>基因插入</strong>：CRISPR&#x2F;Cas系统可以在基因组的特定位置插入新的基因片段，这为研究基因功能和开发新型疗法提供了可能。</p><p>尽管CRISPR相关转座元件在基因治疗领域展现出巨大的潜力，但它们也面临着一些挑战，包括脱靶效应、免疫反应以及伦理和法律问题。因此，未来的研究将需要解决这些问题，以便这些强大的工具能够安全有效地应用于临床治疗。</p><h3 id="CRISPR转座元件在基因治疗中的应用案例"><a href="#CRISPR转座元件在基因治疗中的应用案例" class="headerlink" title="CRISPR转座元件在基因治疗中的应用案例"></a>CRISPR转座元件在基因治疗中的应用案例</h3><p>CRISPR转座元件是一种新兴的基因编辑工具，它结合了CRISPR-Cas系统的精确切割能力和转座元件的移动特性。这些元件可以在不依赖同源重组的情况下，将指定的DNA片段定向插入到细胞染色体中，从而实现基因的定向整合。以下是一些CRISPR转座元件在基因治疗中的具体应用案例：</p><p>\1.    <strong>HIV****抗性细胞的创建</strong>：研究人员利用CRISPR转座元件在造血干细胞中实现了HIV抗性细胞的创建。通过编辑干细胞的基因组，使得这些细胞能够抵抗HIV感染，为HIV患者提供了一种潜在的治疗方法。</p><p>\2.    <strong>EGFP****基因定点整合表达</strong>：在另一个例子中，研究人员利用CRISPR转座元件在CHO细胞中实现了EGFP基因的定点整合和表达。这表明CRISPR转座元件可以用于建立基于CRISPR&#x2F;Cas9技术的外源基因定点整合和表达技术，为基因治疗提供了新的策略。</p><p>\3.    <strong>植物基因组编辑</strong>：CRISPR转座元件在植物基因组编辑中也显示出了潜力。通过保留必要元件，研究者简化了CRISPR&#x2F;Cas9系统，使其在植物基因组编辑中更加高效和实用。</p><p>\4.    <strong>造血干细胞移植中的应用</strong>：CRISPR转座元件在造血干细胞移植中的研究表明，该技术在自体移植和基因治疗方面具有良好的应用前景。这为血液疾病和遗传性疾病的治疗提供了新的可能性。</p><p>这些案例展示了CRISPR转座元件在基因治疗中的多样性和潜力，它们为未来的基因治疗研究和临床应用提供了新的思路和工具。随着技术的不断发展和完善，预计CRISPR转座元件将在基因治疗领域发挥越来越重要的作用。</p><h2 id="深入研究-1"><a href="#深入研究-1" class="headerlink" title="深入研究"></a>深入研究</h2><h3 id="CRISPR转座元件在造血干细胞移植中是如何提高效率的？"><a href="#CRISPR转座元件在造血干细胞移植中是如何提高效率的？" class="headerlink" title="CRISPR转座元件在造血干细胞移植中是如何提高效率的？"></a>CRISPR转座元件在造血干细胞移植中是如何提高效率的？</h3><h3 id="CRISPR转座元件在造血干细胞移植中的应用"><a href="#CRISPR转座元件在造血干细胞移植中的应用" class="headerlink" title="CRISPR转座元件在造血干细胞移植中的应用"></a>CRISPR转座元件在造血干细胞移植中的应用</h3><p>CRISPR转座元件是一种新型的基因编辑技术，它结合了CRISPR-Cas系统的精确切割能力和转座元件的移动特性，使得科学家能够在不依赖同源重组的情况下，将特定的DNA片段定向插入到细胞染色体中。这项技术在造血干细胞移植中的应用主要体现在提高基因编辑的效率和准确性。</p><p>在造血干细胞移植中，CRISPR转座元件可以用来修复或修改患者自身的基因缺陷，或者引入新的基因以改善其功能。例如，通过CRISPR转座元件，可以在造血干细胞中敲除或修正导致血液疾病的基因突变，然后将这些经过编辑的干细胞移植回患者体内，以恢复正常的血液功能。</p><p>CRISPR转座元件提高效率的关键在于其能够在基因组中精确地定位目标位置，并进行高效的基因编辑。相比于传统的基因编辑技术，如TALEN和ZFN，CRISPR转座元件的设计更为简洁，操作更为方便，因此在造血干细胞移植中具有更大的应用潜力。</p><p>尽管CRISPR转座元件在理论上具有很大的优势，但在实际应用中仍面临一些挑战，如脱靶效应、基因编辑的稳定性和安全性等问题。因此，科学家们正在不断改进CRISPR转座元件的设计和应用策略，以提高其在造血干细胞移植中的应用效率和安全性。</p><p>总的来说，CRISPR转座元件在造血干细胞移植中的应用前景非常广阔，它有望为治疗遗传性血液疾病和其他相关疾病提供新的策略和方法。随着科学技术的不断进步，相信未来CRISPR转座元件在这一领域的应用将会取得更多突破性的成果。</p><h3 id="CRISPR转座元件与传统基因疗法相比有哪些优势？"><a href="#CRISPR转座元件与传统基因疗法相比有哪些优势？" class="headerlink" title="CRISPR转座元件与传统基因疗法相比有哪些优势？"></a>CRISPR转座元件与传统基因疗法相比有哪些优势？</h3><h3 id="CRISPR转座元件与传统基因疗法的优势比较"><a href="#CRISPR转座元件与传统基因疗法的优势比较" class="headerlink" title="CRISPR转座元件与传统基因疗法的优势比较"></a>CRISPR转座元件与传统基因疗法的优势比较</h3><p>CRISPR转座元件是一种新型的基因编辑技术，它结合了CRISPR-Cas系统的精确切割能力和转座元件的移动特性。与传统的基因疗法相比，CRISPR转座元件具有以下优势：</p><p>\1.    <strong>高效率和简便性</strong>：CRISPR转座元件的设计和应用比传统的基因编辑工具如锌指核酸酶（ZFNs）和转录激活样效应物核酸酶（TALENs）更为简单高效。这使得科研人员能够更快地进行基因编辑实验，加速科学研究进程。</p><p>\2.    <strong>成本低廉</strong>：由于CRISPR转座元件的设计相对简单，因此在材料和操作成本上较低，这使得更多的实验室能够负担得起这项技术，促进了基因编辑技术的普及。</p><p>\3.    <strong>广泛的应用范围</strong>：CRISPR转座元件不仅可以用于基因的敲除和插入，还可以用于碱基编辑、转录调控、多基因编辑等多种功能的实现。这种多功能性使得CRISPR转座元件在基因治疗、农业生物技术和基础生物学研究等领域具有广泛的应用前景。</p><p>\4.    <strong>精确性</strong>：CRISPR转座元件能够实现高度精确的基因编辑，减少了脱靶效应，这对于确保基因治疗的安全性和有效性至关重要。</p><p>\5.    <strong>小型化</strong>：随着研究的深入，CRISPR-Cas系统正在向更小的尺寸发展，这有助于提高基因编辑的灵活性和适用性，尤其是在空间受限的细胞环境中。</p><p>综上所述，CRISPR转座元件在效率、成本、应用范围、精确性和小型化等方面相对于传统基因疗法具有显著优势，这些优势使得CRISPR转座元件成为现代基因编辑领域的重要工具。</p><h3 id="CRISPR转座元件在植物基因组编辑中的应用主要解决了哪些问题？"><a href="#CRISPR转座元件在植物基因组编辑中的应用主要解决了哪些问题？" class="headerlink" title="CRISPR转座元件在植物基因组编辑中的应用主要解决了哪些问题？"></a>CRISPR转座元件在植物基因组编辑中的应用主要解决了哪些问题？</h3><h3 id="CRISPR转座元件在植物基因组编辑中的应用"><a href="#CRISPR转座元件在植物基因组编辑中的应用" class="headerlink" title="CRISPR转座元件在植物基因组编辑中的应用"></a>CRISPR转座元件在植物基因组编辑中的应用</h3><p>CRISPR转座元件在植物基因组编辑中的应用主要解决了以下几个问题：</p><p>\1.    <strong>提高编辑效率</strong>：传统的基因编辑技术如ZFN和TALEN在组装上存在挑战，而CRISPR转座元件通过短的gRNA引导Cas9蛋白进行DNA切割，简化了核酸内切酶的定制过程，提高了编辑效率。</p><p>\2.    <strong>降低成本</strong>：相比于其他基因编辑技术，CRISPR转座元件的操作更加简便，不需要大量的蛋白质组装，从而降低了实验成本。</p><p>\3.    <strong>扩大应用范围</strong>：CRISPR转座元件不仅可以用于基因敲除，还可以实现基因敲入和基因修复，这使得它在植物基因组编辑中的应用范围更加广泛。</p><p>\4.    <strong>减少脱靶效应</strong>：CRISPR转座元件的设计可以减少脱靶效应，即错误地编辑基因组中的非目标位置，这对于确保编辑结果的准确性至关重要。</p><p>\5.    <strong>促进植物育种</strong>：通过CRISPR转座元件，研究人员可以快速培育出具有特定性状的植物品种，加速植物育种进程。</p><p>\6.    <strong>研究基因功能</strong>：CRISPR转座元件可以用来研究植物中特定基因的功能，帮助理解植物生长发育和适应环境的机制。</p><p>综上所述，CRISPR转座元件在植物基因组编辑中的应用解决了传统技术的一些局限性，提高了编辑效率和准确性，同时也为植物育种和基因功能研究提供了新的工具。随着技术的不断完善，未来CRISPR转座元件在植物基因组编辑领域的应用前景非常广阔。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://cjb.ijournals.cn/html/cjbcn/2022/12/gc22124371.htm">CRISPR相关转座元件的研究及应用进展</a></p><p><a href="http://www.chinagene.cn/CN/abstract/abstract5784.shtml">转座元件, 表观遗传调控与细胞命运决定</a></p><p><a href="https://cjb.ijournals.cn/html/cjbcn/2023/7/gc23072566.htm">基于CRISPR&#x2F;Cas9的精准基因编辑技术研究进展</a></p><p><a href="https://zlxb.zafu.edu.cn/fileZJNLDXXB/journal/article/zjnldxxb/2021/3/PDF/2020-0338.pdf">转座子沉默与 DNA 甲基化</a></p><p><a href="https://synbioj.cip.com.cn/CN/abstract/abstract451.shtml">CRISPR-Cas系统的小型化研究进展</a></p><p><a href="https://manu60.magtech.com.cn/biotech/CN/Y2022/V42/I4/24">CRISPR&#x2F;Cas基因编辑技术在增强子功能分析及鉴定中的研究进展*</a></p><p><a href="https://synbioj.cip.com.cn/CN/abstract/abstract193.shtml">CRISPR&#x2F;Cas系统的挖掘、改造与功能拓展</a></p><p><a href="http://www.chinagene.cn/CN/Y2020/V42/I5/435">基于 CRISPR&#x2F;Cas9 系统在全基因组范围内筛选功能基因及调控元件研究进展</a></p><p><a href="http://www.plant-physiology.com/upload/file/201908271632146550.pdf">CRISPR&#x2F;Cas9 系统在植物基因功能研究中的应用进展</a></p><p><a href="https://synbioj.cip.com.cn/CN/abstract/abstract278.shtml">CRISPR&#x2F;Cas9 及其衍生编辑器在衰老研究中的应用进展</a></p><p><a href="https://lifescience.sinh.ac.cn/webadmin/upload/2015199.pdf">CRISPR&#x2F;Cas 系统及其在昆虫基因功能研究中的应用</a></p><p><a href="http://biotech.aiijournal.com/CN/Y2020/V36/I3/29">精准高效外源 DNA 整合技术研究进展</a></p><p><a href="http://journal05.magtech.org.cn/Jwk_ny/CN/article/downloadArticleFile.do?attachType=PDF&id=10339">CRISPR&#x2F;Cas 技术研究进展</a></p><p><a href="http://www.chinagene.cn/CN/article/downloadArticleFile.do?attachType=PDF&id=4968">采用 DNA 片段编辑技术反转 CTCF 结合位点改变基因组拓扑结构和增强子与启动子功能</a></p><p><a href="https://cjb.ijournals.cn/html/cjbcn/2023/6/gc23062449.htm">基于CRISPR&#x2F;Cas系统的多重基因编辑与调控技术</a></p><p><a href="https://lifescience.sinh.ac.cn/webadmin/upload/2016101243.pdf">基因组编辑技术在水稻功能基因组和遗传改良中的应用</a></p><p><a href="https://biotech.aiijournal.com/CN/10.13560/j.cnki.biotech.bull.1985.2020-0068">CRISPR &#x2F;Cas9基因编辑技术在山羊和绵羊中的应用研究进展</a></p><p><a href="https://synbioj.cip.com.cn/CN/Y2023/V4/I6/1281">电活性微生物基因编辑与转录调控技术进展与应用</a></p><p><a href="https://zh-pdf.nature.com/pdf/nrrheum/2020/Nature-Reviews-Rheumatology-research-highlights-1.pdf#page=69">遗传学和表观遗传学在骨关节炎中的相互调控作用</a></p><p><a href="http://www.chinagene.cn/EN/10.16288/j.yczz.20-301">细菌最小基因组研究进展</a></p><p><a href="https://www.nature.shu.edu.cn/CN/article/downloadArticleFile.do?attachType=PDF&id=8231">从旁观者到生力军</a></p><p><a href="http://html.rhhz.net/SWJSTB/html/2016-5-47.htm">CRISPR&#x2F;Cas9技术的发展及在基因组编辑中的应用</a></p><p><a href="https://synbioj.cip.com.cn/CN/abstract/abstract344.shtml">CRISPR-Cas9 系统在肿瘤生物学中的应用及前景</a></p><p><a href="https://cjb.ijournals.cn/html/cjbcn/2017/3/gc17030331.htm">合成基因组学: 设计与合成的艺术</a></p><p><a href="https://synbioj.cip.com.cn/EN/abstract/abstract344.shtml">Application and prospect of CRISPR-Cas9 system in tumor biology</a></p><p><a href="https://books.google.com/books?hl=en&lr=&id=MwbWEAAAQBAJ&oi=fnd&pg=PA1&dq=%E7%9B%AE%E5%89%8DCRISPR%E7%9B%B8%E5%85%B3%E8%BD%AC%E5%BA%A7%E5%85%83%E4%BB%B6%E5%9C%A8%E6%8F%90%E9%AB%98%E7%BC%96%E8%BE%91%E7%B2%BE%E5%BA%A6%E6%96%B9%E9%9D%A2%E5%AD%98%E5%9C%A8%E5%93%AA%E4%BA%9B%E6%8C%91%E6%88%98%EF%BC%9F&ots=rfJlOCnVS0&sig=7Hs0ZiUd0TQq_p0TJqlMTgCWbCM">基因工程原理与技术研究</a></p><p><a href="http://www.chinagene.cn/EN/abstract/abstract4975.shtml">CRISPR&#x2F;Cas9 基因组编辑技术及其在动物基因组定点修饰中的应用</a></p><p><a href="https://everestgene.wordpress.com/wp-content/uploads/2018/11/e59fbae59ba0e7b7a8e8bcaf.pdf#page=150">应用编辑核酸酶产生 HIV 抵抗细胞</a></p><p><a href="http://biomed.cnjournals.com/ch/reader/download_pdf.aspx?file_no=201819001&year_id=2018&quarter_id=19&falg=1">基于 CRISPR&#x2F;Cas9 基因编辑技术的 EGFP 基因定点整合表达</a></p><p><a href="https://xuebao.scau.edu.cn/zr/html/2019/5/20190506.htm">CRISPR&#x2F;Cas 植物基因组编辑技术研究进展</a></p><p><a href="https://www.cjter.com/CN/Y2018/V22/I29/4713">CRISPR&#x2F;Cas9 在造血干细胞移植中的最新研究与进展</a></p><p><a href="https://cjb.ijournals.cn/html/cjbcn/2022/12/gc22124371.htm">CRISPR相关转座元件的研究及应用进展</a></p><p><a href="http://www.cqvip.com/qk/90501x/1999003/3700140.html">动物基因免疫的原理与方法</a></p><p><a href="http://www.chinagene.cn/CN/abstract/abstract5784.shtml">转座元件, 表观遗传调控与细胞命运决定</a></p><p><a href="http://www.cqvip.com/qk/92751x/199206/764783.html">肿瘤基因治疗研究进展</a></p><p><a href="https://zlxb.zafu.edu.cn/fileZJNLDXXB/journal/article/zjnldxxb/2021/3/PDF/2020-0338.pdf">转座子沉默与 DNA 甲基化</a></p><p><a href="http://www.ecsponline.com/yz/BF5DC6C2E06774FEBB83BC310DC2745D8000.pdf">基因治疗</a></p><p><a href="https://manu60.magtech.com.cn/biotech/CN/Y2022/V42/I4/24">CRISPR&#x2F;Cas基因编辑技术在增强子功能分析及鉴定中的研究进展*</a></p><p><a href="http://www.cqvip.com/qk/83764x/200204/7066789.html">基因治疗与基因载体</a></p><p><a href="https://cjb.ijournals.cn/html/cjbcn/2022/2/gc22020478.htm">解脂耶氏酵母表达调控工具的开发及天然产物合成的研究进展</a></p><p><a href="http://biotech.aiijournal.com/CN/Y2020/V36/I3/29">精准高效外源 DNA 整合技术研究进展</a></p><p><a href="http://www.cqvip.com/qk/95669x/199406/1357164.html">肿瘤基因治疗原理及在膀胱癌治疗中的应用前景</a></p><p><a href="http://www.chinagene.cn/CN/10.16288/j.yczz.15-284">CRISPR&#x2F;Cas9基因组编辑技术在HIV-1感染治疗中的应用进展</a></p><p>[诱导多能干细胞技术及其在疾病研究中的应用 <a href="http://www.chinagene.cn/CN/Y2020/V42/I11/1042">已撤稿]</a></p><p><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8292649/">基因编辑治疗原发性免疫缺陷病 - PMC</a></p><p><a href="http://biotech.aiijournal.com/CN/Y2015/V31/I4/72">我国诱导多能干细胞研究进展</a></p><p><a href="http://html.rhhz.net/ZGSWGCZZ/html/20161214.htm">CRISPR&#x2F;Cas9介导的疾病模型构建与基因修复研究进展</a></p><p><a href="http://www.chinagene.cn/EN/abstract/abstract4975.shtml">CRISPR&#x2F;Cas9 基因组编辑技术及其在动物基因组定点修饰中的应用</a></p><p><a href="https://synbioj.cip.com.cn/CN/abstract/abstract451.shtml">CRISPR-Cas系统的小型化研究进展</a></p><p><a href="https://synbioj.cip.com.cn/CN/Y2023/V4/I6/1281">电活性微生物基因编辑与转录调控技术进展与应用</a></p><p><a href="https://synbioj.cip.com.cn/CN/abstract/abstract193.shtml">CRISPR&#x2F;Cas系统的挖掘、改造与功能拓展</a></p><p><a href="https://huanglab.xmu.edu.cn/paper/6.pdf">增强子对基因表达的调控: 从新技术到新机制</a></p><p><a href="http://html.rhhz.net/SWJSTB/html/2016-5-47.htm">CRISPR&#x2F;Cas9技术的发展及在基因组编辑中的应用</a></p><p><a href="http://plant-physiology.com/upload/file/201601211049293010.pdf">基因组编辑新技术: CRISPR&#x2F;Cas 系统在生物基因组学中的研究进展</a></p><p><a href="https://synbioj.cip.com.cn/CN/abstract/abstract339.shtml">合成生物学在疾病信息记录与实时监测中的应用潜力</a></p><p><a href="http://www.chinagene.cn/EN/abstract/abstract5998.shtml">表观遗传修饰影响花青苷合成研究进展</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CRISPR相关转座元件的研究&quot;&gt;&lt;a href=&quot;#CRISPR相关转座元件的研究&quot; class=&quot;headerlink&quot; title=&quot;CRISPR相关转座元件的研究&quot;&gt;&lt;/a&gt;CRISPR相关转座元件的研究&lt;/h1&gt;&lt;p&gt;脑图：&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    
    <category term="转座子" scheme="http://nikolahuang.github.io/tags/%E8%BD%AC%E5%BA%A7%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>Piggybac转座子载体小传</title>
    <link href="http://nikolahuang.github.io/2024/06/03/Piggybac%E8%BD%AC%E5%BA%A7%E5%AD%90%E8%BD%BD%E4%BD%93%E5%B0%8F%E4%BC%A0/"/>
    <id>http://nikolahuang.github.io/2024/06/03/Piggybac%E8%BD%AC%E5%BA%A7%E5%AD%90%E8%BD%BD%E4%BD%93%E5%B0%8F%E4%BC%A0/</id>
    <published>2024-06-03T06:06:45.000Z</published>
    <updated>2024-06-03T16:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>脑图：</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/PB-17174312159232.png" alt="PB" style="zoom:50%;"><p>在我们研究某种疾病的发病机制或者某种药物的作用靶点时，经常需要建立目的基因过表达或基因敲除的细胞模型，目前构建稳转细胞株及部分敲除细胞株最常用的方式之一是慢病毒法，慢病毒因其可以转染几乎所有种类的细胞，且在转染后可以整合到细胞的基因组而长期表达的优势，是目前较为主流的构建方法，但慢病毒构建的稳转细胞株相对于野生型没有生长优势；此外，慢病毒对目的基因的载量也有限。因此，寻找一种高效简便可替代慢病毒法的方法显得尤为重要。</p><p>转座子的出现为构建基因编辑细胞株提供了一个全新的视野。转座子也被称为跳跃基因，由Barbara McClintock教授在上世纪50年代发现，并于1983年因此发现而获得诺贝尔医学奖，是指一段DNA序列由基因组的一个位置跳跃到另一个位置。转座子主要包含两种类型：</p><p><strong>☑ 一类转座子：逆转座子（retrotransposons）</strong>，自身不表达转座酶，先转录为RNA，通过RNA的反转录获得cDNA，cDNA在整合酶的作用下转移到其他基因组位置。</p><p><strong>☑ 二类转座子：DNA转座子（DNA transposons）</strong>，通过自身编码的转座酶直接切割转座子所在DNA序列，实现序列的转移。在脊椎动物中发现的转座子系统中，以睡美人转座子（SleepingBeauty）和piggyBac转座子等DNA转座子最为常见。</p><p>睡美人转座子是由科学家Levis于1997年在脊椎动物中首个发现的转座子， 其通过生物信息学方法分析8种鲑鱼中12个Tc1类转座酶序列，找出了其中的保守序列，确定了已经灭绝的鲑鱼中具有活性的转座酶的基因序列，并称其为睡美人转座子。但睡美人转座子对宿主要求严格，且存在转座效率不稳定等情况，限制了其广泛应用，而piggyBac转座子则因其特异的整合位点、精密切割以及广泛存在的特性被大家所青睐。</p><h3 id="PiggyBac转座子载体简介"><a href="#PiggyBac转座子载体简介" class="headerlink" title="PiggyBac转座子载体简介"></a>PiggyBac转座子载体简介</h3><p>PiggyBac转座子载体是一种常用于基因工程的工具，它属于DNA转座子的一种。PiggyBac转座子载体的特点在于其高效的转座能力和较低的宿主细胞毒性，使得它在基因克隆、基因表达调控、基因治疗等领域有着广泛的应用。</p><h3 id="PiggyBac转座子载体的工作原理"><a href="#PiggyBac转座子载体的工作原理" class="headerlink" title="PiggyBac转座子载体的工作原理"></a>PiggyBac转座子载体的工作原理</h3><p>PiggyBac转座子载体的工作原理是通过转座酶的催化，将含有特定基因的DNA片段从一个位置转移到另一个位置。这个过程不需要依赖于同源重组，因此转座效率相对较高。PiggyBac转座子载体可以将目标基因插入到宿主细胞的基因组中，或者从基因组中移除特定的基因片段。</p><h3 id="PiggyBac转座子载体的应用实例"><a href="#PiggyBac转座子载体的应用实例" class="headerlink" title="PiggyBac转座子载体的应用实例"></a>PiggyBac转座子载体的应用实例</h3><p>PiggyBac转座子载体在昆虫遗传学研究中有着重要的应用。例如，在苹果蠹蛾不育昆虫释放技术中，研究者们使用基于PiggyBac的质粒载体，插入显性条件致死基因以培育遗传性别品系，同时插入荧光蛋白等标记基因来显示转基因的效果。这种技术可以有效地控制苹果蠹蛾的种群数量，减少其对苹果树的危害。 <img src="data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='12'%20height='12'%20viewBox='0%200%2012%2012'%20fill='none'%3e%3cpath%20d='M1.98484%207.23472L5.73484%203.48472C5.76967%203.44986%205.81103%203.4222%205.85655%203.40333C5.90208%203.38445%205.95088%203.37474%206.00016%203.37474C6.04944%203.37474%206.09824%203.38445%206.14376%203.40333C6.18928%203.4222%206.23064%203.44986%206.26547%203.48472L10.0155%207.23472C10.0858%207.30509%2010.1254%207.40052%2010.1254%207.50004C10.1254%207.59955%2010.0858%207.69498%2010.0155%207.76535C9.9451%207.83571%209.84967%207.87524%209.75016%207.87524C9.65065%207.87524%209.55521%207.83571%209.48485%207.76535L6.00016%204.28019L2.51547%207.76535C2.48063%207.80019%202.43927%207.82783%202.39374%207.84668C2.34822%207.86554%202.29943%207.87524%202.25016%207.87524C2.20088%207.87524%202.15209%207.86554%202.10657%207.84668C2.06105%207.82783%202.01969%207.80019%201.98484%207.76535C1.95%207.73051%201.92237%207.68914%201.90351%207.64362C1.88465%207.5981%201.87495%207.54931%201.87495%207.50004C1.87495%207.45076%201.88465%207.40197%201.90351%207.35645C1.92237%207.31093%201.95%207.26956%201.98484%207.23472Z'%20fill='%230057FF'%20stroke='%230057FF'%20stroke-width='0.5'/%3e%3c/svg%3e" alt="img"></p><h3 id="PiggyBac转座子载体的优势与局限性"><a href="#PiggyBac转座子载体的优势与局限性" class="headerlink" title="PiggyBac转座子载体的优势与局限性"></a>PiggyBac转座子载体的优势与局限性</h3><p>PiggyBac转座子载体的优势在于其高效的转座能力和较低的宿主细胞毒性，这使得它在基因工程中具有很高的实用价值。然而，PiggyBac转座子载体的局限性在于其转座范围相对较窄，可能不适用于所有类型的宿主细胞。此外，PiggyBac转座子载体的转座过程可能会导致宿主基因组的不稳定，因此在使用时需要谨慎考虑。</p><p>综上所述，PiggyBac转座子载体是一种强大的基因工程工具，它在许多领域都有着重要的应用。然而，在使用时也需要注意其潜在的局限性和风险。</p><h2 id="深入研究"><a href="#深入研究" class="headerlink" title="深入研究"></a><strong>深入研究</strong></h2><h3 id="PiggyBac转座子载体在昆虫遗传学研究中具体是如何被应用的？"><a href="#PiggyBac转座子载体在昆虫遗传学研究中具体是如何被应用的？" class="headerlink" title="PiggyBac转座子载体在昆虫遗传学研究中具体是如何被应用的？"></a><strong>PiggyBac转座子载体在昆虫遗传学研究中具体是如何被应用的？</strong></h3><p>PiggyBac转座子载体在昆虫遗传学研究中的应用主要体现在其作为一个高效的基因转移工具，用于在昆虫体内插入外源基因。这种转座子载体具有几个显著优点，包括较高的转座效率、低毒性以及能够在宿主基因组中保持稳定的整合状态。</p><h3 id="转座子载体的基本原理"><a href="#转座子载体的基本原理" class="headerlink" title="转座子载体的基本原理"></a>转座子载体的基本原理</h3><p>PiggyBac转座子载体的工作原理是通过特定的酶介导，将包含目标基因的转座子从一个位置跳跃到另一个位置。这个过程通常涉及两个关键步骤：首先是转座子的切割和移动，其次是目标基因的整合到宿主基因组中。由于PiggyBac转座子载体不依赖于宿主细胞的修复机制，因此它可以在多种昆虫物种中有效工作，包括家蝇等模式昆虫。</p><h3 id="在昆虫遗传学研究中的应用实例"><a href="#在昆虫遗传学研究中的应用实例" class="headerlink" title="在昆虫遗传学研究中的应用实例"></a>在昆虫遗传学研究中的应用实例</h3><p>在昆虫遗传学研究中，PiggyBac转座子载体被用来创建转基因昆虫模型，这些模型可以用于研究基因功能、疾病传播机制以及昆虫行为等方面。例如，研究人员可以通过将含有增强型绿色荧光蛋白（EGFP）基因的PiggyBac转座子载体注射到家蝇卵中，实现活体基因稳定表达，并对其进行验证，为开展家蝇基因功能的研究奠定基础。 <img src="data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='12'%20height='12'%20viewBox='0%200%2012%2012'%20fill='none'%3e%3cpath%20d='M1.98484%207.23472L5.73484%203.48472C5.76967%203.44986%205.81103%203.4222%205.85655%203.40333C5.90208%203.38445%205.95088%203.37474%206.00016%203.37474C6.04944%203.37474%206.09824%203.38445%206.14376%203.40333C6.18928%203.4222%206.23064%203.44986%206.26547%203.48472L10.0155%207.23472C10.0858%207.30509%2010.1254%207.40052%2010.1254%207.50004C10.1254%207.59955%2010.0858%207.69498%2010.0155%207.76535C9.9451%207.83571%209.84967%207.87524%209.75016%207.87524C9.65065%207.87524%209.55521%207.83571%209.48485%207.76535L6.00016%204.28019L2.51547%207.76535C2.48063%207.80019%202.43927%207.82783%202.39374%207.84668C2.34822%207.86554%202.29943%207.87524%202.25016%207.87524C2.20088%207.87524%202.15209%207.86554%202.10657%207.84668C2.06105%207.82783%202.01969%207.80019%201.98484%207.76535C1.95%207.73051%201.92237%207.68914%201.90351%207.64362C1.88465%207.5981%201.87495%207.54931%201.87495%207.50004C1.87495%207.45076%201.88465%207.40197%201.90351%207.35645C1.92237%207.31093%201.95%207.26956%201.98484%207.23472Z'%20fill='%230057FF'%20stroke='%230057FF'%20stroke-width='0.5'/%3e%3c/svg%3e" alt="img"></p><h3 id="应用的优势和局限性"><a href="#应用的优势和局限性" class="headerlink" title="应用的优势和局限性"></a>应用的优势和局限性</h3><p>PiggyBac转座子载体的应用优势在于其操作简便、转座效率高，且不会引起宿主基因组的大范围重组。然而，它也有一些局限性，例如转座子的随机整合可能导致不可预测的基因表达变化，以及长期稳定性可能受到挑战。</p><p>综上所述，PiggyBac转座子载体在昆虫遗传学研究中扮演着重要角色，它不仅提高了基因转移的效率，还为理解昆虫的复杂生物学特性提供了有力的工具。随着科学技术的不断进步，未来PiggyBac转座子载体的应用范围有望进一步扩大，为昆虫遗传学研究带来更多突破。</p><h3 id="PiggyBac转座子载体相比其他DNA转座子有哪些独特的优点？"><a href="#PiggyBac转座子载体相比其他DNA转座子有哪些独特的优点？" class="headerlink" title="PiggyBac转座子载体相比其他DNA转座子有哪些独特的优点？"></a><strong>PiggyBac转座子载体相比其他DNA转座子有哪些独特的优点？</strong></h3><p>PiggyBac转座子载体具有一些独特的优点，使其在基因工程领域中成为一个重要工具。以下是一些主要优势：</p><ol><li><strong>低毒性</strong>：与许多其他类型的转座子载体相比，PiggyBac转座子载体对宿主细胞的毒性较低。这意味着它们可以在细胞中更安全地操作，减少对细胞的潜在损害。</li><li><strong>高效的转座活性</strong>：PiggyBac转座子载体具有很高的转座效率，能够快速将基因片段插入到宿主基因组的多个位点。这种高效率使得研究人员能够迅速实现基因的敲入或敲除。</li><li><strong>广泛的宿主范围</strong>：PiggyBac转座子载体可以在多种细胞类型中转座，包括哺乳动物细胞、昆虫细胞等。这为研究人员提供了更多的选择，以便在不同的生物模型中进行实验。</li><li><strong>易于操作</strong>：PiggyBac转座子载体的操作相对简单，不需要复杂的步骤或特殊的设备。这降低了实验的难度，提高了实验的成功率。</li><li><strong>可逆性</strong>：PiggyBac转座子载体的转座事件可以通过特定的方法逆转，恢复原始的基因组状态。这对于研究基因功能和疾病机制非常有用，因为它允许研究人员在实验结束后恢复正常的基因表达。</li></ol><p>这些优点使得PiggyBac转座子载体在基因克隆、基因治疗、基因功能研究等领域具有广泛的应用前景。</p><h3 id="PiggyBac转座子载体在基因治疗领域的应用有哪些案例或潜力？"><a href="#PiggyBac转座子载体在基因治疗领域的应用有哪些案例或潜力？" class="headerlink" title="PiggyBac转座子载体在基因治疗领域的应用有哪些案例或潜力？"></a><strong>PiggyBac转座子载体在基因治疗领域的应用有哪些案例或潜力？</strong></h3><h3 id="PiggyBac转座子载体在基因治疗领域的应用案例"><a href="#PiggyBac转座子载体在基因治疗领域的应用案例" class="headerlink" title="PiggyBac转座子载体在基因治疗领域的应用案例"></a>PiggyBac转座子载体在基因治疗领域的应用案例</h3><p>PiggyBac转座子载体是一种高效的基因传递工具，它在基因治疗领域展现出了巨大的潜力。以下是一些具体的应用案例：</p><ol><li><strong>遗传疾病治疗</strong>：PiggyBac转座子载体被用于治疗一系列遗传性疾病，包括肌肉萎缩症、杜氏肌营养不良症等。通过将正常的基因序列插入患者细胞内，可以纠正突变基因导致的疾病症状[1]。</li><li><strong>癌症治疗</strong>：在癌症治疗方面，PiggyBac转座子载体可以用来传递抗癌基因或者抑制肿瘤生长的因子。这种方法已经在某些类型的癌症治疗中显示出了积极的效果[2]。</li><li><strong>免疫系统调节</strong>：PiggyBac转座子载体还被用于增强免疫系统的功能，例如通过传递特定的基因来提高T细胞的活性，从而增强对癌细胞的攻击能力[3]。</li></ol><h3 id="PiggyBac转座子载体的潜在应用"><a href="#PiggyBac转座子载体的潜在应用" class="headerlink" title="PiggyBac转座子载体的潜在应用"></a>PiggyBac转座子载体的潜在应用</h3><p>除了上述已知的应用外，PiggyBac转座子载体在基因治疗领域还有很大的发展空间：</p><ol><li><strong>个性化医疗</strong>：随着基因组学的发展，未来可能能够根据每个人的遗传信息设计个性化的PiggyBac转座子载体，以更精确地治疗各种遗传性疾病[4]。</li><li><strong>多基因治疗</strong>：许多复杂的疾病涉及多个基因的异常。PiggyBac转座子载体可能能够同时修改多个相关基因，为这些疾病的治疗提供新的策略[5]。</li><li><strong>长期稳定表达</strong>：PiggyBac转座子载体具有长期稳定表达所传递基因的潜力，这对于需要持续治疗的疾病来说是非常有价值的[6]。</li></ol><p>综上所述，PiggyBac转座子载体在基因治疗领域的应用前景广阔，不仅在现有的治疗方法上有所突破，而且在未来的研究中也有望带来更多创新的治疗策略。</p><p><strong>PiggyBac转座子结构与机制</strong></p><p>PiggyBac转座子（粉纹夜蛾）是一个2475bp长的可自主转移元件，两末端分别有一个由13bp和19bp的TIR序列组成的亚末端重复序列，两端TIR序列之间的间隔分别是3bp（5’端）和31bp（3’端），在两个亚末端重复序列之间，有一个1.8kb的开放阅读框，编码由594个氨基酸组成、分子量大小为64KD的PiggyBac转座酶。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/%25E5%259B%25BE1_6zosLdY.png" alt="PiggyBac转座子"></p><p>PiggyBac属于II类转座子，通过“剪切-粘贴”机制移动，即从基因组一个位置转座到另一个位置，不留下序列本身（与I类启动子通过“复制-粘贴”的移动方式不同）。</p><p>通过对PiggyBac超家族成员序列比对结果分析，发现PiggyBac转座酶保守的氨基酸位点为D268、D346和D447，与许多其它的转座酶和逆转录酶的保守结构域DDE类似，这三个位点参与了几乎所有的转座活动，包括DNA切割、发夹结构形成和目的序列的插入。具体的整合过程如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/%25E5%259B%25BE2_W4z0VZU.png" alt="DNA切割、发夹结构形成和目的序列的插入"></p><p>PiggyBac转座酶结合到转座子DNA序列两端，开始精确地切割每条DNA链转座子DNA的3’端，形成3’-OH结构；之后3’-OH攻击互补链5’末端TTAA与转座子间的磷酸二酯键，导致互补链DNA断裂，释放转座子，同时转座子两端形成发夹结构；找到新的TTAA四碱基整合位点后，转座酶伸展转座子的发夹结构，暴露3’-OH，同时3’-OH攻击TTAA整合位点的5’端，形成新的磷酸二酯键；互补链及转座子释放位点处的单链缺口的修复由宿主因子完成，转座完成。</p><p><strong>PiggyBac转座子载体系统组成</strong></p><p>PiggyBac转座子在发现后经过了一系列优化和改造的过程，如转座酶密码子优化，以及两端TIR序列的简化，最后形成了一套完整的PiggyBac载体系统。PiggyBac载体系统成员主要有：一个辅助质粒：编码转座酶；一个转座子质粒：含优化的两端亚末端反向重复序列，中间是被转座区域，可插入我们想转座到宿主基因组中的目的基因序列。</p><p>实验时需同时将辅助质粒和转座子质粒共同转化靶细胞，辅助质粒编码的转座酶识别转座子质粒两端的TIR序列并切割，释放的被转座区被转座酶整合到宿主基因组中含TTAA序列的位点，并在被转座区两端出现TTAA重复序列。</p><p>在不降低转座效率的情况下，两端优化后的TIR序列间可插入10kb左右的序列，研究表明，在小鼠中通过受精卵注射的方式，用PiggyBac转座子载体在基因组插入细菌人工染色体（BACs，150kb-300kb），转座效率最高的达到了45%（F0代中有45%的小鼠携带了BACs）。</p><p><strong>应用</strong></p><p><strong>1. 作为非病毒载体</strong></p><p>与传统的病毒载体相比，PiggyBac具有以下几大优点：首先是安全性高、操作方便（可直接用质粒转化细胞）；其次是载体容量大（10kb-20kb），可实现多基因的共表达；第三是可通过调节转座子质粒和辅助质粒的比例，提高外源基因的整合效率，并且可通过反向PCR精确确定目的基因插入的位置；第四是再次转座后实现精确切离；第五是转座后不引起染色体重排等不稳定现象；最后是宿主范围广，转座效率高，较少依赖宿主因子。</p><p><strong>2. 基因治疗</strong></p><p>研究表明，PiggyBac转座系统在Hela、HEK293、CHO及H1299等细胞中高效转座，且携带的目的基因稳定表达，因而是很有吸引力的基因治疗候选载体之一。</p><p><strong>3. 突变工具</strong></p><p>PiggyBac再次转座偏向插入基因内部且插入位点分布较广，可用作基因插入突变的工具，这点为哺乳动物的基因组功能研究提供了较好的研究工具。</p><h4 id="常用载体信息："><a href="#常用载体信息：" class="headerlink" title="常用载体信息："></a>常用载体信息：</h4><p><strong>Super PiggyBac Transposase (PB200PA-1)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/8338a10df74e9b7a890af1ce80de184a.jpg" alt="img"></p><p>基本信息</p><p>质粒名称：Super PiggyBac Transposase (PB200PA-1)</p><p>出品公司：SBI</p><p>质粒别称：Super PiggyBac Transposase Expression Vector</p><p>质粒类型：PiggyBac转座子系统</p><p>启动子：rPolr2A</p><p>载体抗性：Ampicillin (氨苄青霉素)</p><p>载体介绍</p><p>Super PiggyBac Transposase Expression Vector。</p><p>Super PiggyBac Transposase (PB200PA-1)，需与PiggyBac Dual promoter (PB-CMV-MCS-EF1α-GreenPuro；PB513B-1) 配套使用。</p><p>如下：</p><p>Super PiggyBac Transposase (PB200PA1)转座酶表达质粒</p><p>PiggyBac Dual Promoter PB513B-1插入基因的骨架质粒</p><p>PB220PA-1(Excision only PiggyBac transposase)切除转座子质粒</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/ad91abf1fa6c4978b31a68c5aec4ead5.png" alt="img" style="zoom:50%;"><p>[^质粒信息]:                                             1-PB513B-1(PiggyBac Dual promoter) Map</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/34e8e45cba764422993f9f61a24cf2f6.png" alt="img" style="zoom:50%;"><p>[^质粒信息]:                                        2-Super PiggyBac Transposase (PB200PA-1) Map</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/f5cd3072bcfe47eead8c62c501d4c60d.png" alt="img" style="zoom:50%;"><p>[^质粒信息]:                                  3-PB220PA-1(Excision only PiggyBac transposase) Map</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/e3c763a8a4e4475382fc9a2e60b9642f.png" alt="img" style="zoom:50%;"><p>[^质粒信息]:                                                         pB-CAGGS-MCS-BSD Map</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/a71e04d29248476f954d4f6154665bd7.png" alt="img" style="zoom:50%;"><p>[^质粒信息]:                                      PB-TetOne-HA-FLAG-P2A-EGFP-puro Map</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/be48056e081f45fb9b0944ce76a1841b.png" alt="img" style="zoom:50%;"><p>[^质粒信息]:                                                        PB-TetOne-MCS-Hygro Map</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/ff7d90996e204ec8aa5b996774532530.png" alt="img" style="zoom:50%;"><p>[^质粒信息]:                                          PB-TetOne-MCS-P2A-EGFP-puro Map</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/1052e4dc635c49f897c510f70737dd70.png" alt="img" style="zoom:50%;"><p>[^质粒信息]:                                                  PB-TetOne-MCS-puro Map</p><p><a href="https://manu60.magtech.com.cn/biotech/CN/10.13523/j.cb.2203005#1">新颖研究</a></p><p><strong><a href="https://www.x-mol.com/paperRedirect/1431003974907707392">酶促生产的 piggyBac 转座子载体，用于高效非病毒制造 CD19 特异性 CAR T 细胞</a></strong></p><p>piggyBac 转座子系统为经济高效且简单的嵌合抗原受体 (CAR) T 细胞生产提供了一种非病毒替代方案。临床级 CAR T 细胞的生成需要严格遵守当前的良好生产规范 (cGMP) 标准。不幸的是，常用慢病毒或逆转录病毒载体的高成本限制了许多非商业学术机构临床级 CAR T 细胞的制造。在这里，我们提出了一个制造平台，基于线性 DNA 转座子和编码 piggyBac 转座酶的 mRNA 的共电穿孔，高效生成 CD19 特异性 CAR T 细胞（CAR19 T 细胞）。转座子是<em>在体外</em>酶法制备的通过 PCR，包含侧翼为 piggyBac 3’ 和 5’ 臂的 CAR 转基因。mRNA 通过<em>体外</em>转录类似地制备。CAR19 T 细胞在细胞因子白介素 (IL)-4、IL-7 和 IL-21 的组合中扩增，以防止 CAR T 细胞的终末分化。载体拷贝数（VCN）的精确控制是通过降低转座子DNA的浓度来实现的，该程序每电穿孔1×10 7 个外周血单核细胞（PBMC）后可产生高达1×10 8 个CAR19 T细胞。<em>体外</em>21天文化。生产的细胞含有 &gt;60% 的 CAR+ 细胞，VCN &lt; 3。总而言之，所描述的制造平台实现了直接的 cGMP 认证，因为转座子和转座酶是通过酶合成<em>在体外非</em>生物产生的。适用于高实验性、早期阶段CAR T细胞产品的高性价比生产。</p><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p>参考链接：</p><ol><li><a href="https://search.ebscohost.com/login.aspx?direct=true&profile=ehost&scope=site&authtype=crawler&jrnl=20951353&AN=151532377&h=UZ6GuuaKaZeXu/3gjEhwhdum8C0c1JtVG+QTk3EMj2kH50klbJEqeprDDWYzsJqTr6UuTisnb1urgb4wA3/MrA==&crl=c">三种方法对草地贪夜蛾基因组转座子的注释</a></li><li><a href="https://cjb.ijournals.cn/html/cjbcn/2022/12/gc22124371.htm">CRISPR相关转座元件的研究及应用进展</a></li><li><a href="http://journal05.magtech.org.cn/Jwk_ny/CN/article/downloadArticleFile.do?attachType=PDF&id=8813">猪诱导多能干细胞 (iPS)嵌合胚胎的制备</a></li><li><a href="http://159.226.67.71/bitstream/000000/9047/1/%E8%BD%AC%E5%9F%BA%E5%9B%A0%E5%9C%A8%E8%8B%B9%E6%9E%9C%E8%A0%B9%E8%9B%BE%E4%B8%8D%E8%82%B2%E6%98%86%E8%99%AB%E9%87%8A%E6%94%BE%E6%8A%80%E6%9C%AF%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8.pdf">转基因在苹果蠹蛾不育昆虫释放技术中的应用</a></li><li><a href="http://html.rhhz.net/XMSYXB/html/2017/10/20171001.htm">piRNA的形成及其在雌性动物中生物学功能研究进展</a></li><li><a href="http://biotech.aiijournal.com/CN/Y2020/V36/I3/29">精准高效外源 DNA 整合技术研究进展</a></li><li><a href="http://apmes.magtechjournal.com/CN/PDF/10.3969/j.issn.1005-0507.2018.04.010">艾美耳球虫转基因技术研究进展</a></li><li><a href="http://www.xml-data.org/XMSYXB/html/2022/9/1663916435532-501290390.htm">猪基因组结构变异研究进展</a></li><li><a href="http://www.cxcybjb.com/CN/abstract/abstract4772.shtml">蚕桑特色课程教学改革的思考–以“蚕桑生物技术”为例</a></li><li><a href="http://zgbjyx.cnjournals.com/sydwybjyx/article/pdf/202005016">大动物多能干细胞建立研究进展</a></li><li><a href="http://journal11.magtechjournal.com/Jwk_jcyxylc/CN/10.16352/j.issn.1001-6325.2022.06.010">功能基因筛选和鉴定策略的研究进展及其优缺点</a></li><li><a href="https://cjb.ijournals.cn/html/cjbcn/2021/2/gc21020655.htm">显微注射法制备转基因家蝇技术的建立</a></li><li><a href="http://bitebo.com/uploads/soft/201112/1_05101159.pdf">抗原表位研究方法进展</a></li><li><a href="http://journal11.magtechjournal.com/Jwk_jcyxylc/EN/10.16352/j.issn.1001-6325.2022.06.010">Advantages, disadvantages and research progress on strategies for screening and identifying functional genes</a></li></ol><p>- </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;脑图：&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/PB-17174312159232.png&quot; alt=&quot;PB&quot; style=&quot;zoom:50%;&quot;&gt;



&lt;p&gt;在我</summary>
      
    
    
    
    
    <category term="转座子" scheme="http://nikolahuang.github.io/tags/%E8%BD%AC%E5%BA%A7%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>mESCs建系</title>
    <link href="http://nikolahuang.github.io/2024/04/16/mESCs%E5%BB%BA%E7%B3%BB/"/>
    <id>http://nikolahuang.github.io/2024/04/16/mESCs%E5%BB%BA%E7%B3%BB/</id>
    <published>2024-04-16T04:53:52.000Z</published>
    <updated>2024-04-26T05:24:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实验概要"><a href="#实验概要" class="headerlink" title="实验概要"></a>实验概要</h4><p><strong>mESCs建系</strong></p><h4 id="主要试剂"><a href="#主要试剂" class="headerlink" title="主要试剂"></a>主要试剂</h4><p>细胞基础培养液、DPBS、0.25%<em>Trypsin</em>、0.1%明胶、兔抗鼠全血清原液、豚鼠补体、0.5%链蛋白酶、冲胚液、培养液A、mESCs培养液B</p><h4 id="主要设备"><a href="#主要设备" class="headerlink" title="主要设备"></a>主要设备</h4><p>35 mm、60 mm、100 mm培养皿、15 mL离心管、50 mL离心管、体视镜、注射器、镊子、虹膜剪</p><h4 id="实验材料"><a href="#实验材料" class="headerlink" title="实验材料"></a>实验材料</h4><p>小鼠（3.5 dpc），即见阴道栓后3.5天的怀孕小鼠</p><h4 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h4><h5 id="（1）胚胎的获得"><a href="#（1）胚胎的获得" class="headerlink" title="（1）胚胎的获得"></a>（1）胚胎的获得</h5><p>①取怀孕3.5 dpc的孕鼠，用断颈法处死。<br>②用75%酒精消毒孕鼠，尽量喷湿全身。<br>③打开腹腔，用虹膜剪和镊子修剪去脂肪和系膜（用镊子将子宫轻轻拉起，使系膜和脂肪张开，然后用虹膜剪紧贴子宫将系膜与子宫分离），从输卵管根部及子宫下端分叉处剪下双侧子宫，将双角子宫于阴道处剪断。<br><em>！注意：**冲胚时选择合适大小的镊子、剪刀，直镊、直剪。</em><br>④注射器吸入冲胚液CZB，配以剪平头的4＃至6＃针头，用镊子（最好是直头镊子）轻轻从一端（细端，即连接卵巢的一端）插入子宫腔内2～3 mm（注意，针头尖端很锐利，不要将子宫壁戳破），用镊子轻轻夹紧，吹入冲胚液（最后一滴若不滴下，可轻轻贴一下平皿侧壁使液滴进入平皿），再从另一端（粗端，即连接阴道的一端）插入，吹入冲胚液。<br><em>！注意<strong>：</strong>冲胚的针应事先剪成平头，灭菌，因为尖针头端很锐利，容易将子宫壁戳破。</em><br>⑤将盛有冲胚液的培养皿置于解剖镜下，用口控吸管（直径1.1～1.2 mm，末端直径约100 µm）吸取少量（充满毛细管尖端细管部分即可）细胞基础培养液（防止胚胎粘在毛细管壁上，无法吹出），用口控吸管将胚吸出。如果是早期囊胚或桑椹胚应该先在细胞基础培养液中培养过夜至晚期囊胚再进行处理。</p><h5 id="（2）mESCs的建系"><a href="#（2）mESCs的建系" class="headerlink" title="（2）mESCs的建系"></a>（2）mESCs的建系</h5><h6 id="1）内细胞团接种法建系"><a href="#1）内细胞团接种法建系" class="headerlink" title="1）内细胞团接种法建系"></a>1）内细胞团接种法建系</h6><p><strong><u>（1）免疫外科法分离内细胞团</u></strong><br>①去除透明带：将囊胚吹入0.5%链蛋白酶中，反复吹打囊胚，1-2分钟左右透明带逐渐变薄最终消失，立即将去除透明带的囊胚吸入冲胚液中，并反复吹洗。<br>②将胚胎移到CZB培养3 h，。<br>③将去除透明带的胚胎移入含兔抗小鼠IgG血清的DMEM培养液中（1:30），置于培养箱中处理30 min。<br>④将胚胎移入新鲜的豚鼠血清补体中处理胚胎10-15 min，溶解滋养层细胞。处理过程中，随时观察。当滋养层细胞膨大，呈透明空泡状即终止处理，用冲胚液洗涤3次，来回吹打去除滋养层细胞。<br><em>注意：将胚胎从兔抗鼠全血清原液移入豚鼠血清补体时，不用<strong>DPBS</strong>洗，直接放到补体中，处理效果较好；用<strong>DPBS</strong>洗后再放到补体中，处理效果不好。</em><br>⑤用冲胚液吹洗胚胎3次。<br>⑥将胚胎移回CZB滴中，培养24 h。<br>⑦如有需要重复第⑤～⑥步，重新用兔抗鼠抗体和豚鼠血清处理胚胎，去除残余的滋养层细胞。<br>⑧将去除滋养层细胞的内细胞团【受精卵发育为胚胎的过程中，随着细胞的分裂增殖依次经历卵裂期→桑椹胚→囊胚→原肠胚。细胞的分化则是从囊胚期开始的，在囊胚期，一部分个体较大的细胞聚集在胚胎（球形）一端，称为内细胞团，将来发育为胎儿的各种组织器官。】<br><strong><u>（2）接种内细胞团并建系</u></strong><br>（a）全内细胞团接种法<br>①将分离出来的内细胞团细胞移至mESCs培养液B培养液内，继续培养。<br>②培养48 h后，可见内细胞团生长，3～5天后内细胞团进一步增大，此时可以进行传代。<br>（b）消化接种法<br>①将内径0.5 mm，长100 mm玻璃管一端在火焰上灼烧、拉细，用砂轮将末端切断。准备末端口径比内细胞团稍大(约50µm)和稍小(约30µm)两种。<br>②用末端口径比内细胞团稍大的毛细管挑起内细胞团，吸至0.25%<em>Trypsin</em>消化液内，消化至3～4个细胞在一起的团块，加少许mESCs培养液B稀释0.25% <em>Trypsin</em>。<br>③将分散的内细胞团小块吸至准备好的饲养层上，在mESCs培养液B中培养。<br>④培养48 h后，可见胚胎干细胞小集落出现；3～4天，集落进一步增大；6～10天，可进行消化传代。</p><h6 id="2）全胚接种法建系"><a href="#2）全胚接种法建系" class="headerlink" title="2）全胚接种法建系"></a>2）全胚接种法建系</h6><p>  ①冲胚过程见本章“胚胎的获得”部分<br>②将冲出的囊胚吹入提前一天接种了饲养层细胞的4孔培养板，换用mES培养液A或者B，每孔中放5～7个囊胚；<br><em>！注意<strong>：</strong>冲出的胚比较易于聚集在皿的边缘，需要小心</em><br>③放入培养箱中培养。囊胚逐渐长大，最后贴壁，滋胚层展开，ICM不断增殖。<br><em>！注意<strong>：胚胎接种到饲养层细胞上之后，前几天不要动</strong>4<strong>孔培养板，因为这个时候</strong>ICM**还没有完全贴壁。</em><br>④培养4～6天后，ICM成为一团圆柱形细胞团（近似垂直于培养皿表面），将ICM进行消化传代；一般要培养6～7天，ICM才成为一团圆柱形细胞团，此时可以用机械切割的方法或者<em>Trypsin</em>消化的方法进行传代。此时将细胞的代次记为P1（即Passage 1）。成功建立的mESC系之后可以进行常规的传代、培养和冻存。mESCs细胞核大，有一个或几个核仁，胞核中多为常染色质，胞浆少，结构简单，细胞排列紧密，呈集落状生长，如图3-3所示。<br><em>！注意**：机械切割传代时要彻底去掉杂细胞，尽可能少的带入滋养层细胞；一个圆柱形内细胞团放到一个孔里。</em><br>*如果克圆柱形内细胞团完全从透明带孵化出来，可以用<strong>0.25%<strong>Trypsin</strong>消化传代，最好用含有</strong>1%<strong>鸡血清的</strong>0.25%Trypsin进行消化，消化过程中可在显微镜下观察，当细胞变得松散时即可用细胞基础培养液终止消化。*</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;实验概要&quot;&gt;&lt;a href=&quot;#实验概要&quot; class=&quot;headerlink&quot; title=&quot;实验概要&quot;&gt;&lt;/a&gt;实验概要&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;mESCs建系&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;主要试剂&quot;&gt;&lt;a href=&quot;#主要试剂&quot; cla</summary>
      
    
    
    
    
    <category term="类器官之胚胎干细胞" scheme="http://nikolahuang.github.io/tags/%E7%B1%BB%E5%99%A8%E5%AE%98%E4%B9%8B%E8%83%9A%E8%83%8E%E5%B9%B2%E7%BB%86%E8%83%9E/"/>
    
  </entry>
  
  <entry>
    <title>小鼠肝细胞原代培养实验</title>
    <link href="http://nikolahuang.github.io/2024/04/16/%E5%B0%8F%E9%BC%A0%E8%82%9D%E7%BB%86%E8%83%9E%E5%8E%9F%E4%BB%A3%E5%9F%B9%E5%85%BB%E5%AE%9E%E9%AA%8C/"/>
    <id>http://nikolahuang.github.io/2024/04/16/%E5%B0%8F%E9%BC%A0%E8%82%9D%E7%BB%86%E8%83%9E%E5%8E%9F%E4%BB%A3%E5%9F%B9%E5%85%BB%E5%AE%9E%E9%AA%8C/</id>
    <published>2024-04-16T03:50:43.000Z</published>
    <updated>2024-04-26T04:08:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小鼠肝细胞原代培养实验"><a href="#小鼠肝细胞原代培养实验" class="headerlink" title="小鼠肝细胞原代培养实验"></a>小鼠肝细胞原代培养实验</h1><p>小鼠肝细胞原代培养可用于：（1）用于细胞保种；（2）用于分子生物学研究；（3）用于基因治疗研究。</p><table><thead><tr><th align="center">实验方法原理</th><th>将<a href="https://pro.biomart.cn/lab-web/exp/316nrkcgo4078/32s8l18go3dih.html">小鼠</a>的<a href="https://pro.biomart.cn/lab-web/method/31ngch0go3bjr.html">肝细胞</a>从机体中取出，经胰酶、螯合剂（常用EDTA）处理，分散成单细胞，置合适的培养基中培养，使细胞得以生存、生长和繁殖。</th></tr></thead><tbody><tr><td align="center">实验材料</td><td><a href="https://www.biomart.cn/infosupply/99561839.htm">小鼠</a></td></tr></tbody></table><table><thead><tr><th align="center">试剂、试剂盒</th><th><a href="https://www.biomart.cn/infosupply/40669817.htm">DMEM</a> <a href="https://www.biomart.cn/infosupply/109665809.htm">无血清DMEM培养基</a> <a href="https://www.biomart.cn/infosupply/53350585.htm">胰酶</a> <a href="https://www.biomart.cn/infosupply/66240641.htm">PBS</a></th></tr></thead><tbody><tr><td align="center">仪器、耗材</td><td><a href="https://www.biomart.cn/product/s?wd=%E9%A5%AD%E7%9B%92&t=1">饭盒</a> <a href="https://www.biomart.cn/product/s?wd=%E7%BA%B1%E5%B8%83&t=1">纱布</a> <a href="https://www.biomart.cn/product/s?wd=%E5%89%AA%E5%AD%90&t=1">剪子</a> <a href="https://www.biomart.cn/product/s?wd=%E9%95%8A%E5%AD%90&t=1">镊子</a> <a href="https://www.biomart.cn/infosupply/21016911.htm">烧杯</a> <a href="https://www.biomart.cn/product/s?wd=%E5%B9%B3%E7%9A%BF&t=1">平皿</a> <a href="https://www.biomart.cn/infosupply/85114455.htm">研磨玻片</a> <a href="https://www.biomart.cn/infosupply/106391333.htm">滤网</a> <a href="https://www.biomart.cn/infosupply/81860291.htm">离心管</a> <a href="https://www.biomart.cn/infosupply/6328900.htm">6孔培养板</a> <a href="https://www.biomart.cn/infosupply/6285625.htm">吸管</a> <a href="https://www.biomart.cn/infosupply/76904069.htm">移液管</a> <a href="https://www.biomart.cn/infosupply/106413259.htm">手套</a> <a href="https://www.biomart.cn/infosupply/52455293.htm">微量加样器</a></td></tr></tbody></table><table><thead><tr><th align="center">实验步骤</th><th>1. 将小鼠断颈致死，置75%酒精泡2-3秒钟，取肝脏，置于盛有PBS的平皿中。     2. 剔除脂肪、结缔组织、血液等杂物，转移到另一个盛有PBS液的平皿中。         3. 用手术剪将脏器剪成小块（大小约1mm2），玻片研磨，转到离心管，离心（1 000 rpm，5 min）。         4. 视组织或细胞量加入5-6倍（3-5 ml）胰酶，37℃中消化20分钟，每隔5分钟振荡一次，或用吸管吹打一次，使细胞分离。          5. 加入3-5 ml含血清的培养液以中止胰酶消化作用。           6. 用100目孔径滤网滤过，除去未消化的大组织块。          7. 再次离心5 min，弃上清液。          8. 加入无血清培养液5 ml，冲散细胞，再离心一次，弃上清液。          9. 加入含血清的培养液1-2 ml（视细胞量），血球计数板计数。         10. 将细胞调整到5×10^5&#x2F;ml左右，转移至6孔培养板中，37℃下培养。</th></tr></thead><tbody><tr><td align="center">注意事项</td><td>1. 自取材开始，保持所有组织细胞处于无菌条件。细胞计数可在有菌环境中进行。 2. 在超净台中，组织细胞、培养液等不能暴露过久，以免溶液蒸发。 3. 凡在超净台外操作的步骤，各器皿需用盖子或橡皮塞盖住，以防止细菌落入。 4. 操作前要洗手，进入超净工作台后要用75％酒精或0.2％新洁尔灭擦拭手。试剂瓶口也要擦拭。 5. 点燃酒精灯，操作在火焰附近进行，耐热物品要经常在火焰上烧灼。金属器械烧灼时间不能太长，以免退火，且冷却后才能夹取组织。吸取过营养液的用具不能再烧灼，以免烧焦形成碳膜。 6. 操作动作要准确敏捷，但又不能太快，以防空气流动，增加污染机会。 7. 不能用手触及消毒器皿的工作部分，工作台面上的用品摆放要布局合理。 8. 瓶子开口后要尽量保持45°斜位。 9. 吸溶液的吸管等不能混用。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小鼠肝细胞原代培养实验&quot;&gt;&lt;a href=&quot;#小鼠肝细胞原代培养实验&quot; class=&quot;headerlink&quot; title=&quot;小鼠肝细胞原代培养实验&quot;&gt;&lt;/a&gt;小鼠肝细胞原代培养实验&lt;/h1&gt;&lt;p&gt;小鼠肝细胞原代培养可用于：（1）用于细胞保种；（2）用于分子生物学研</summary>
      
    
    
    
    
    <category term="类器官之肝脏" scheme="http://nikolahuang.github.io/tags/%E7%B1%BB%E5%99%A8%E5%AE%98%E4%B9%8B%E8%82%9D%E8%84%8F/"/>
    
  </entry>
  
  <entry>
    <title>纤毛相关细胞系的总结和体外培养</title>
    <link href="http://nikolahuang.github.io/2024/04/14/%E7%BA%A4%E6%AF%9B%E7%9B%B8%E5%85%B3%E7%BB%86%E8%83%9E%E7%B3%BB%E7%9A%84%E6%80%BB%E7%BB%93%E5%92%8C%E4%BD%93%E5%A4%96%E5%9F%B9%E5%85%BB/"/>
    <id>http://nikolahuang.github.io/2024/04/14/%E7%BA%A4%E6%AF%9B%E7%9B%B8%E5%85%B3%E7%BB%86%E8%83%9E%E7%B3%BB%E7%9A%84%E6%80%BB%E7%BB%93%E5%92%8C%E4%BD%93%E5%A4%96%E5%9F%B9%E5%85%BB/</id>
    <published>2024-04-14T12:04:57.000Z</published>
    <updated>2024-04-16T02:12:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mEPC的诱导分离纯化和培养"><a href="#mEPC的诱导分离纯化和培养" class="headerlink" title="mEPC的诱导分离纯化和培养"></a>mEPC的诱导分离纯化和培养</h2><p>脑室的室管膜细胞表面存在许多动纤毛,它们的协调摆动确保了脑脊液的正常流动 。 </p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240415001018943.png" alt="image-20240415001018943"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/cc9429803b24ad8dd907269aae122201.jpg" alt="img"></p><p>室管膜细胞缺陷可导致严重的神经系统疾病, 如脑积 水。 在发育过程中,室管膜细胞在小鼠出生后由<strong>室管膜祖细胞放射状胶质细胞</strong>( radial glia) 分化。 在这个分化过程中,<strong>中心粒</strong>由<strong>次胞质体</strong>在细胞顶端大量复制、聚集,而后迁移并固定在细胞质膜,在质膜上成熟成为基体。 动纤毛由九对在外周排列的微管束以及一组在中心的中央微管束(9+2)组成, 外周微管上由于动力蛋白的存在可以使纤 毛运动。 原代培养的室管膜细胞是研究脑部动 纤毛和相关疾病的重要体外模型。 通过免疫荧光染色的方法表征体外培养室管膜细胞分化及动纤毛形成不同时期的特点。 通过活细胞成像观察培养<strong>室管膜的纤毛运动</strong>, 为以 mEPC 为模型的研究奠定了基础。</p><h3 id="该实验的方法和使用的材料、动物如下："><a href="#该实验的方法和使用的材料、动物如下：" class="headerlink" title="该实验的方法和使用的材料、动物如下："></a>该实验的方法和使用的材料、动物如下：</h3><h4 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h4><p>实验动物 1 ~ 3 只 SPF 级 C57BL &#x2F; 6 健康小鼠,新生1 d, 体重约 1. 5 g,雌雄比均衡,购于北京斯贝福生物技 术有限公司【 SCXK(京) 2019-0010】</p><h4 id="主要试剂与仪器"><a href="#主要试剂与仪器" class="headerlink" title="主要试剂与仪器"></a>主要试剂与仪器</h4><p>DMEM 培养基( Corning,10013050)</p><p>L15 培养基(Solarbio,LA9510)</p><p>青霉素&#x2F;链霉素( Penicillin&#x2F;streptomycin, Solarbio, P1400 )</p><p>胎 牛 血 清 ( FBS, Newzerum, FBS-S500 )</p><p>磷酸盐缓冲液 ( D-PBS, Solarbio,D1040)</p><p>平衡盐溶液(D-Hank’ s,Solarbio, H1045)</p><p>木瓜蛋白酶( Papain,Solarbio,G8430)</p><p>脱氧核糖核酸酶(DNasel,Solarbio, D8071)</p><p>L-半胱氨酸( L-Cysteine, Solarbio, C0012)</p><p>胰蛋白酶抑制剂 (Trypsin inhibitor,Solarbio,T8031)</p><p>多聚 L-赖氨酸 (poly-L-Lysine,Solarbio,P8130)</p><p>胰蛋白酶(TrypsinEDTA, Solarbio, T1320 )</p><p>抗荧光淬灭封片液 ( Fluoromount-G, SouthernBiotech, K2820 )</p><p>DAPI (Solarbio, ID2250)</p><p>细胞培养小瓶 ( T25, Corning, 430639)</p><h4 id="抗体"><a href="#抗体" class="headerlink" title="抗体:"></a>抗体:</h4><p>anti-acetylated tubulin(Sigma,T6793,1 ∶ 500)</p><p>anti-γ-tubulin(Sigma,T6557,1∶500)</p><p>anti-βcatenin(Proteintech,51067-2-AP,1 ∶ 500)</p><p>用于免疫 荧光分析的二抗为与 Alexa Fluor 488 偶联的山羊抗鼠或 与 Alexa Fluor 568 偶 联 的 山 羊 抗 兔 抗 体 (Invitrogen,1 ∶ 750)。 倒置生物显微镜 ,超高分辨共聚焦显微镜,生物安全柜,二氧化碳培养箱.</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="25-cm2-培养瓶和-14-mm-玻片包被"><a href="#25-cm2-培养瓶和-14-mm-玻片包被" class="headerlink" title="25 cm2 培养瓶和 14 mm 玻片包被"></a>25 cm2 培养瓶和 14 mm 玻片包被</h5><p>为了增加培养小瓶对细胞的粘附性,采用<strong>多聚赖氨酸</strong>将小瓶底部包被,多聚赖氨酸可以增加培养皿表面正电荷从而加强细胞的贴壁生长。 </p><p>将多聚赖氨酸(poly-L-Lysine)粉末用无菌去离子水配制成 10 mg&#x2F;mL 的浓缩液,而后稀释成 0. 005%的工作液。 </p><p>每个 25 cm 2 培养小瓶加入 <strong>3 mL 多聚赖氨酸</strong>溶液, 37℃包被 1 h 或室温过夜包被。 </p><p>包被结束后吸出多聚赖氨酸工作液,用无菌去离子水冲洗 3 次并晾干。 </p><p>包被好的培养瓶在 4℃条件下可存放 4 周左右。 </p><h5 id="消化工作液及终止工作液的配置"><a href="#消化工作液及终止工作液的配置" class="headerlink" title="消化工作液及终止工作液的配置"></a>消化工作液及终止工作液的配置</h5><p>消化工作液的配制:   取 DMEM 培养基中加入木瓜蛋白酶(2 mg&#x2F;mL), DNaseI(0. 15 mg &#x2F; mL), L-半胱氨酸(0. 3 mg &#x2F; mL), 1%青霉素&#x2F;链霉素, 0. 22μm 微孔滤膜过滤后 4℃ 保存备用。 </p><p>终止工作液的配制:   取 L15 培养基中加入胰蛋白酶抑制剂( 1mg&#x2F;mL),DNaseI(0. 2 mg &#x2F; mL),10%胎牛血清, 0. 22 μm 微孔滤膜过滤后 4℃保存备用。</p><h4 id="小鼠室管膜细胞的分化培养"><a href="#小鼠室管膜细胞的分化培养" class="headerlink" title="小鼠室管膜细胞的分化培养"></a>小鼠室管膜细胞的分化培养</h4><p>以下操作步骤以 1 只小鼠为例：</p><p>将新生小鼠颈椎脱位处死后,用剪刀剪取小鼠头部、镊子剥离小鼠头部皮肤；（首先取出生 1 ~ 3 d 内的小鼠端脑组织,此时的小鼠大脑 内的神经胶质细胞分化程度低,利用此阶段的端脑 提取诱导分化室管膜细胞可以获得较高的成功率）</p><p>小心剔除头骨,并去除附着的组织与 血管；</p><p>将分离的小鼠脑组织放入含有 1%青霉素&#x2F;链霉素的 Hank’ s 溶液中,置于冰上；（分离过程中保持在冰上且冰浴的缓冲溶液中进行,可以大大提高胶质细 胞的存活率。）</p><p>用眼科剪剪去嗅球和小脑, 用 5 号镊子剥去端脑表面的脑膜,并用弹簧剪将其剪切成 0. 5 ~ 1 mm 大小的碎片；</p><p>用1000 μL移液器将所有脑组织碎片连同 Hank’ s 溶液一同转移至15 mL无菌离心管中；</p><p>800 r&#x2F;min 离心 1min;</p><p>吸出上清液,加入配制好的<strong>消化工作液</strong> 1 mL 重悬细胞；</p><p>37℃ 孵育 30 min；</p><p>消化结束后以 800 r&#x2F; min 离心 1 min,吸出上清液,加入配制的终止工作液 2 mL 重悬细胞静置 2 min；</p><p>800 r&#x2F; min 离心 1 min 后，吸出上清液，并以 2 mL L15 培养基重悬细胞，800 r&#x2F; min 离心 1 min;</p><p>吸出上清液,用 1 mL L15 培养基重悬细胞，并用 1000 μL 移液枪吹打悬液5次；</p><p>800 r&#x2F; min 离心 5 min 后;</p><p>移除上清液,并加入3 mL 含有 10% FBS 和 1%青霉素&#x2F;链霉素的 DMEM 完全培养基重悬细胞；</p><p>较少体积的重悬液是为了让细胞更好的吸附；</p><p>将细胞悬液小心接种到包被了多聚赖氨酸的 25 cm培养瓶中, 放入 37℃ ,  5%  CO2 培养箱中培养, <strong>标记为d1</strong>；</p><p>第 2 天(d2)吸弃旧培养基,加入 8 mL 新鲜37℃预热过的 DMEM 完全培养基,；</p><p>随后每隔 2 d 更换 1 次培养基至**第 7 天(d7)**；</p><p>第 7 天细胞铺满整个培养瓶底部，室温下将培养瓶放置在摇床上以 100 rpm 摇动培养 4 h 以去除粘附较差的神经元细胞；</p><p>吸弃旧培养基，加入 3 mL DPBS 清洗 1 次,再加入 1 mL Trypsin-EDTA 于 37℃ 消化 6 min,然后加入 4 mL 的 DMEM 完全培养基终止消化；</p><p>将细胞悬液收集至 15 mL 离心管中,于 800 r&#x2F; min 离心 5 min;</p><p>吸出上清液，加入 500 μL 的 DMEM 完全培养基重悬细胞；</p><p>1 只小鼠端脑大约可收集 200 ~ 300 万个细胞,以细胞计数板计数后,按照每孔 2 × 10^5 个细胞的数量滴加到玻片上;</p><p>此时滴加的液滴应在玻片上形成球形水珠，放入培养箱 中培养30 min;</p><p>待细胞粘附后，补加 DMEM 完全培养基;</p><p>24 h 后吸弃旧培养基,更换为含有 1% 青霉素&#x2F;链霉素的 DMEM（无血清）；</p><p>开始诱导细胞分化成室管膜细胞，记为 <strong>D0</strong>，每 <strong>3 ~ 4 d</strong> 更换培养基。（小鼠胶质细胞消化分离后均匀铺板,铺板后 (D2)换无血清培养基诱导分化,此时细胞进入分化阶段 D0）；</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240416101224017.png" alt="image-20240416101224017"></p><p>通过倒置相差显微镜观察细胞生长状况,细胞培养至 D3,细胞完全贴壁平铺在培养皿上,细胞形态变大变圆(图 2a) ; </p><p>饥饿培养 D6 时,部分细胞开始进行纤毛发生,并有极少数细胞形成可快速摆动的纤毛(图 2b) ; </p><p>D9 时细胞边界变得清晰可见,约有 1 &#x2F; 3 的细胞形成了多纤毛结 构( 图 2c) ; </p><p>分化培养进行到 D12 后, 培养的mEPC 细胞基本成熟,可观察到 MPEC 快速摆动的多纤毛(图 2d) ；</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240415153012250.png" alt="image-20240415153012250"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240415153044755.png" alt="image-20240415153044755"></p><p>当然也有商业化的产品：<a href="https://www.eiaab.com.cn/product-general-cn-primary_cells/MIC-iCell-n021/">https://www.eiaab.com.cn/product-general-cn-primary_cells/MIC-iCell-n021/</a></p><p><a href="http://www.51cells.cn/product/hanzhong_2763.html">汉中小鼠室管膜细胞（原代细胞）-武汉赛奥斯生物科技有限公司 (51cells.cn)</a></p><hr><h2 id="人肺类器官2D-3D-培养"><a href="#人肺类器官2D-3D-培养" class="headerlink" title="人肺类器官2D &amp; 3D 培养"></a>人肺类器官2D &amp; 3D 培养</h2><p><strong>人支气管上皮</strong></p><p>人呼吸道的支气管上皮层分为假复层（pseudostratified），纤毛（ciliated） 以及柱状（columnar）上皮。该区域主要有三种细胞类型：纤毛细胞 （ciliated cells），分泌细胞（secretory cells）（主要是分泌粘液的杯状细胞）和基底细胞（basal cells）。</p><p>支气管上皮作为保护屏障，防御各种吸入性伤害，例如毒素，污染物和病原体。屏障功能的维持主要基于于上皮的三个关键特征：</p><ol><li><p>紧密连接蛋白（tight junction proteins）维持着上皮的完整性，并且对于其作为物理屏障的功能至关重要。</p></li><li><p>分泌细胞分泌的粘液会捕获颗粒物质和病原体，然后通过纤毛细胞的协同将这些颗粒物质和病原体通运出气道。</p></li><li><p>粘液中含有抗菌肽（antimicrobial peptides）和炎症因子（inflammatory mediators）等保护性介质，形成了对病原体和有毒物质的化学和免疫屏障。</p></li></ol><p>呼吸道上皮的生理相关模型的需求正在日益增长，但其挑战仍在于如何在体外重现体内组织的复杂结构和功能。</p><p><strong>2D</strong> <strong>气-液界面培养</strong></p><p>多种细胞类型可用于人类呼吸系统的建模，包括永生化的呼吸细胞系（ 例如BEAS-2B细胞和16HBE14o-细胞）以及来自动物或人类供体的原代细胞。尽管使用永生化细胞系和动物原代细胞很普遍，但使用这些模型产生的数据并不直接适配于人类系统。传统培养人原代支气管上皮细胞的方法是将细胞浸没于培养基之下进行培养；但是，在该培养系统中的细胞无法进行粘膜纤毛分化。为了重现在体内观察到的伪分层粘膜纤毛表型（pseudostratified mucociliary phenotype），必须在气-液界面（AirLiquid Interface，ALI）上培养原代人支气管上皮细胞（primary human bronchial epithelial cells，HBEC）（图1）</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/20201208152828482848.png" alt="img"></p><p>气-液界面培养的主要特征是细胞的基底表面与液体培养基接触，而其顶端表面则暴露于空气中。常见的细胞接种方法是将细胞接种到细胞培养插件（cell culture insert）的可渗透膜上。在细胞培养初期，顶端和基底的腔室都需要添加培养基（图1A）。当细胞数量接近满板时，需要对细胞“airlift”，即吹干顶端腔室的培养基，并保留基底腔室的培养基（图1B）。该培养系统模拟了人气道中的情况，诱导细胞向粘膜纤毛表型分化。</p><p><video src="../../../../Desktop/CFAP91文章投稿初步材料/Air-Liquid Interface (ALI) Culture of Bronchial Epithelial Cells with PneumaCult™-ALI Medium - YouTube (1).mp4"></video></p><p><strong>气-液界面培养的生理相关性</strong></p><p>原代HBEC的气-液培养近年来越来越被认为是与呼吸系统生理学高度相关的重要培养系统。在气-液上培养的HBEC经历了高度的粘膜纤毛分化，从而形成了代表体内气道的体外模型。H&amp;E（hematoxylin and eosin）和PAS（periodic acid-Schiff）染色显示气-液界面培养物（图2A和 2C），如同体内支气管上皮一样（图2B和2D），表现出伪分层的形态，以及异种细胞群的组成，包括纤毛和粘液分泌（PAS阳性）细胞。</p><p>该模型的特征还在于体现出上皮的屏障功能，例如表达紧密连接蛋白和高细胞跨膜电阻（high transepithelial electrical resistance）。通过转录组分析与细胞对毒素、病原体等外源物质的生理反应实验，进一步证实了气-液界面培养物对气道建模的高度适用性。此外，对来自患有呼吸系统疾病（例如哮喘，囊性纤维化，慢性阻塞性肺病）供体的原代细胞进行气-液界面培养，可以重现体内疾病特征，从而建立可靠的体外研究模型。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/20201208152954705470.png" alt="img"></p><p><strong>实验流程简图</strong></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/20201208153041064106.png" alt="img"></p><p><strong>3D成球培养</strong></p><p><strong>实验流程及数据</strong></p><p><img src="http://www.jiayuanbio.com/upload/image/2020/20201208153053575357.jpg" alt="img"></p><p><strong>产品信息</strong></p><table><thead><tr><th>货号</th><th>名称</th></tr></thead><tbody><tr><td>05040</td><td>PneumaCult™-Ex Plus Medium</td></tr><tr><td>05001(2D)</td><td>PneumaCult™-ALI Medium</td></tr><tr><td>05021(2D)</td><td>PneumaCult™-ALI Medium with 12 mm Transwell® Insert</td></tr><tr><td>05022(2D)</td><td>PneumaCult™-ALI Medium with 6.5 mm Transwell® Insert</td></tr><tr><td>05050(2D)</td><td>PneumaCult™-ALI-S Medium</td></tr><tr><td>05060(3D)</td><td>PneumaCult™ Airway Organoid Kit</td></tr></tbody></table><hr><h2 id="小鼠-SVZ-The-Subventricular-Zone-细胞原代培养"><a href="#小鼠-SVZ-The-Subventricular-Zone-细胞原代培养" class="headerlink" title="小鼠 **SVZ(The Subventricular Zone)**细胞原代培养"></a>小鼠 **SVZ(The Subventricular Zone)**细胞原代培养</h2><p>——朱学良组 张伟</p><p>①解剖前 <strong>24 - 4h</strong> 要预先用 Fibronectin or laminin包被培养 SVZ 细胞的Flask&#x2F; 培养板&#x2F;其它</p><p>②解剖前新鲜配制 5ml 消化液，于 37℃水浴锅。等消化液从乳白色变成无色透</p><p>明后，用注射器+小滤器过滤除菌，待用。（5ml消化液大约消化 10-15只小鼠的SVZ组织）</p><p>③解剖前 1-2h，将手术工具、解剖显微镜、1ml 移液枪等置于超净台紫外杀菌。</p><p>临解剖前，手术工具在酒精灯上灼烧（<em>除最精细的镊子，即下图中的镊子，请勿灼烧！！！！！！可在照紫外前用酒精棉球擦一遍。同时注意小心保护它的精细尖端</em>）。或直接将手术工具浸泡于 75%酒精中。</p><p><strong>1.</strong> 取 <strong>10</strong> 只 <strong>P0</strong> 新生小鼠 <strong>SVZ</strong> 组织：</p><p>详见解剖视频：<a href="http://www.jove.com/details.stp?id=1938">http://www.jove.com/details.stp?id=1938</a>)<a href="http://www.jove.com/details.stp?id=1938">http://www.jove.com/details.stp?id=1938</a></p><p><strong>2.消化 SVZ组织：</strong></p><p>取材后。用 1ml枪头（剪去尖端，并在酒精灯上烧圆前端）将 SVZ组织转移至已过滤的消化液中，于 37℃消化 15-18min。</p><p><strong>3.终止消化：</strong></p><p>消化完成后，吸去消化液。加入 5ml 10％FBS DMEM+GPS于 SVZ组织中作用 1-2min，终止消化。（GPS: 明胶磷酸盐琼脂）</p><p><strong>4.打散细胞：</strong></p><p>吸去终止液后。加 1mL 10％ FBS DMEM+GPS，用 1mL的 Axygene枪头轻轻吹打 15-20次，避免吹出气泡，然后加入 3ml 10% FBS DMEM+GPS, 静置 1-2min，这样单个细胞在上清中，沉淀为组织块。将上清转移到新的 15ml离心管。剩下的组织块中再加入 1ml 10％ FBS DMEM+GPS继续吹打，再沉淀，再转移。弃掉无法打散的沉淀。</p><p><strong>5.将上清置于离心机中 1000-1500 rpm，离心 5min。</strong></p><p>6.离心后，轻轻的吸取弃去上清。将细胞用含 10％ FBS DMEM+GPS 重悬，铺入到<strong>预先24h用 Fibronectin包被的 Flask</strong>（<u>铺细胞前，Flask用 PBS轻轻洗 1-2遍）中，置37℃培养箱培养</u>。</p><p>7.第二天，换液(10％ FBS DMEM+GPS)。同时用 <strong>37℃ 预热的PBS</strong> 轻轻的尽量洗去未贴壁的 Neuron，洗 1-2遍。</p><p>8.第三天，用手掌，适度用力拍 Flask侧壁，拍除上层未贴壁的 neuron。 用 PBS洗一遍后，加入 10％ FBS DMEM+GPS。</p><p>9.第四天，Flask 内细胞长到 90-95%时，将细胞用 Trypsin 消化，平均铺入<strong>预先 24h 用 Fibronectin包被的 24孔培养板</strong>中。（10只小鼠的 <strong>SVZ细胞</strong>大约可铺入 8个 24孔板的孔，或 1.75个 6孔板的孔效果很好；新手亦可增大小鼠数量；此时 24孔板每个孔的细胞数目大约为 10-20万，尽量使细胞生长到第 5天晚上前，达到可以进行饥饿的密度。细胞也不宜铺得过分的密，<strong>如果此时部分区域细胞为上下两层，上层细胞会死亡后贴在活细胞上表面</strong>。）</p><p>10.第五天，当 24孔板内细胞面积变小，紧密排列，几乎呈方格状，颜色较深，此时可用 PBS洗去一些死细胞后，再加入适量新鲜培液，培养至少半天左右。再用 37℃ PBS洗三遍后，加入 0.5-1ml<strong>不含 FBS</strong>的 DMEM+DAPT+GPS（DAPT效应不明显~），进行饥饿培养。</p><p>[总之，就是要让一层干净的活细胞，排挤足够紧密，<strong>形成紧密连接和锚定连接后饥饿</strong>。否则饥饿后细胞变瘦变小，不够紧密的区域会产生空洞、无细胞斑块。<strong>饥饿前不除去死细胞，也会产生同样的状况</strong>。]</p><p>每两三天用 DMEM+<strong>DAPT</strong>+GPS进行一次全换液。</p><p>11.<strong>饥饿 5-7 天</strong>后（DMEM+<strong>DAPT</strong>+GPS），可进行固定，免疫荧光观察。（<em>一般饥饿3-4天后光镜观察可见纤毛</em>）</p><h4 id="包被："><a href="#包被：" class="headerlink" title="包被："></a>包被：</h4><p>Fibronectin(Cat.#341631)，每瓶 5mg&#x2F;5ml 。4℃融化后，4ul和 10ul分装，-20℃保存。</p><p>包被时，用 无菌PBS 1:100 稀释后使用。一个 Flask 用 4ml 稀释后的 Fibronectin包被，过夜包被后使用。</p><p>24孔板每个孔用 250ul稀释后的 Fibronectin 包被，过夜</p><p>后使用。</p><h4 id="Dissection-Solution"><a href="#Dissection-Solution" class="headerlink" title="Dissection Solution:"></a>Dissection Solution:</h4><p>18.8g NaCl         161mM</p><p>0.74g KCl           5mM</p><p>0.26g MgSO<sub>4</sub>     1 mM</p><p>0.86g CaCl         3.7mM</p><p>2.4g Hepes          5mM</p><p>2.0g Glucose       5.5mM</p><p>0.004g Phenol Red （可以不加）</p><p>配制好以后，定容到 2L，将 pH值调到 7.4，用 0.2um的灭菌过滤器过滤除菌，置于 4℃冰箱保存。</p><h4 id="Enzymatic-Solution"><a href="#Enzymatic-Solution" class="headerlink" title="Enzymatic Solution:"></a>Enzymatic Solution:</h4><p>5ml Dissection Solution</p><p>1mg L-Cysteine ( SIGMA Cat .No 30089)</p><p>50μl EDTA (50mM, pH 8.0)</p><p>50μl CaCl<sub>2</sub> (100mM)</p><p>7.5μl NaOH (1M)</p><p><strong><u>? ul Papain（Worthington Bio Corp，Cat. No. LS003126）</u></strong></p><h5 id="Papain量计算"><a href="#Papain量计算" class="headerlink" title="Papain量计算:"></a>Papain量计算:</h5><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240416004405285.png" alt="image-20240416004405285"></p><p>必须在使用前配制，配制好以后在培养箱中温育至澄清透明，待用。</p><p>附：SVZ培养细胞形态展示：</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240415194817318.png" alt="image-20240415194817318"></p><hr><h2 id="以小鼠肾小管-IMCD3-细胞株-探讨纤毛生成和上皮细胞极化的关系"><a href="#以小鼠肾小管-IMCD3-细胞株-探讨纤毛生成和上皮细胞极化的关系" class="headerlink" title="以小鼠肾小管 IMCD3 细胞株 探讨纤毛生成和上皮细胞极化的关系"></a>以小鼠肾小管 IMCD3 细胞株 探讨纤毛生成和上皮细胞极化的关系</h2><p>大多数的动物细胞具有纤毛。纤毛主要由外层的膜包覆中心的微管所组成，中心的微管称为轴丝，轴丝是由母 亲中心粒当作基体作为地基，向上构筑成双联体九排的微管，并环绕成圆柱形的构造，而基体上的远程附器和细胞膜结合，使纤毛向外长出细胞表面。</p><p>纤毛发生病变可导致多种疾病，如<strong>原发性支气管炎</strong>、<strong>肝脏</strong>和<strong>肾脏的多囊性增生</strong>等， 由此可看出纤毛对于许多细胞的功能具有极大的影响力。</p><p>纤毛的生成路径有 2 种：细胞<strong>内</strong>和细胞<strong>外</strong>路径。</p><p>小鼠肾小管 <strong>IMCD3细胞 株</strong>的纤毛是借由<strong>细胞外</strong>路径生成，细胞外路径就是在<strong>一般二维培养</strong>的情况下， 可观察到母亲中心粒移动到细胞膜附近，再向外长出纤毛；</p><p><strong>视网膜色素上皮细胞株</strong>和<strong>成纤维细胞株</strong>的纤毛则是借由 细胞内路径，在此路径中，母亲中心粒维持在细胞中心的位置就可直接长出纤毛。</p><p>在极化的上皮细胞中，纤毛发育的过程起始于<strong>母亲中心粒</strong>，必须从细胞核附近移动到细胞顶端膜附近，再由远程附器结合在顶端膜上，作为基体向细胞顶端长出纤毛，凸出顶端膜表面以<strong>感测细胞外界讯号</strong>。</p><p>然而，在细胞外路径中， 母亲中心粒是如何移动至顶端膜附近以及如何辨别细胞顶端和底端的方向性目前仍然不清楚。</p><p>该篇文章作者以小鼠肾小管 IMCD3 细 胞 株， 在 去 血 清 的 刺 激 诱 导 下， 使 IMCD3 细胞长出纤毛，再以免疫荧光染色分析闭锁小带与生成纤毛的关系。 并利用克隆形成实验，将 <strong>IMCD3 细胞株分为 4 类形态</strong>，也进一步发现在三维培养中，<u>4 种细胞形态皆无法排列成空腔构造</u>。</p><p>最后建立载体 DNA，以绿色荧光标示纤毛蛋白，在活细胞中追踪基体的移动及纤毛生成的过程。</p><h4 id="结果部分的个人概述："><a href="#结果部分的个人概述：" class="headerlink" title="结果部分的个人概述："></a>结果部分的个人概述：</h4><ol><li><strong>闭锁小带与纤毛生成的密切关系</strong>：<ul><li>研究发现，在小鼠肾小管IMCD3细胞株中，具有完整闭锁小带结构的细胞更容易形成纤毛。</li><li>这一发现揭示了闭锁小带的完整性可能是纤毛生成的一个重要条件，特别是在细胞外路径中，纤毛的生成与闭锁小带的结构密切相关。</li><li>闭锁小带可能提供了必要的细胞结构支持，使得纤毛能够在正确的位置形成，从而保证细胞功能的正常进行。</li></ul></li><li><strong>纤毛生长位置对细胞功能的影响</strong>：<ul><li>纤毛的生长位置对细胞接收外界信号至关重要。在具有完整闭锁小带的细胞中，纤毛生长在细胞顶端，这有助于细胞有效地感测和响应外界环境。</li><li>如果纤毛未能在细胞顶端正确生长，可能会导致细胞无法正常接收信号，进而影响细胞功能，甚至可能导致疾病的发生。</li><li>因此，纤毛的正确位置对于细胞的正常生理功能至关重要。</li></ul></li><li><strong>细胞极性、空腔构造形成与分裂方向性</strong>：<ul><li>研究表明，具有完整闭锁小带的细胞不仅能形成立体的空腔构造，而且在细胞分裂时表现出正确的方向性。</li><li>这种分裂方向性对于维持细胞群体的整体结构和功能至关重要。细胞分裂时沿着闭锁小带的切线方向进行，有助于保持细胞极性和组织结构的完整性。</li><li>这一发现强调了闭锁小带在维持细胞极性和指导细胞分裂方向中的重要作用。</li></ul></li><li><strong>细胞密度与闭锁小带完整性的独立性</strong>：<ul><li>研究中观察到，即使在细胞密度增加的情况下，闭锁小带的完整性也不会因此而提高。</li><li>这一结果表明，闭锁小带的完整性是由细胞本身的属性决定的，而不是由外部环境因素如细胞密度所影响。</li><li>这进一步证实了IMCD3细胞株中存在不同特性的细胞群，而不是单一细胞类型在不同密度下的变化。</li></ul></li><li><strong>母亲中心粒在纤毛生成中的核心作用</strong>：<ul><li>通过使用荧光标记技术，研究明确显示了纤毛是以母亲中心粒为基底向外生长的。</li><li>这一发现证实了母亲中心粒在纤毛生成过程中的核心作用，为理解纤毛的形成机制提供了重要线索。</li><li>研究还指出，未来将进一步探究母亲中心体、高基氏体与纤毛形成的关系，这将有助于更深入地了解纤毛生成的详细路径和机制。</li></ul></li><li><strong>磷脂酰肌醇在细胞极性和纤毛生成中的作用</strong>：<ul><li>研究提出，闭锁小带可能通过限制磷脂酰肌醇（PIP2和PIP3）在细胞膜上的分布，从而影响细胞极性和纤毛的生成。</li><li>在极性细胞中，顶端细胞膜富含PIP2，而底端细胞膜富含PIP3，这种分布有助于基体在顶端位置生成纤毛。</li><li>缺乏闭锁小带的细胞可能无法正确区分顶端和底端的磷脂酰肌醇分布，导致基体无法在正确的位置生成纤毛。</li></ul></li></ol><hr><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p>[1]张源,武慧渊.小鼠室管膜细胞体外培养及多纤毛形成过程分析[J].中国实验动物学报,2022,30(03):370-375.</p><p>[2]Wang L, Wen X, Wang Z, et al. Ciliary transition zone proteins coordinate ciliary protein composition and ectosome shedding. <em>Nat Commun</em>. 2022;13(1):3997. Published 2022 Jul 9. doi:10.1038&#x2F;s41467-022-31751-0</p><p>[3]Meng X, Xu C, Li J, Qiu B, Luo J, Hong Q, Tong Y, Fang C, Feng Y, Ma R, Shi X, Lin C, Pan C, Zhu X, Yan X, Cong Y. Multi-scale structures of the mammalian radial spoke and divergence of axonemal complexes in ependymal cilia. Nat Commun. 2024 Jan 8;15(1):362. doi: 10.1038&#x2F;s41467-023-44577-1. PMID: 38191553; PMCID: PMC10774353.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mEPC的诱导分离纯化和培养&quot;&gt;&lt;a href=&quot;#mEPC的诱导分离纯化和培养&quot; class=&quot;headerlink&quot; title=&quot;mEPC的诱导分离纯化和培养&quot;&gt;&lt;/a&gt;mEPC的诱导分离纯化和培养&lt;/h2&gt;&lt;p&gt;脑室的室管膜细胞表面存在许多动纤毛,它们的协</summary>
      
    
    
    
    
    <category term="类器官之纤毛" scheme="http://nikolahuang.github.io/tags/%E7%B1%BB%E5%99%A8%E5%AE%98%E4%B9%8B%E7%BA%A4%E6%AF%9B/"/>
    
  </entry>
  
  <entry>
    <title>蛋白代谢多组学研究思路和方法随笔</title>
    <link href="http://nikolahuang.github.io/2024/04/07/%E8%9B%8B%E7%99%BD%E4%BB%A3%E8%B0%A2%E5%A4%9A%E7%BB%84%E5%AD%A6%E7%A0%94%E7%A9%B6%E6%80%9D%E8%B7%AF%E5%92%8C%E6%96%B9%E6%B3%95%E9%9A%8F%E7%AC%94/"/>
    <id>http://nikolahuang.github.io/2024/04/07/%E8%9B%8B%E7%99%BD%E4%BB%A3%E8%B0%A2%E5%A4%9A%E7%BB%84%E5%AD%A6%E7%A0%94%E7%A9%B6%E6%80%9D%E8%B7%AF%E5%92%8C%E6%96%B9%E6%B3%95%E9%9A%8F%E7%AC%94/</id>
    <published>2024-04-07T15:16:40.000Z</published>
    <updated>2024-04-25T17:06:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一期介绍了关于组学数据的一些基本分析方法，当我们那搭配样本的组学数据之后，能够基于基因的表达量和样本的分组信息进一步筛选biomarker（idea1、idea2），同时进一步结合样本的临床、生理病理、生化等作为一种性状数据（idea3），整合基因的表达，筛选出受到基因表达影响的某种关键性状相关基因集，常见的方法如下。</p><h3 id="1-idea1-差异分析-功能分析"><a href="#1-idea1-差异分析-功能分析" class="headerlink" title="1.idea1 差异分析+功能分析"></a>1.idea1 差异分析+功能分析</h3><p>对基因的表达量进行不同组间的差异分析或者共表达分析，然后结合数据库的注释结果，分析基因功能或者互作关系，最终目的是找到有生物学意义的差异表达基因。</p><h4 id="1-1-差异分析"><a href="#1-1-差异分析" class="headerlink" title="1.1 差异分析"></a>1.1 差异分析</h4><p>当获得了可以进行分析的数据之后，我们可以继续基于表达丰度，在大量的样本研究中寻找不同组件的差异表达基因或者蛋白。 </p><p>其中，转录组的差异分析使用DESeq2、EdgeR方法，不过目前研究发现，大样本量的研究中，这两种方法也存在假阳性的情况，所以个人建议使用Wilcoxon rank sum test的非参数检验进行分析。  蛋白组的差异分析经常用方差分析、T检验以及基于DEqMS的R包进行差异分析。关于DEqMS的R包使用，这里有一个简单的例子：</p><p>DEqMS（Differential Expression analysis for Quantitative Mass Spectrometry）是一个用于基于质谱的定量蛋白质组学数据差异表达分析的R包。它可以帮助研究人员识别在不同条件或组之间表达水平有显著变化的蛋白质。</p><ol><li><p><strong>安装和加载DEqMS包</strong><br>如果你尚未安装DEqMS包，请先安装它。在R中，你可以使用以下命令安装：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="punctuation">(</span><span class="operator">!</span>requireNamespace<span class="punctuation">(</span><span class="string">&quot;BiocManager&quot;</span><span class="punctuation">,</span> quietly <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">    install.packages<span class="punctuation">(</span><span class="string">&quot;BiocManager&quot;</span><span class="punctuation">)</span></span><br><span class="line">BiocManager<span class="operator">::</span>install<span class="punctuation">(</span><span class="string">&quot;DEqMS&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>然后加载DEqMS包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>DEqMS<span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>准备数据</strong><br>DEqMS需要两个主要的数据输入：蛋白质定量值和对应的蛋白质注释信息。定量值通常来自于质谱仪器的输出，而注释信息则包含了蛋白质的 accession number、基因符号等。<br>假设您已经有了一个包含蛋白质定量值的dataframe，名为<code>protein_expression</code>，以及一个包含蛋白质注释信息的dataframe，名为<code>protein_annotations</code>。</p></li><li><p><strong>数据预处理</strong><br>在进行差异表达分析之前，通常需要对数据进行预处理，例如去除缺失值、标准化等。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设我们的定量数据在名为Intensity的列中</span></span><br><span class="line"><span class="comment"># 我们将使用DEqMS中的normalize()函数进行标准化</span></span><br><span class="line">normalized_data <span class="operator">&lt;-</span> DEqMS<span class="operator">::</span>normalize<span class="punctuation">(</span>protein_expression<span class="operator">$</span>Intensity<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将标准化后的数据合并回原来的dataframe</span></span><br><span class="line">protein_expression<span class="operator">$</span>Normalized_Intensity <span class="operator">&lt;-</span> normalized_data</span><br></pre></td></tr></table></figure></li><li><p><strong>设置比较组</strong><br>在进行差异表达分析之前，您需要定义要比较的组别。这通常通过创建一个设计矩阵来实现。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设我们有两个组别：对照组和治疗组</span></span><br><span class="line"><span class="comment"># 我们创建一个名为Group的列，其中对照组为1，治疗组为2</span></span><br><span class="line">protein_expression<span class="operator">$</span>Group <span class="operator">&lt;-</span> ifelse<span class="punctuation">(</span>protein_expression<span class="operator">$</span>Condition <span class="operator">==</span> <span class="string">&quot;Control&quot;</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建设计矩阵</span></span><br><span class="line">design <span class="operator">&lt;-</span> model.matrix<span class="punctuation">(</span><span class="operator">~</span><span class="number">0</span> <span class="operator">+</span> protein_expression<span class="operator">$</span>Group<span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>design<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Control&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Treatment&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>进行差异表达分析</strong><br>使用DEqMS包中的<code>runDEqMS()</code>函数进行差异表达分析。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设我们关注的是治疗组与对照组的差异</span></span><br><span class="line"><span class="comment"># 设置对比矩阵，这里我们关注治疗组相对于对照组的差异</span></span><br><span class="line">contrast.matrix <span class="operator">&lt;-</span> makeContrasts<span class="punctuation">(</span>Treatment <span class="operator">-</span> Control<span class="punctuation">,</span> levels <span class="operator">=</span> design<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行差异表达分析</span></span><br><span class="line">DE.results <span class="operator">&lt;-</span> DEqMS<span class="operator">::</span>runDEqMS<span class="punctuation">(</span>protein_expression<span class="punctuation">,</span> design<span class="punctuation">,</span> contrast.matrix<span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>结果解读</strong><br><code>DE.results</code>中包含了差异表达分析的结果，您可以查看哪些蛋白质在不同的组别中显著差异表达。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看显著差异表达的蛋白质</span></span><br><span class="line">significant.proteins <span class="operator">&lt;-</span> DE.results<span class="punctuation">[</span>DE.results<span class="operator">$</span>padj <span class="operator">&lt;</span> <span class="number">0.05</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>可视化</strong><br>DEqMS包也提供了一些可视化工具，帮助您更直观地查看分析结果。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制火山图</span></span><br><span class="line">volcanoPlot<span class="punctuation">(</span>DE.results<span class="punctuation">,</span> logFC.cutoff <span class="operator">=</span> <span class="number">0.58</span><span class="punctuation">,</span> p.cutoff <span class="operator">=</span> <span class="number">0.05</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制MA图</span></span><br><span class="line">MAplot<span class="punctuation">(</span>DE.results<span class="punctuation">,</span> cutoff <span class="operator">=</span> <span class="number">0.05</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>以上步骤仅为一个简单的示例，实际使用时，你可能需要根据具体的数据格式和分析需求进行调整。DEqMS包的官方文档提供了更详细的参数设置和函数说明。</p></li></ol><hr><p>此外，线性回归分析用于评估基因丰度与其他因素之间的关系，用于特征基因的筛选。线性，也就是可以用一个量化的解释变量来预测一个量化的响应变量； 回归则是通过历史数据进行预测。我们如果想要更好的了解基因集之间的一些潜在联系，可以考虑使用LASSO回归方法（least absolute shrinkage and selection operator）。</p><p>LASSO(Least Absolute Shrinkage and Selection Operator)是最常用的方法之一，<strong>以缩小变量集为核心思想的压缩方法，使某些不重要变量的回归系数变为0，从而选择对因变量影响较大的自变量并计算出相应的回归系数</strong>，进行下游分析，交叉验证用于确证结果中的取值是否最佳。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240425225421625.png" alt="image-20240425225421625"></p><h4 id="1-2功能分析"><a href="#1-2功能分析" class="headerlink" title="1.2功能分析"></a>1.2功能分析</h4><p>功能分析旨在系统性地揭示显著表达变化基因的功能内涵及其在复杂生物过程中的作用机制，需要明白下面这些事情</p><h5 id="1）-目标明确：基因功能与通路解析"><a href="#1）-目标明确：基因功能与通路解析" class="headerlink" title="1）. 目标明确：基因功能与通路解析"></a><strong>1）. 目标明确：基因功能与通路解析</strong></h5><p><strong>基因功能探索</strong>：</p><ul><li><strong>分子功能</strong>：揭示显著差异基因在生物化学反应、分子互动、结构构成等方面的特定功能，如酶活性、受体结合、信号转导等。</li><li><strong>生物过程</strong>：定位差异基因参与的生理或病理过程，如细胞周期调控、免疫应答、代谢途径、神经传导等。</li><li><strong>细胞组分</strong>：阐明差异基因在细胞结构、亚细胞器、细胞间通讯等层面的作用，如细胞膜、线粒体、细胞核、分泌囊泡等。</li></ul><p><strong>通路解析</strong>：</p><ul><li><strong>关键通路识别</strong>：聚焦与研究目的密切相关的显著变化通路，如癌症相关的PI3K&#x2F;AKT&#x2F;mTOR通路、炎症反应的NF-κB通路、细胞凋亡的Caspase通路等。</li><li><strong>通路动态</strong>：分析通路内基因的整体表达趋势（上调、下调）和相对丰度变化，揭示通路在特定条件下的激活、抑制或重塑状态。</li></ul><p><strong>2）多维度数据整合与深度解析</strong></p><p><strong>基因注释</strong>：</p><ul><li><strong>详细注释信息</strong>：从GO、KEGG、Reactome、DO等数据库获取差异基因的详细注释信息，包括但不限于：GO术语、通路名称、疾病关联、药物靶点等。</li><li><strong>层次化注释</strong>：按照分子功能、生物过程、细胞组分三个层次进行注释，构建差异基因的多层次生物学属性图谱。</li></ul><p><strong>富集分析</strong>：</p><ul><li><strong>统计学检验</strong>：<ul><li><strong>超几何检验</strong>：针对每个预定义的生物学类别（如GO术语、KEGG通路），计算差异基因的富集概率，评估其在该类别中的过表达或欠表达是否显著。</li><li><strong>多重校正</strong>：应用FDR校正或其他方法控制假阳性率，确保富集结果的统计学可靠性。</li></ul></li><li><strong>全局表达谱分析</strong>：<ul><li><strong>GSEA</strong>：根据整个基因集在表达谱中的排名，评估预定义基因集（如MSigDB中的C2、C5集合）与样本分组间的关联强度，识别在整体丰度变化中具有显著意义的基因集。</li><li><strong>权重得分</strong>：计算基因集的NES（Normalized Enrichment Score）或ES（Enrichment Score），反映基因集的富集程度和方向。</li></ul></li></ul><p><strong>调控网络构建</strong>：</p><ul><li><strong>蛋白质互作网络</strong>：利用STRING数据库，基于实验验证、同源性推断、文本挖掘等多种证据来源，构建差异蛋白间的直接或间接互作关系网络。</li><li><strong>网络特性分析</strong>：<ul><li><strong>核心蛋白识别</strong>：计算节点的度、介数、聚类系数等网络指标，识别在网络中占据中心位置、可能发挥关键调控作用的核心蛋白。</li><li><strong>模块划分</strong>：运用社区检测算法，将网络划分为多个功能相关的子模块，揭示潜在的调控子系统。</li></ul></li></ul><p><strong>多层次关联</strong>：</p><ul><li><strong>转录因子靶基因预测</strong>：利用ENCODE、ChIP-seq等数据资源，预测差异基因作为特定转录因子靶点的可能性，揭示转录调控网络的变化。</li><li><strong>miRNA调控分析</strong>：结合miRNA表达数据和靶基因预测软件（如TargetScan、miRanda），分析差异基因是否受到差异表达miRNA的调控。</li><li><strong>表观遗传学关联</strong>：考察差异基因的DNA甲基化、组蛋白修饰、染色质开放性等表观遗传标记的变化，揭示表观遗传调控与基因表达变化的关联。</li></ul><p><strong>3）生物学意义诠释与应用前景</strong></p><p><strong>结果解读</strong>：</p><ul><li><strong>生物学机制推测</strong>：结合富集分析结果和现有文献，推测显著通路或功能在研究背景下的具体作用机制，如通路激活如何驱动肿瘤进展、特定功能如何影响细胞分化等。</li><li><strong>因果关系推理</strong>：根据差异基因在通路中的位置、功能和表达变化，推断其在特定生物学过程中的因果作用，如上游激酶的激活如何导致下游效应基因的表达上调。</li></ul><p><strong>可视化展示</strong>：</p><ul><li><strong>富集结果可视化</strong>：绘制条形图、火山图、富集热图等，直观展示显著富集的GO术语、KEGG通路及其统计显著性。</li><li><strong>网络图可视化</strong>：利用Cytoscape等工具绘制蛋白质互作网络、转录因子调控网络等，通过节点颜色、大小、形状等视觉元素展示基因属性和网络特性。</li></ul><p><strong>实验验证与应用导向</strong>：</p><ul><li><strong>候选基因&#x2F;通路验证</strong>：设计qPCR、Western blot、CRISPR&#x2F;Cas9敲除&#x2F;过表达、小分子药物处理等实验，验证候选基因的功能效应、基因-通路关联、基因-表型关联等。</li><li><strong>临床应用潜力评估</strong>：<ul><li><strong>诊断标志物</strong>：分析差异基因或通路在患者队列中的表达模式，评估其作为疾病分类、预后预测或疗效监控标志物的潜力。</li><li><strong>治疗靶点</strong>：研究针对核心蛋白或关键通路的小分子抑制剂、抗体药物、基因疗法等，评估其作为治疗策略的有效性和安全性。</li></ul></li></ul><p>因此，功能分析是一项深入而细致的研究工作，它通过多维度数据整合、深度的生物信息学解析、严谨的生物学意义诠释和实验验证，全面揭示基因表达数据背后的生物学故事，解释相关的疾病致病机制和蛋白作用机制。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240425233416109.png" alt="image-20240425233416109"></p><hr><h4 id="1-3-相关性分析"><a href="#1-3-相关性分析" class="headerlink" title="1.3 相关性分析"></a>1.3 相关性分析</h4><p>相关性分析是指对两个或以上的具有潜在相关性的变量进行的关联分析，根据变量的变化模式&#x2F;规律，利用得到的相关系数来评估两个或以上的变量元素的相关密切程度。相关系数一般介于-1~1之间，绝对值越靠近1，相关性越强，其中-1为完全负相关，1为完全正相关，0为不相关。</p><p>1）<strong>Pearson相关系数</strong>（也称为皮尔逊积矩相关系数）基于协方差的概念，它是衡量两个随机变量间线性相关程度的统计量。其计算公式为：</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240426003851803.png" alt="image-20240426003851803"></p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240426005207009.png" alt="image-20240426005207009" style="zoom:33%;"><p>计算过程中，首先通过标准化处理消除量纲影响和数据尺度差异，然后计算变量间协方差与各自标准差的乘积，最终得到一个无量纲的系数。只有当数据满足正态分布且变量间存在线性关系时，Pearson相关系数才最具解释力。</p><p>2）<strong>Spearman秩相关系数</strong>是一种非参数统计方法，它基于秩次统计而非原始数值进行计算。其基本思想是将每个变量的所有观测值按照大小排序，赋予相应的秩次，然后计算这两个秩序列间的相关性。计算公式为：</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240426005526918.png" alt="image-20240426005526918" style="zoom:50%;"><p>由于其计算过程不涉及原始数值，而是关注变量间的排序关系，因此对数据分布类型和异常值不敏感，<strong>适用于非正态分布数据和等级数据的关联分析</strong>。它基于每个变量的排名值而非原始数据，使用单调函数来描述两个变量之间的关系程度，获取两个变量元素之间的变化趋势。那么当数据符合正态分布时，分析效率上Spearman与Pearson是等价的。Spearman相关系数同样取值于-1到1之间，性质与Pearson相关系数类似。</p><p>常用可视化包括：热图、桑基图、线性散点图等。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240426005813429.png" alt="image-20240426005813429"></p><p><strong>应用场景与实例</strong></p><p><strong>Pearson相关应用实例</strong>：在金融投资领域，研究者可能运用Pearson相关分析股票价格变动与宏观经济指标（如GDP增长率、失业率等）的关系。若发现两者间存在显著的正相关，投资者可能会据此调整投资策略，预期在经济向好时股票市场表现也将提升。</p><p><strong>Spearman相关应用实例</strong>：在教育心理学研究中，为探究学生的学习动机与学习成绩之间的关联，但收集到的数据可能存在极端值或非正态分布，此时选择Spearman相关更为合适。即使某些学生的动机得分或成绩偏离常态，只要其相对排序保持一致，Spearman相关仍能有效捕捉动机与成绩间的单调递增或递减关系。</p><p><strong>可视化展示</strong></p><p><strong>热图</strong>：在多元相关性分析中，热图以矩阵形式呈现各变量间的相关系数，颜色深浅代表相关强度。例如，研究者可通过热图快速识别一组健康指标（如血压、血糖、体重等）之间的强弱关联，深红色区块表示高度正相关，深蓝色区块表示高度负相关，白色或浅色表示无明显关联。</p><p><strong>桑基图</strong>：尽管桑基图主要用于能量流动、资源分配等流程分析，但在特定条件下也可用于展示变量间复杂的相关结构。例如，通过构建桑基图可以直观展示不同行业板块股票收益率之间的资金流动与相关性，箭头宽度代表资金流量，颜色编码表示相关性强弱，从而揭示股市中各板块间的联动效应。</p><p><strong>线性散点图</strong>：这是最直观的二维相关性可视化工具。每个数据点代表一对变量观测值，点的分布模式揭示了变量间是否存在线性趋势。例如，绘制年龄与收入的散点图，若点大致沿一条直线分布，且斜率为正，说明年龄与收入呈正相关；反之，若点分布呈反向倾斜，说明两者负相关。通过拟合最佳线性回归线（通常为最小二乘法），可进一步量化这种线性关系。</p><p><strong>平行坐标图 (Parallel Coordinates Plot)</strong>:<br>这种图形适合展示多维数据集中变量间的相关性。每个数据点在多个垂直平行轴上表示其在各个维度上的值，通过连接同一数据点在各轴上的投影形成一条折线。观察折线的分布和交叉情况，可以直观识别变量间的关联模式。例如，在研究汽车性能时，可以使用平行坐标图展示车辆重量、马力、燃油效率、价格等多个属性之间的相互关系，寻找是否存在某些属性组合（如高马力与高价格）经常同时出现。</p><p><strong>网络图 (Network Graph)</strong>:<br>网络图用于展示变量之间的复杂关联结构，特别是当变量间的关系并非简单的一对一对应时。节点代表变量，边的权重或颜色表示变量间的相关性强度。在网络图中，簇状结构或中心节点的存在往往暗示着变量间的强相关或核心关联。例如，在社交媒体数据分析中，可以构建用户行为网络图，节点代表用户，边的权重依据用户间的互动频率（如共同发帖、点赞、评论等）确定，从而揭示用户群体间的社交网络结构及其相关性。</p><p><strong>雷达图 (Radar Chart)</strong>:<br>雷达图特别适用于展示个体在多个维度上的表现及其相对优势或劣势。虽然雷达图主要用来比较不同实体在多变量上的整体概况，但它也能间接反映变量间的相关性。如果一个实体在某几个变量上的得分高度相关（即同时高或同时低），那么这些变量在雷达图上的“尖角”会靠近，形成明显的关联特征。例如，在评估员工绩效时，雷达图可以展示员工在技能、沟通能力、项目完成度、团队协作等多方面的得分，通过观察图形形态，可以判断各项能力间是否存在协同效应或互补关系。</p><p><strong>气泡图 (Bubble Chart)</strong>:<br>气泡图是散点图的一种变体，除了用点的位置表示两个变量的关系外，还通过点的大小表示第三个变量的值。这种图形有助于同时展示三元关系中的相关性和变量强度。例如，在分析公司市值、利润和员工数量之间的关系时，可以用横纵坐标分别表示市值和利润，气泡大小代表员工数量。观察气泡的分布和大小变化，可以发现市值与利润之间的线性关系，以及员工数量对此关系的影响。</p><p><strong>马赛克图 (Mosaic Plot) 或条形图矩阵</strong>:<br>这两种图形常用于展示分类变量间的联合分布和条件概率，特别适用于离散型数据。它们通过矩形面积的相对大小来直观表示各类别组合的频数或比例，从而揭示类别间的关联性。例如，在市场调研中，可以创建马赛克图或条形图矩阵展示消费者性别、年龄层次与购买偏好（如电子产品、服装、食品等类别）的联合分布，直观看出哪些性别和年龄段的消费者更倾向于购买特定类型的商品。</p><p><strong>动态可视化</strong>:<br>随着数据科学和信息技术的发展，动态可视化越来越受到青睐。通过动画、滑动条或交互式界面，用户可以随时间推移观察相关性变化，或者在不同参数设置下探索相关性模式。例如，可以制作一个动态散点图，随着时间滑块移动，显示股票价格与市场情绪指标（如新闻情绪分析得分）之间的实时相关性变化，帮助投资者理解市场情绪如何影响股价波动。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一期介绍了关于组学数据的一些基本分析方法，当我们那搭配样本的组学数据之后，能够基于基因的表达量和样本的分组信息进一步筛选biomarker（idea1、idea2），同时进一步结合样本的临床、生理病理、生化等作为一种性状数据（idea3），整合基因的表达，筛选出受到基因表</summary>
      
    
    
    
    
    <category term="多组学数据分析" scheme="http://nikolahuang.github.io/tags/%E5%A4%9A%E7%BB%84%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>代谢组学数据分析基本知识</title>
    <link href="http://nikolahuang.github.io/2024/04/05/%E4%BB%A3%E8%B0%A2%E7%BB%84%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>http://nikolahuang.github.io/2024/04/05/%E4%BB%A3%E8%B0%A2%E7%BB%84%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</id>
    <published>2024-04-05T15:17:27.000Z</published>
    <updated>2024-04-05T16:50:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>代谢组学的数据分析包括：对检测到的原始数据进行数据预处理、数据质控、代谢物定量分析、生信数据挖掘等。</p><h3 id="1-数据预处理"><a href="#1-数据预处理" class="headerlink" title="1.数据预处理"></a>1.数据预处理</h3><p>软件解析测序的色谱、质谱得到的图谱转变为可进行计算的数据文件，就得到了原始数据，一般的解析软件包括：Progenesis QI、<strong>MassProfiler Professional (MPP)<strong>、</strong>Sieve</strong>、<strong>MetaboAnalyst</strong>、<strong>Simca-p</strong>（代谢组学中最常用的统计分析软件）</p><p>如何使用上述的软件这里就不一一赘述了，网上有很多教程。</p><p>为了消除存在的外在因素干扰或人为实验因素影响，预处理数据可以增加数据的稳定性，常见的预处理数据步骤主要包括：</p><ul><li>降噪：通过<strong>匹配滤波</strong>和<strong>移动窗平均滤波</strong>等方法，去除掉数据中来自样品制备或仪器产生的背景噪音。</li><li>基线校准：当没有物质时，获得的谱图强度应该为0，所有的测得的谱图强度都应以此为基准，因此需要调零校准，可以通过将同样一谱图的所有数据值减去最小值，来让基准线为0.</li><li>解卷积：由于物质的保留时间太接近，或者峰的宽度过大，导致多个色谱的峰没有分离而共流出时，代表多个物质的峰就会重叠或交叉在一起。解卷积，就是利用数学计算方法将色谱中未能锋利的组分重新区分。</li><li>峰对齐：为了校准由于仪器不稳定、样品pH和浓度等因素带来的时间偏移，需要进行峰的对齐，让所有样本中代表同一物质的谱峰保留时间一致。</li><li>峰识别：确定峰的起点和终点。</li><li>峰的特征提取：提取峰高或计算峰下的覆盖面积。</li><li>归一化处理：为了使不同浓度的样品之间能够具有可比性，我们需要对数据进行峰面积的归一化处理，常用的处理方法有Ctr（Center scaling），UV（unit variance scaling）和Par（Pareto scaling）。  Ctr也叫<strong>中心化</strong>，将原始数据减去每列变量的均值；UV是数据Ctr化之后，除以列变量的标准差（SD）；Par是数据Ctr后处理列变量标准差的算术平方根。 Ctr将原始数据转化成离原点更近的新数据，可调节代谢物的高低浓度差异；UV的优势是所有的变量都拥有同样的权重，等同于相当的地位，缺点是某些检测误差可能会被放大；Par相比于UV则更接近院士测量数据，缺点是对变化倍数大的变量会更加敏感，容易造成不必要的变换结果。</li></ul><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240401233909049.png" alt="image-20240401233909049" style="zoom:50%;"><h3 id="2-数据的质控（QC）"><a href="#2-数据的质控（QC）" class="headerlink" title="2.数据的质控（QC）"></a>2.数据的质控（QC）</h3><p>样品较多时，我们想要获得可靠且高质量的代谢组学数据，则需要在检测时利用QC样本进行质控；QC样本时所有待测样品等量的混合物，不过若是临床样本，由于数量较多，采样时间长，则可以挑选代表性样品制备合适的QC。每间隔一定样品，添加一组QC，这样就能提供数据重复性的有效评价标准。</p><p>理论上所有的QC样本要都是相同的，不过在样品提取、监测分析过程会产生系统的误差，导致QC之间也会有差异，如果RSD&lt;30%的特征峰，比例能达到70%以上，则说明数据良好，差异越小说明方法稳定性越高，数据质量也就越好，这<strong>体现在PCA分析图上，也就是QC样本越密集，数据越可靠</strong>。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240401234526629.png" alt="image-20240401234526629" style="zoom:50%;"><h3 id="3-代谢物的定性和定量"><a href="#3-代谢物的定性和定量" class="headerlink" title="3.代谢物的定性和定量"></a>3.代谢物的定性和定量</h3><p><strong>代谢物的定性：</strong>GC-MS数据库成熟，数据量足够，一级质谱可定性，即了解化合物的分子量；二级谱图可以对化合物的结构进行分析。我们将GC质谱图与NIST、GMD数据库进行比对，将LC-MS的二级谱图与Metlin、HMDB、MzCloud等数据库或者实验室自建的数据库中的谱图进行匹配比对，就可以的搭配化合物具体的注释信息。</p><p><strong>代谢物的定量：</strong>GC-MS他一般时通过化合物色谱峰面积来对物质进行定量的，当遇到分离度不好，色谱峰形不好，比如严重拖尾的时候，峰的面积测定就会引起很大的误差，此时可考虑使用峰高法进行定量。峰高法，顾名思义通过测量色谱图中某个组分峰的高度来对该组分进行定量。峰高法的基本原理是假设峰高（或峰面积）与组分的量成正比。具体来说，峰高法涉及以下步骤：</p><ol><li><strong>选择参考峰</strong>：首先，需要选择一个已知浓度的标准品作为参考峰。这个标准品应该是纯净的，并且浓度已知。</li><li><strong>建立标准曲线</strong>：通过分析不同浓度的标准品，可以得到一系列峰高与浓度对应的数据。利用这些数据，可以绘制出标准曲线。标准曲线通常是一条直线，表明峰高（或峰面积）与浓度之间的关系是线性的。</li><li><strong>测量样品峰高</strong>：在分析实际样品时，测量与标准品相对应的组分的峰高。</li><li><strong>定量分析</strong>：将样品峰高与标准曲线进行比较，根据标准曲线可以确定样品中组分的浓度。</li></ol><p>峰高法的优点是操作简单，不需要复杂的仪器设备。但是，这种方法假设色谱峰的形状和宽度在分析过程中保持不变，这在实际操作中可能并不总是成立。此外，峰高法对基线的波动比较敏感，因此对于基线不稳定的色谱图，定量结果可能会有较大误差。</p><p>LC-MS&#x2F;MS利用一级质谱得到的木例子峰面积进行定量。非靶通常选择内标法进行相对定量。将内标物质，定量的加到样品中，根据预测组分和内标峰的面积或者峰高的比值进行相对定量分析。</p><h3 id="4-代谢组学的生信分析"><a href="#4-代谢组学的生信分析" class="headerlink" title="4.代谢组学的生信分析"></a>4.代谢组学的生信分析</h3><h4 id="4-1-聚类分析"><a href="#4-1-聚类分析" class="headerlink" title="4.1 聚类分析"></a>4.1 聚类分析</h4><p>聚类分析一般有两个作用，包括：通过全部代谢物的表达谱对样本进行聚类，分析样本重复性的好坏以及分组情况；或者把表达模式相近的代谢物进行聚类，去大致的观察<strong>代谢物丰度在各组中的变化规律</strong>，常用图形包括<strong>聚类树状图</strong>和<strong>热图</strong>。</p><ol><li><strong>主成分分析（PCA）</strong>: PCA是一种广泛使用的数据降维算法，它通过找出数据矩阵的方差最大方向作为第一主成分（PC1），然后在与PC1正交的平面中找出方差最大的方向作为第二主成分（PC2），以此类推。这样建立的低维平面或空间有助于分析和概览整个数据集，揭示数据集中的分组、趋势以及离群值  。</li><li><strong>偏最小二乘判别分析（PLS-DA）</strong>: PLS-DA结合了降维和回归模型，通过多元线性回归技术找到数据集和类别数据集之间的最大协方差方向，建立两个独立数据集的潜在关联分析方法。</li><li><strong>正交偏最小二乘判别分析（OPLS-DA）</strong>: OPLS-DA是PLS-DA的改进版本，它根据数据集Y的差异将数据集X的差异分为两个部分，一部分代表与Y相关的差异，另一部分代表与Y不相关的差异。OPLS-DA可以更好地区分组间差异，提高模型的有效性和解析能力。</li><li><strong>差异倍数分析</strong>: 这是一种简单的分析方法，用于快速考察各个代谢物在不同组别之间的含量变化大小。它通过计算实验组与对照组的含量比值（Fold Change，FC）来实现。</li><li><strong>显著性检验</strong>: 这包括t-test、方差分析（ANOVA）等方法，用于区分变量是否具有统计显著性。在代谢组学中，由于变量较多，常需要进行多重假设检验并对p值进行校正，以减少Ⅰ类错误和假阳性。</li><li><strong>韦恩图</strong>: 也称文氏图，用于反映不同集合之间的交集和并集情况。在代谢组学中，韦恩图通常用于展示不同比较组之间的共有和独特的差异代谢物。</li><li><strong>箱线图</strong>: 箱线图用于展示不同组间代谢物含量的分布情况。在R语言中，常用的包如ggplot2和ggpubr可用于绘制箱线图，并可以添加样本散点、坐标标题以及p值等统计信息 。</li></ol><p>数据集通常为一个<strong>N × K</strong>的矩阵（X矩阵），N表示N个样本数，每一行代表一个样品， K表示K个变量，每一列代表一个变量，在代谢组学中变量通常是指代谢物含量。最常用的分析方法如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/bb4be438cdaa02232c87ea6fc4a50eb5.png" alt="img"></p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240402234016514.png" alt="image-20240402234016514" style="zoom:33%;"><h4 id="4-2-多元统计分析"><a href="#4-2-多元统计分析" class="headerlink" title="4.2 多元统计分析"></a>4.2 多元统计分析</h4><p>代谢组学数据具有多为且某些变量间高度相关，运用传统的单变量分析无法快速、充分、准确地挖掘数据内潜在的信息。 因此对采集的多维数据，一般进行将为和归类分析（聚类），来挖掘和提炼最有用的信息。</p><p>常用的方法包括：无监督学习的PCA分析，有监督的PLS-DA分析、在PLS-DA基础上，可以加入正交信号矫正的有监督性OPLS-DA分析。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240403230538945.png" alt="image-20240403230538945" style="zoom:33%;"><h4 id="4-3-差异分析"><a href="#4-3-差异分析" class="headerlink" title="4.3 差异分析"></a>4.3 差异分析</h4><p>代谢组学分析中，除了通常用到的Student’s t检验、ANOVA检验来获得P值筛选不同比较组间的差异代谢物，通常还结合多元统计分析PL-DA或者OPLS-DA的VIP值来进行筛选。也就是差异代谢物的阈值条件：OPLS-DA模型中 VIP≥1，且Student T test的P＜0.05. 常用的图形包括差异柱状图、火山图、VIP图、z-score、热图和ROC图等，进行必要的数据展示。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240403232839397.png" alt="image-20240403232839397"></p><h4 id="4-4-差异KEGG富集分析"><a href="#4-4-差异KEGG富集分析" class="headerlink" title="4.4 差异KEGG富集分析"></a>4.4 差异KEGG富集分析</h4><p>在生物体内，不同的基因之间，相互协调来行使生物学功能，基于Pathway的分析有助于更进一步的了解基因的生物学功能和生物学研究的意义，甚至为临床的诊断和治疗提供一些思路、方法和理论基础。</p><p>KEGG是有关pathway的主要数据库，pathway显著性富集分析，应用超几何检验分析，找出与整个背景（基因、蛋白谱、QC样本等）相比，在差异代谢物中显著富集的pathway，从而确定差异代谢物残余的最主要生化代谢途径和信号转导方式。</p><p>常见的图形包括：富集柱状图、富集通路图、富集热图、富集圈图、富集差异气泡图等。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240404001039675.png" alt="image-20240404001039675" style="zoom:33%;"><p>传统的KEGG富集分析如果没有找到与研究相关的代谢通路，可以利用MSEA分析(Metabolite Set Enrichment Analysis)。 MSEA的QEA pattern类似于基因分析中的GSEA富集分析，主要利用The Small Molecule Pathway Database(<a href="https://smpdb.ca/">SMPDB</a>)数据库来进行对所有样本中鉴定到的代谢物的确定，以及解释一些重要的生物学通路中，代谢物的变化模式。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240404095441803.png" alt="image-20240404095441803" style="zoom:33%;"><h4 id="4-5-趋势分析"><a href="#4-5-趋势分析" class="headerlink" title="4.5 趋势分析"></a>4.5 趋势分析</h4><p>趋势分析，是针对多个连续样本（至少三个）的特征（样本间包含特定的时间、空间或者处理剂量的大小顺序）来对代谢物的表达模式（多阶段中表达曲线的形状）进行聚类。通过趋势分析可以找到和可视化代谢物在连续变化的组中丰度的变化趋势。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240404101453551.png" alt="image-20240404101453551" style="zoom:33%;"><p>注：基于生信分析的组学数据挖掘思路，目前我了解的基本可以分成三步走，简单点就是<strong>俯瞰-拉近-聚焦</strong>，也就是整体到局部再到某个单一的点的过程。 以测序得到的海量数据作为起点，不断根据研究目标，引导和矫正数据挖掘的方向，最后确定对研究目标其重要调控的基因、蛋白、代谢物、小分子等。</p><p>代谢组学，借助<strong>差异分析</strong>、<strong>趋势分析</strong>、<strong>WGCNA</strong>分析等等，完成海量数据挖掘的第一步，完成了俯瞰到拉近的转换，获得<strong>目标代谢物集合</strong>。需要思考的是，这些<strong>代谢物具备哪些调控功能</strong>？<strong>能影响哪些生物学途径（拉近到聚焦的过程）</strong>。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240404102823696.png" alt="image-20240404102823696" style="zoom:33%;"><h3 id="5-常见代谢组学富集分析"><a href="#5-常见代谢组学富集分析" class="headerlink" title="5.常见代谢组学富集分析"></a>5.常见代谢组学富集分析</h3><p>富集分析常见的就是<strong>KEGG、MetPA和MSEA</strong>了。</p><p>三种分析策略都是以代谢物的定性定量表作为起始点，无论是自己平台还是公司的质谱检测，都可以得到这个数据表，表格中需要包含：代谢物名称、在不同样本中的风度信息等。 以此为基础借助富集分析和其他的一些分析手段找到目标代谢途径和目标代谢物。</p><h4 id="5-1-KEGG富集"><a href="#5-1-KEGG富集" class="headerlink" title="5.1 KEGG富集"></a>5.1 KEGG富集</h4><p>特定实验背景下，代谢物的丰度变化并非随机，往往会为了响应实验处理呈现出特定的变化趋势。 例如，动物受疾病感染后，脂类代谢、氨基酸代谢、胆汁酸代谢过程失调； 植物生长、变色过程中，花青素、类胡萝卜素、类黄酮等有机物的合成过程中，相关代谢物会随着发育成熟逐渐上调累积。</p><p>以此作为出发点，我们在特定的取样策略下，通过分析目标代谢物（包括差异代谢物、目标变化趋势代谢物、目标模块代谢物等）所在的pathway，来了解实验处理影响哪些代谢途径和内部的一些代谢物的调控方式，再结合研究目的锁定重要的代谢物。</p><h5 id="5-1-1-KEGG分析原理"><a href="#5-1-1-KEGG分析原理" class="headerlink" title="5.1.1 KEGG分析原理"></a>5.1.1 KEGG分析原理</h5><p>借助**超几何检验(Hypergeometric test)**判断:  质谱检测的有KEGG注释信息的代谢物（背景代谢集）在某个pathway中的代谢物数目占背景代谢集的比例，是否显著大于目标代谢集中有KEGG注释信息的代谢物（前景代谢集)在某个pathway中的代谢物数目的比例。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405011808041.png" alt="image-20240405011808041" style="zoom:33%;"><p>简单来说，其实就是上图中判断20%是否显著大于5%，根据得到的P value和FDR value判断前景代谢集主要参与的代谢途径。<strong>当P value或FDR value小于0.05时，则为显著富集的代谢途径</strong>。说明相比于其它途径而言，显著富集的代谢途径更易响应实验处理，出现异常调控。<br>对于KEGG富集分析，除了要有质谱检测的全部代谢物外，还要先有一个前景代谢集(又称目标代谢集，如图右侧的差异代谢集)。前景代谢集可通过前面说到的差异分析、趋势分析、WGCNA分析获得。</p><p>[^注]: 质谱检测得到的Name是代谢物的名称并非代谢物的KEGG注释结果，代谢物KEGG注释完成后用C_ID表示, 这个比较像基因的Symbol和ID号。代谢物开展KEGG富集分析时，需要先完成KEGG注释。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405012604262.png" alt="image-20240405012604262" style="zoom:33%;"><p>​                          超几何检验公式</p><p>[^注]: 公式中N为质谱检测得到的所有代谢物中有KEGG注释的代谢物数目; n为N中差异代谢物数目;M为所有代谢物中注释为某特定pathway的代谢物数目;m为注释为某特定pathway的差异表达代谢物数目。</p><h5 id="5-1-2-KEGG富集分析实现方法"><a href="#5-1-2-KEGG富集分析实现方法" class="headerlink" title="5.1.2 KEGG富集分析实现方法"></a>5.1.2 KEGG富集分析实现方法</h5><p>这里放一个基因和蛋白的富集方法，其他同理。<br>进入Metascape主页(<a href="http://www.metascape.org),将候选基因直接复制粘贴到gene/">www.metascape.org)，将候选基因直接复制粘贴到gene</a> list输入框中(Step1)，点击Submit按钮上传基因列表。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405014823504.png" alt="image-20240405014823504" style="zoom:50%;"><p>MetaScape支持的GeneID主要有Symbol、RefSeq、Ensembvl、Unipro、UCSC五种类型，下面使用Symbol进行演示：</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405120718749.png" alt="image-20240405120718749" style="zoom:50%;"><p>然后，在step2中选择对应的物种，我们这里选择人(H.sapiens)，点击<strong>Custom Analysis</strong>进行自定义分析。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405120952724.png" alt="image-20240405120952724" style="zoom:50%;"><p>在弹出的页面中，直接选择第4个选项(Enrichment)，仅勾选KEGG Pathway，取消勾选其他的数据来源，如下，然后勾选“跳过蛋白互作分析”</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405121130255.png" alt="image-20240405121130255" style="zoom:50%;"><p>然后继续点击<strong>Enrichment Analysis</strong>蓝色按钮进行富集分析。</p><p>分析完成之后，快速浏览富集的结果，之后点击<strong>Analysis Report Page</strong>，进入分析报告页面。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405121311431.png" alt="image-20240405121311431" style="zoom:50%;"><p>在分析报告页面中，点击<strong>Gene List Report Excel Sheets</strong>按钮，下载分析结果表格。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405124710592.png" alt="image-20240405124710592" style="zoom:50%;"><p>下载的分析结果表格如下，用于作图的数据主要在sheet2表格中。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405124909408.png" alt="image-20240405124909408" style="zoom:50%;"><p>完成KEGG富集分析之后，接下来我们使用ggplot2包对分析结果进行可视化！</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#载入相关的R包;</span></span><br><span class="line">library<span class="punctuation">(</span>readx1<span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span>ggplot2<span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span>tidyr<span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span>dplyr<span class="punctuation">)</span></span><br><span class="line"><span class="comment">#读入Excel数据</span></span><br><span class="line">dt <span class="operator">&lt;-</span> read_excel<span class="punctuation">(</span><span class="string">&quot;metascape_result.tobcfo25h.xlsx&quot;</span><span class="punctuation">,</span>sheet <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#预览数据;</span></span><br><span class="line">head<span class="punctuation">(</span>dt<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405125240168.png" alt="image-20240405125240168" style="zoom:33%;"><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提取用于作图的列;</span></span><br><span class="line">df <span class="operator">&lt;-</span> dt<span class="punctuation">[</span><span class="punctuation">,</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment">#对InTerm_InList列进行拆分;</span></span><br><span class="line">df <span class="operator">&lt;-</span> separate<span class="punctuation">(</span>df<span class="punctuation">,</span>InTerm_InList<span class="punctuation">,</span>sep <span class="operator">=</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span> into <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;count&quot;</span><span class="punctuation">,</span><span class="string">&quot;InTerm&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#转换数据类型;</span></span><br><span class="line">df<span class="operator">$</span>Count <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>df<span class="operator">$</span>count<span class="punctuation">)</span></span><br><span class="line"><span class="comment">#根据Pvalue选择Top10的pathway进行绘制;</span></span><br><span class="line">fig_data<span class="operator">&lt;-</span> df <span class="operator">%&gt;%</span> top_n<span class="punctuation">(</span><span class="operator">-</span><span class="number">10</span><span class="punctuation">,</span>LogP<span class="punctuation">)</span> <span class="operator">%&gt;%</span> arrange<span class="punctuation">(</span>count<span class="punctuation">)</span></span><br><span class="line">fig_data</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405130456181.png" alt="image-20240405130456181" style="zoom:50%;"><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#转成因子，防止重新排序</span></span><br><span class="line">fig_data<span class="operator">$</span>Description <span class="operator">&lt;-</span> factor<span class="punctuation">(</span>fig_data<span class="operator">$</span>Description<span class="punctuation">,</span>levels <span class="operator">=</span> fig_data<span class="operator">$</span>Description<span class="punctuation">,</span>ordered <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#预览数据</span></span><br><span class="line">fig_data</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405133836309.png" alt="image-20240405133836309" style="zoom:50%;"><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#建立数据与图形或者点之间的映射关系，确定点的（x,y）坐标，绘制散点图</span></span><br><span class="line">p1 <span class="operator">&lt;-</span> ggplot2<span class="punctuation">(</span>fig_data<span class="punctuation">,</span>aes<span class="punctuation">(</span>Count<span class="punctuation">,</span>Description<span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span>geom_point<span class="punctuation">(</span>aes<span class="punctuation">(</span>size <span class="operator">=</span> Count<span class="punctuation">,</span>color <span class="operator">=</span> LogP<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#隐藏坐标轴的标题</span></span><br><span class="line">p2 <span class="operator">&lt;-</span> p1<span class="operator">+</span>labs<span class="punctuation">(</span>y <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line">p2</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405135402721.png" alt="image-20240405135402721" style="zoom:50%;"><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义颜色渐变</span></span><br><span class="line">p3 <span class="operator">&lt;-</span> p2<span class="operator">+</span>scale_colour_gradient<span class="punctuation">(</span>low <span class="operator">=</span> <span class="string">&quot;red&quot;</span><span class="punctuation">,</span> high <span class="operator">=</span> <span class="string">&quot;yellow&quot;</span><span class="punctuation">)</span></span><br><span class="line">p3</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405135520786.png" alt="image-20240405135520786" style="zoom:50%;"><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置x轴范围，避免点溢出绘图区</span></span><br><span class="line">p4 <span class="operator">&lt;-</span> p3<span class="operator">+</span>scale_x_continuous<span class="punctuation">(</span>limits <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5.5</span><span class="punctuation">,</span><span class="number">12.5</span><span class="punctuation">)</span><span class="punctuation">,</span>breaks <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">6</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">,</span><span class="number">10</span><span class="punctuation">,</span><span class="number">12</span><span class="punctuation">)</span><span class="punctuation">,</span> label <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;6&quot;</span><span class="punctuation">,</span><span class="string">&quot;8&quot;</span><span class="punctuation">,</span><span class="string">&quot;10&quot;</span><span class="punctuation">,</span><span class="string">&quot;12&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">p4</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405141114664.png" alt="image-20240405141114664" style="zoom:50%;"><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#应用自带的主题</span></span><br><span class="line">p4<span class="operator">+</span>theme_light<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405141209923.png" alt="image-20240405141209923" style="zoom:50%;"><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义图表主题，对图表做精细调整</span></span><br><span class="line">top.mar <span class="operator">=</span> <span class="number">0.2</span></span><br><span class="line">right.mar <span class="operator">=</span> <span class="number">0.2</span></span><br><span class="line">bottom.mar <span class="operator">=</span> <span class="number">0.2</span></span><br><span class="line">left.mar <span class="operator">=</span> <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#隐藏坐标轴，并对字体样式、颜色、刻度长度等进行限定，</span></span><br><span class="line">mytheme <span class="operator">&lt;-</span> theme light<span class="punctuation">(</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">theme<span class="punctuation">(</span>axis.text <span class="operator">=</span> element_text<span class="punctuation">(</span>family<span class="operator">=</span><span class="string">&quot;sans&quot;</span><span class="punctuation">,</span>colour <span class="operator">=</span><span class="string">&quot;gray20&quot;</span><span class="punctuation">,</span>size <span class="operator">=</span> <span class="number">10</span><span class="punctuation">)</span><span class="punctuation">,</span>panel.grid <span class="operator">=</span> element_blank<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">,</span>axis.ticks <span class="operator">=</span> element_line<span class="punctuation">(</span>linewidth <span class="operator">=</span> <span class="number">0.6</span><span class="punctuation">,</span>colour<span class="operator">=</span><span class="string">&quot;gray20&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span>axis.ticks.length <span class="operator">=</span>unit<span class="punctuation">(</span><span class="number">1.2</span><span class="punctuation">,</span>units <span class="operator">=</span>mm<span class="string">&quot;),plot.margin =unit(x=c(top.mar,right.mar,bottom.mar,left.mar),units=&quot;</span>inches<span class="string">&quot;))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">p4+mytheme</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405143756258.png" alt="image-20240405143756258" style="zoom:50%;"><h4 id="5-2-MetPA富集-Pathway-topology-analysis"><a href="#5-2-MetPA富集-Pathway-topology-analysis" class="headerlink" title="5.2 MetPA富集(Pathway topology analysis)"></a>5.2 MetPA富集(Pathway topology analysis)</h4><p>除了挖掘代谢途径内部的代谢物调控机制，对于整个生物体而言，代谢途径间的相互作用形成的大的调控网络也具备重要的研究意义。代谢途径间的相互调控是维持整个内部环境稳态的重要基础。 <strong>经过KEGG富集分析后，我们可以发现表型差异是由多个代谢途径共同作用导致的，这些代谢途径之间是否又有位置上或者说地位上的优先级？</strong></p><p>MetPA富集分析，又叫做拓扑分析，以代谢途径未单位，但与KEGG富集不同，KEGG重点在解析目标代谢集主要参与的代谢途径是什么，筛选出显著富集的代谢物。</p><p>MetPA分析考虑生物体整体代谢网络，侧重突出在整个代谢网络中具备中药味点的代谢通路，结合统计分析检验核心代谢通路的显著性，再根据代谢途径内的信息，锁定重要的代谢物。  </p><p>目前有在线的一些工具可以使用：<a href="https://www.metaboanalyst.ca/">MetaboAnalyst5.0</a></p><p>可以在线完成对人、小鼠、大鼠、奶牛、斑马、果蝇等15个物种的分析，使用目标代谢集上传分析（也就是之前提到的前景代谢集）</p><h5 id="5-2-1-MetPA分析的原理"><a href="#5-2-1-MetPA分析的原理" class="headerlink" title="5.2.1 MetPA分析的原理"></a>5.2.1 MetPA分析的原理</h5><p>MetPA（Metabolic Pathway Analysis）是一种用于分析生物代谢网络中通路重要性的方法。在MetPA中，为了衡量或计算通路的位置信息，采用了两种中心性指标：Out-degree Centrality（出度中心性）和Relative-betweenness Centrality（相对中间中心性）。这些指标帮助研究者评估代谢通路在网络中的地位和作用。</p><p>Out-degree Centrality是评估网络中节点对外连通性的一个指标，它通过计算一个通路影响其他通路的数量来衡量其重要性。在代谢网络中，一个通路的Out-degree Centrality越高，表明它在网络中的影响范围越广，可能承担更为关键的功能。例如，在下图中，如果D通路能够影响B、C、E、F四个通路，那么D通路的Out-degree Centrality就是4，表示它具有较高的连通性和重要性。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405155403159.png" alt="image-20240405155403159" style="zoom:50%;"><p>然而，Out-degree Centrality仅考虑了一个节点对其他节点的影响，而忽略了其他节点对该节点的影响。在代谢过程中，<strong>调控往往是双向的</strong>，即某些代谢物既可以作为反应的产物影响后续反应，也可以作为反应的底物被其他代谢物影响。因此，单独使用Out-degree Centrality可能无法全面评估一个通路在代谢网络中的真实地位。</p><p>为了更全面地评估通路的重要性，MetPA还引入了Relative-betweenness Centrality这一指标。Relative-betweenness Centrality衡量的是一个通路在所有其他<strong>通路对</strong>之间的最短路径上的出现频率。一个通路的Relative-betweenness Centrality越高，表明它在网络中的信息传递和控制作用越强，可能是代谢网络中的关键“桥梁”。简单理解就是，网络中当两个通路不能直接调控时，就需要借助第三个v通路才能建立调控关系。因此，如果整个网络中有更多的通路需要借助第三方通路v才能建立调控关系，v通路就崛北极高的重要性，但是v的连通性并不一定是最高的，只是相对位置是最重要的。他的计算方式如下：</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405155641348.png" alt="image-20240405155641348" style="zoom:50%;"><p>[^注]: g(v):指v通路的betweenness centrality; ost(v): 指s通路到t通路之间经过v的最短路径数;  σst: 指s到t之间的所有最短路径数;</p><p>最后借助Fishers’Exact test、Hypergeometric Test、Globaltest等检验方式来判断通路的显著性，可以重点关注显著富集的通路。<strong>相比Out-degree Centrality，Relative-betweenness Centrality的统计方式更能从全局出发描述整个网络种通路相对位置的重要性。Relative-betweenness Centrality也是开发者非常推荐的统计方式。</strong></p><p>MetPA富集分析实现方法: MetaboAnalyst5.0(<a href="https://www.metaboanalyst.ca/)%EF%BC%8C%E6%97%A0%E9%9C%80%E6%B3%A8%E5%86%8C%EF%BC%8C%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4%E5%A6%82%E4%B8%8B%EF%BC%9A">https://www.metaboanalyst.ca/)，无需注册，操作步骤如下：</a></p><ol><li><p>登录网站，点击“Chick here to start“开始分析;</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405160333149.png" alt="image-20240405160333149" style="zoom:50%;"></li><li><p>分析模块选择Pathway Analysis；</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405195854139.png" alt="image-20240405195854139" style="zoom:50%;"></li><li><p>选择分析模式，可以只使用<strong>代谢物名称</strong>或者<strong>代谢物名称+丰度的矩阵数据</strong>进行分析。如果只关注代谢物，不关注丰度变化可选择使用<strong>代谢物名称(3.1)分析</strong>。若<strong>代谢物</strong>和<strong>丰度</strong>都关注，则选择<strong>3.2分析</strong>。该步骤会影响后续通路显著性的统计方式。</p><p>选择完成后点击“submit”</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405213549127.png" alt="image-20240405213549127" style="zoom:50%;"></li><li><p>数据确认过程，可直接点击“Proceed”</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405214005702.png" alt="image-20240405214005702" style="zoom:50%;"></li><li><p>代谢物丰度归一化方式(若使用3.1模式，则没有此步骤)，该步骤主要<strong>校正代谢物丰度数量级间的差异</strong>对富集结果的影响。可根据实际情况，选择是否需要归一化。(小Tips，实在纠结可以都试试，网页分析试错包容性强)  “Normalize”后，点击“Proceed“后即可。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405214725763.png" alt="image-20240405214725763" style="zoom:50%;"></li><li><p>设置MetPA的富集方式。 这里使用默认参数（蓝色的圆圈）</p></li></ol><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405215019047.png" alt="image-20240405215019047" style="zoom:50%;"><ol start="7"><li>获取分析结果。 点击左侧导航栏的“Download”，将结果下载到本地。 右侧未数据可视化区域， <strong>Pathway Impact是通路的位置信息，该值越大通路也就越重要，纵坐标为通路的显著性，颜色越红（越深）越显著富集</strong>。点击图中的圆点，右侧可出现通路的名称和富集到的代谢物信息。</li></ol><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405223654864.png" alt="image-20240405223654864" style="zoom:50%;"><p>5.3 MSEA富集分析（Metabolite Set Enrichment Analysis）</p><p>生物体内的代谢调控是层层递进的，极少会有一蹴而就的情况，之前提到的KEGG富集、MetPA富集，都是探讨目标代谢集主要腹肌道德代谢途径，这些分析方式往往存在一定的缺失，因为阈值过滤可能会损失一部分具备重要意义的微效代谢物的挖掘或发现。</p><p>例如下图中的pathway，可发现正是由于A的为上调，逐渐作用到下游代谢物，最终使E出现显著变化。 所以，该同类仍具备相当重要的生物学意义，如果根据差异倍数≥2，P＜0.05来筛选差异代谢集，最终只能获得一个代谢物E，然后再结合KEGG富集、MetPA富集，最后得到的结果显然该pathway是不显著的。</p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/image-20240405225656108.png" alt="image-20240405225656108" style="zoom:50%;"><p>MSEA分析可弥补上述研究不足，<strong>重点挖掘代谢物丰度变化较低</strong>但仍<strong>对生物体调控具备主要意义的代谢物</strong>及其所在的<strong>代谢途径</strong>。其意义比较类似于<strong>转录组数据挖掘中的GSEA</strong>分析。</p><p>可使用MetaboAnalyst5.0网页(<a href="https://www.metaboanalyst.ca/)%E5%9C%A8%E7%BA%BF%E5%AE%8C%E6%88%90%E5%AF%B9%E4%BA%BA%E3%80%81%E5%B0%8F%E9%BC%A0%E3%80%81%E5%A4%A7%E9%BC%A0%E7%AD%89%E7%89%A9%E7%A7%8D%E7%9A%84%E5%88%86%E6%9E%90%EF%BC%8C%E5%88%86%E6%9E%90%E6%97%B6%E4%BD%BF%E7%94%A8%E6%AF%94%E8%BE%83%E7%BB%84%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E4%BB%A3%E8%B0%A2%E9%9B%86%E5%BC%80%E5%B1%95%EF%BC%8C%E5%A6%82A-vs-B%E5%BE%97%E5%88%B0%E7%9A%84%E4%B8%8D%E7%BB%8F%E9%98%88%E5%80%BC%E7%AD%9B%E9%80%89%E7%9A%84%E6%89%80%E6%9C%89%E4%BB%A3%E8%B0%A2%E7%89%A9%E3%80%82">https://www.metaboanalyst.ca/)在线完成对人、小鼠、大鼠等物种的分析，分析时使用比较组中的所有代谢集开展，如A-vs-B得到的不经阈值筛选的所有代谢物。</a></p><p>5.3.1 MSEA分析的原理</p><p>MSEA再挖掘代谢途径时，有三种统计方式：Over Representation Analysis(ORA)、Single Sample Proling（SSP）、Quantitative Enrichment Analysis（QEA）模式。 ORA分析时，只需要输入比较组中的代谢物名称，无需包含丰度信息。 这种方式没有结合丰度数据，因此不利于丰度变化微弱的数据挖掘。</p><p>所以我跟推荐使用QEA模式开展分析。 QEA再分析通路时，借助广义线性模型计算每个代谢物浓度与样本的相关性，从而得到Q statistic，将pathway种每个代谢物Q statistic的平均值作为pathway的Q statistic，该值越高说明其与样本的相关性越强，对样本间的差异具有重要调控。 同时，软件还默认输出P值、Bonferroni校正后的P值和FDR值描述通路的显著性。</p><p>MSEA富集分析方法的实现：MetaboAnalysis5.0（<a href="https://www.metaboanalyst.ca/%EF%BC%89%EF%BC%8C%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4%E5%9C%A8%E7%BD%91%E4%B8%8A%E9%83%BD%E5%8F%AF%E6%9F%A5%E6%89%BE%E5%88%B0%E7%9B%B8%E5%85%B3%E6%95%99%E7%A8%8B%EF%BC%8C%E8%BF%99%E9%87%8C%E4%B8%8D%E5%86%8D%E8%B5%98%E8%BF%B0%E3%80%82">https://www.metaboanalyst.ca/），操作步骤在网上都可查找到相关教程，这里不再赘述。</a></p><hr><p>下期预告：蛋白代谢多组学研究思路</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;代谢组学的数据分析包括：对检测到的原始数据进行数据预处理、数据质控、代谢物定量分析、生信数据挖掘等。&lt;/p&gt;
&lt;h3 id=&quot;1-数据预处理&quot;&gt;&lt;a href=&quot;#1-数据预处理&quot; class=&quot;headerlink&quot; title=&quot;1.数据预处理</summary>
      
    
    
    
    
    <category term="多组学数据分析" scheme="http://nikolahuang.github.io/tags/%E5%A4%9A%E7%BB%84%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>hexo+fluid搭建个人博客网站并部署到github</title>
    <link href="http://nikolahuang.github.io/2024/03/19/hexo-fluid%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
    <id>http://nikolahuang.github.io/2024/03/19/hexo-fluid%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/</id>
    <published>2024-03-19T14:59:09.000Z</published>
    <updated>2024-03-19T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>需要预先安装node.js、npm、并添加到环境变量(path)</p><h4 id="1-官网安装Nodejs-建议使用-Node-js-12-0-及以上版本"><a href="#1-官网安装Nodejs-建议使用-Node-js-12-0-及以上版本" class="headerlink" title="1.官网安装Nodejs(建议使用 Node.js 12.0 及以上版本)"></a>1.官网安装Nodejs(建议使用 Node.js 12.0 及以上版本)</h4><p>NodeJs是Hexo所必需的环境。</p><p>点击 <a href="https://nodejs.org/en/">NodeJs 官网</a>，下载左边那个即可，下载好一直 next，选择一个文件夹位置在一直 next 即可完成。安装Node.js会包含环境变量及npm的安装。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/902f589b96784f8098d216e8e32637d7.png" alt="2"></p><p>验证安装完成cmd中输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>返回版本号代表安装完成。</p><p>2.安装git<br>Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。</p><p>我们网站在本地搭建好了，需要使用Git同步到云服务器或者GitHub的代码库里。点击 git 官网，下载安装包。点击 next，选择文件夹位置，然后一直 next 到底就行了，选择默认配置就好，默认配置会将环境变量配置好的。安装成功右击鼠标如图所示：<br><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/3705169b5054b5c69bd374ad08fa97f5.png" alt="1"></p><p>3.下载安装Hexo博客框架<br>Hexo 是一个快速、简洁且高效的博客框架。Hexo是有官方说明文档，想看最详细的教程可以移步到HEXO官网。前面git和nodejs安装好后，就可以安装hexo了，可以先创建一个文件夹HEXO，然后在这个文件夹下直接右键git bash打开，输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>下载太慢可以换一下淘宝源，依旧用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>查看一下版本，至此就全部安装完了。</p><p>接下来初始化一下hexo，，在该文件夹下鼠标右键gitbash后输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>“blog”是你要生成博客的文件夹名称，可以根据自己的喜好来取名。生成的文件如图所示：<br><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/0dff30cffe9cf89a53a611016f460fb2.png" alt="image-20220515193739986"></p><p>输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>完成后，打开浏览器输入地址：localhost:4000就可以看到你生成的博客了。使用ctrl+c可以把服务关掉。</p><p>本地部署好之后，只能自己在本地查看博客，我们需要上传到云端的代码库（云服务器或者GitHub）来托管你的博客，这样其他人才能随时访问你的博客。</p><h2 id="二、安装使用fluid-主题"><a href="#二、安装使用fluid-主题" class="headerlink" title="二、安装使用fluid 主题"></a>二、安装使用fluid 主题</h2><h3 id="获取最新版本"><a href="#获取最新版本" class="headerlink" title="获取最新版本"></a>获取最新版本</h3><p>主题下载：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-theme-fluid</span><br></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://links.jianshu.com/go?to=https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml (opens new window)</a>内容复制过去（找到主题文件夹，一般在\blog\nikolahuang.github.io\node_modules\hexo-theme-fluid里面）。</p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>下载 <a href="https://links.jianshu.com/go?to=https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本 (opens new window)</a>解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><h3 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">theme: fluid  <span class="comment"># 指定主题</span></span><br><span class="line"></span><br><span class="line">language: zh-CN  <span class="comment"># 指定语言，会影响主题显示的语言，按需修改</span></span><br></pre></td></tr></table></figure><p>在这，我使用的是第一种方式，主要步骤是</p><h3 id="1、运行安装命令-npm-install-–save-hexo-theme-fluid"><a href="#1、运行安装命令-npm-install-–save-hexo-theme-fluid" class="headerlink" title="1、运行安装命令   npm install –save hexo-theme-fluid"></a>1、运行安装命令   npm install –save hexo-theme-fluid</h3><h3 id="2、在根目录下创建文件一个名为-config-fluid-yml的文件"><a href="#2、在根目录下创建文件一个名为-config-fluid-yml的文件" class="headerlink" title="2、在根目录下创建文件一个名为_config.fluid.yml的文件"></a>2、在根目录下创建文件一个名为_config.fluid.yml的文件</h3><h3 id="3、将node-modules里面hexo-theme-fluid文件夹里面的-config-yml的内容复制到新建的-config-fluid-yml文件中"><a href="#3、将node-modules里面hexo-theme-fluid文件夹里面的-config-yml的内容复制到新建的-config-fluid-yml文件中" class="headerlink" title="3、将node_modules里面hexo-theme-fluid文件夹里面的_config.yml的内容复制到新建的_config.fluid.yml文件中"></a>3、将node_modules里面hexo-theme-fluid文件夹里面的_config.yml的内容复制到新建的_config.fluid.yml文件中</h3><h3 id="4、如下图修改-config-fluid-yml文件中的内容-，注意空格位置什么的不要改"><a href="#4、如下图修改-config-fluid-yml文件中的内容-，注意空格位置什么的不要改" class="headerlink" title="4、如下图修改_config.fluid.yml文件中的内容 ，注意空格位置什么的不要改"></a>4、如下图修改_config.fluid.yml文件中的内容 ，注意空格位置什么的不要改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">theme: fluid  <span class="comment"># 指定主题</span></span><br><span class="line"></span><br><span class="line">language: zh-CN  <span class="comment"># 指定语言，会影响主题显示的语言，按需修改</span></span><br></pre></td></tr></table></figure><h3 id="5、运行清除缓存命令-hexo-clean-再运行hexo-g-再运行hexo-s-然后预览页面。类似下图的页面"><a href="#5、运行清除缓存命令-hexo-clean-再运行hexo-g-再运行hexo-s-然后预览页面。类似下图的页面" class="headerlink" title="5、运行清除缓存命令  hexo clean  再运行hexo g  再运行hexo s ,然后预览页面。类似下图的页面"></a>5、运行清除缓存命令  hexo clean  再运行hexo g  再运行hexo s ,然后预览页面。类似下图的页面</h3><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-17108599776039.webp" alt="img"></p><p>image.png</p><h1 id="三、完善页面的功能插件"><a href="#三、完善页面的功能插件" class="headerlink" title="三、完善页面的功能插件"></a>三、完善页面的功能插件</h1><h3 id="1、中间的背景图的更换，如下图效果"><a href="#1、中间的背景图的更换，如下图效果" class="headerlink" title="1、中间的背景图的更换，如下图效果"></a>1、中间的背景图的更换，如下图效果</h3><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-17108599724496.webp" alt="img"></p><p>image.png</p><p>在_config.fluid.yml中找到上面的位置填写上图标记的代码(注意图片的路径位置)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">banner_img</span>: <span class="regexp">/img/</span>bg.<span class="property">jpg</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171085998395512.webp" alt="img"></p><p>image.png</p><p>步骤：</p><h3 id="2、添加随机打印机效果，如图我所标记的位置的效果"><a href="#2、添加随机打印机效果，如图我所标记的位置的效果" class="headerlink" title="2、添加随机打印机效果，如图我所标记的位置的效果"></a>2、添加随机打印机效果，如图我所标记的位置的效果</h3><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171085998869315.webp" alt="img"></p><p>image.png</p><p>步骤1、在_config.fluid.yml文件中找到下图位置修改，开启打印机插件：</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171085999733320.webp" alt="img"></p><p>image.png</p><p>步骤2、在上述文件找到下图位置修改，调用接口</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171086000214523.webp" alt="img"></p><h3 id="3、添加统计数，我使用的是valiner插件。如下图效果"><a href="#3、添加统计数，我使用的是valiner插件。如下图效果" class="headerlink" title="3、添加统计数，我使用的是valiner插件。如下图效果"></a>3、添加统计数，我使用的是valiner插件。如下图效果</h3><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171086000704026.webp" alt="img"></p><p>步骤：在在上述文件找到下图位置修改，</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171086001111729.webp" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171086001497732.webp" alt="img"></p><h3 id="4、添加右上角的社交图标和链接，如下图效果"><a href="#4、添加右上角的社交图标和链接，如下图效果" class="headerlink" title="4、添加右上角的社交图标和链接，如下图效果"></a>4、添加右上角的社交图标和链接，如下图效果</h3><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171086002211535.webp" alt="img"></p><p> 步骤：点击<a href="https://links.jianshu.com/go?to=https://github.com/blog/273-github-ribbons">这里</a> 或者 <a href="https://links.jianshu.com/go?to=http://tholman.com/github-corners/">这里</a>挑选自己喜欢的样式，选择其中一个并复制其代码。 如下图</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171086002974038.webp" alt="img"></p><p> 在找到下图位置粘贴代码，如图绿色标记处</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171086003410441.webp" alt="img"></p><h1 id="四、部署到github的托管网站上，实现在线博客"><a href="#四、部署到github的托管网站上，实现在线博客" class="headerlink" title="四、部署到github的托管网站上，实现在线博客"></a>四、部署到github的托管网站上，实现在线博客</h1><p>步骤1：在github 创建好仓库，至于如何创建可以点击<a href="https://www.jianshu.com/p/11d6d8e7eb9a">这里</a>查看。<br> 步骤2：在_config.yml文件中找到下图位置修改内容</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171086003899944.webp" alt="img"></p><p> 步骤3：使用命令npm install hexo-deployer-git –save  安装部署插件<br> 步骤4：使用hexo clean 清除缓存 、使用hexo g 渲染页面 、使用hexo d 部署页面<br> 步骤5：此时，你远程仓库上，已经有文件了，也就是如下图public文件夹中的文件</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171086004334947.webp" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/webp-171086004676550.webp" alt="img"></p><p> 步骤6: 在浏览器地址栏输入https:&#x2F;&#x2F;仓库名<a href="https://links.jianshu.com/go?to=http://.github.io">.github.io</a>     就能看到你的线上博客网站了。</p><hr><p>上面的方法尝试之后不行的，可以继续下面这种办法：将博客托管到GitHub</p><h4 id="1-GitHub生成代码库"><a href="#1-GitHub生成代码库" class="headerlink" title="1.GitHub生成代码库"></a>1.GitHub生成代码库</h4><p>首先，你先要有一个GitHub账户。点击+号，选择New repository，新建仓库：</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/70895669db2179fa65774c69fff62735.png" alt="image-20220515194104048"></p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名，点击create repository。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/68e29340708fafdd1da425162b615b27.png" alt="image-20220515194255616"></p><p>本地SSH生成密钥，将公钥复制到云端<br>回到本地主机git bash中，创建用户名和密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub注册邮箱&quot;</span><br><span class="line">git config --global user.password &quot;GitHub登录密码&quot;</span><br></pre></td></tr></table></figure><p>创建SSH密钥，一路回车</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，相当于钥匙，id_rsa.pub是公共秘钥，相当于锁。要把id_rsa.pub公共秘钥给GitHub，这样才能用自己的私人密钥去开这把锁。当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>将id_rsa.pub中的内容复制，而后在GitHub的setting中：<br><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/b032fffb71937ba1b5888640970d96b8.png" alt="image-20220515194631747"></p><p>点击左侧SSH and GPG keys的设置选项，点击New SSH key，把你的id_rsa.pub里面的信息复制进去。title随便填，本地的公钥复制到key中。</p><p><img src="https://cdn.jsdelivr.net/gh/nikolahuang/blogimage2@main/img/eafc90db32b9693697d254f08024ca58.png" alt="image-20220515195256471"></p><p>在本地gitbash中检测GitHub公钥设置是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure><p>第一次登录需要输入GitHub的登录用户名和密码。</p><p>3.修改配置文件<br>下一步将我们的Hexo与GitHub关联起来，打开站博客根目录blog的配置文件_config.yml<br>翻到最后修改为：（注意后面三行缩进两格）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span> </span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/lixinyiceline/lixinyiceline.github.io.git（改）</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>repository里的内容是GitHub代码仓库浏览器网址栏的网址，注意后面加上.git，保存站点配置文件。</p><h4 id="4-本地上传到GitHub"><a href="#4-本地上传到GitHub" class="headerlink" title="4.本地上传到GitHub"></a>4.本地上传到GitHub</h4><p>本地gitbash安装Git部署插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后输入下面三个命令就可搭建成功博客了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g &amp;&amp; hexo d</span><br><span class="line">hexo new 你要新建的博客名称 #注：新建的博客markerdown文件存放在_post文件夹中，可以直接查看</span><br></pre></td></tr></table></figure><p>云服务器的部署参考博客：<a href="https://blog.csdn.net/m0_50609661/article/details/125216866">https://blog.csdn.net/m0_50609661/article/details/125216866</a></p><p>改自：<a href="https://www.jianshu.com/p/6d2614b28daf">随心了</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;p&gt;需要预先安装node.js、npm、并添加到环境变量(path)&lt;/p&gt;
&lt;h4 id=&quot;1-官网安装Nodejs-建议使用</summary>
      
    
    
    
    
    <category term="计算机随笔" scheme="http://nikolahuang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>同源重组构建质粒原理详解</title>
    <link href="http://nikolahuang.github.io/2024/03/19/%E5%90%8C%E6%BA%90%E9%87%8D%E7%BB%84%E6%9E%84%E5%BB%BA%E8%B4%A8%E7%B2%92%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>http://nikolahuang.github.io/2024/03/19/%E5%90%8C%E6%BA%90%E9%87%8D%E7%BB%84%E6%9E%84%E5%BB%BA%E8%B4%A8%E7%B2%92%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-03-19T02:54:11.000Z</published>
    <updated>2024-03-19T02:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>分子生物学研究中质粒构建是最常用的实验技术。原理依赖于限制性核酸内切酶，DNA 连接酶和其他修饰酶的作用，分别对目的基因和载体 DNA 进行适当切割和修饰后，将二者连接在一起，再导入宿主细胞，实现目的基因在宿主细胞内的正确表达。</p><p>同源重组的基因克隆方法， 相比双酶切载体构建方法，该方法的构建过程有些不同，双酶切构建过程比较繁琐，同源重组构建过程相对简单，可以省去很多的时间和精力，但假阳性率略高。</p><p><strong>同源重组法构建载体</strong></p><p>首先，靶基因片段扩增引物有别于常规引物设计；</p><p>其次，载体切割过程中只需要进行单酶切；</p><p>第三，载体和目的基因片段的连接是基于同源重组而不是粘性末端互补。</p><p><strong>采用同源重组法构建载体与常规双酶切构建载体方法不同。</strong></p><p>首先，设计引物时上游引物5’端前面加的是酶切位点（如Hind III）及该酶切位点在pMIR reporter载体中对应前面的15个碱基载体片段，下游引物5’端前面加的是Hind III酶切位点及该酶切位点在pMIR reporter载体中对应后面的15个碱基载体片段，如此设计引物是为了保证目的片段插入载体时方向正确。</p><p>其次，载体只需要单酶切，用Hind III酶切pMIR reporter，使得pMIR reporter成为两端都带着Hind III位点的线性载体。相比双酶切切割载体，单酶切可以保证酶切后的载体都是单一的线性片段，使得后续的重组连接更准确。</p><p>第三，省去了TA克隆环节。因为PCR产物可以直接用于重组连接，不需要酶切产生粘性末端，而且重组酶的重组能力强于T4 DNA连接酶的连接能力，一般只需要一步即可重组连接成功，因此可以在重组反应之后进行测序鉴定。</p><p><strong>详解：</strong></p><p>基于同源基因重组原理，适用于向几乎任何载体在任何位点进行定向克隆，无需考虑插入片段自身携带的酶切位点可高效克隆 50 bp～10 kb 片段，同时构建时间也大大缩短。</p><ol><li><p>载体的制备一般推荐双酶切线性化，线性化完全，假阳性克隆低。酶切体系同上。</p></li><li><p>对于使用重组方式连接来说，PCR 要设计引物, 设计引物时要根据质粒载体和基因序列选择合适的同源序列，通过 PCR 扩增方式进行连接，PCR 的产物要纯化。</p></li></ol><p><strong>引物设计原则简单总结一下：</strong></p><p><strong>（1）前向引物：5’ 端–上游克隆载体末端同源序列+基因正向扩增引物–3’ 端</strong></p><p><strong>（2）反向引物：3’ 端–基因反向扩增引物+下游克隆载体末端同源序列–5’ 端</strong></p><p>如果设计的基因特异插入片段扩增产物长度较长，可以选择 PCR 方式进行目的引物的扩增。</p><p><strong>[可选 PCR 扩增体系]</strong></p><p>ddH2O            14 ul</p><p>10 x Taq buffer      2 ul</p><p>10 um DNTP       1 ul</p><p>10 um primer F     0.5 ul</p><p>10 um primer R     0.5 ul</p><p>Vector            1 ul</p><p>Taq 酶            1 ul</p><p><strong>[可选 PCR 扩增条件]</strong></p><p>(1)95℃：5min</p><p>(2) 35cycle</p><p>95℃：30s</p><p>55℃：30s（退火温度可以根据目的引物TM值决定，一般退火温度根 据引物TM值降低5度）</p><p>72℃：40s</p><p>(3)72℃：10min</p><p>(4)16℃：hold</p><p>PCR 扩增后，通过胶回收方式获得纯化的 PCR 产物。纯化后的 PCR 产物不需要进行酶切，直接用于重组反应。</p><p><strong>3. 目的引物与线性载体进行重组反应。</strong></p><p><strong>[可选重组体系]</strong></p><p>5 × CE II Buffer      4 μl</p><p>线性化克隆载体     50～200 ng</p><p>插入片段扩增产物   20～200 ng</p><p>ExnaseII         2 μl</p><p>ddH2O            x ul</p><p>在冰水浴中配制，配制完成后，用移液器上下轻轻吹打几次混匀各组分，置于 37 ℃ 反应 30 min。待反应完成后，立即将反应管置于冰水浴中冷却 5 min。重组效率在反应 30 min 左右达到最高，反应时间不足或者太长都将会降低克隆效率，这样大大减少了连接时间。</p><p><strong>4. 转化</strong></p><p>将连接产物转化到受体菌中（一般为 DH5a），涂板，培养过夜。</p><p><strong>5. 挑取单克隆，并鉴定</strong></p><p>挑去平板上的单克隆培养，可以通过 PCR 或者酶切初步鉴定阳性克隆，对初步鉴定出来的阳性克隆进行测序。</p><p><strong>最后，几个主要注意事项：</strong></p><ol><li><p>载体克隆位点选择尽量选择无重复序列，且 GC 含量比较均匀的区域进行克隆。当克隆位点上下游 20 bp 区域内 GC 含量均在 40%～60% 范围之内时， 克隆效率将达到最大.</p></li><li><p>最适克隆载体与插入片段摩尔比为 1:2，即最适插入片段使用量为 0.06 pmol。这些摩尔数对应的 DNA 质量可由以下公式粗略计算获得：</p></li></ol><p>最适克隆载体使用量 &#x3D; [0.02 × 克隆载体碱基对数] ng（0.03 pmol）</p><p>最适插入片段使用量 &#x3D; [0.04 × 插入片段碱基对数] ng（0.06 pmol）</p><ol start="3"><li>双酶切 1 和 2，在设置酶切体系时要考虑酶切温度以及 Activity in NEBbuffer 的问题。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分子生物学研究中质粒构建是最常用的实验技术。原理依赖于限制性核酸内切酶，DNA 连接酶和其他修饰酶的作用，分别对目的基因和载体 DNA 进行适当切割和修饰后，将二者连接在一起，再导入宿主细胞，实现目的基因在宿主细胞内的正确表达。&lt;/p&gt;
&lt;p&gt;同源重组的基因克隆方法， 相比</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>表达载体的构建方法及步骤</title>
    <link href="http://nikolahuang.github.io/2024/03/18/%E8%A1%A8%E8%BE%BE%E8%BD%BD%E4%BD%93%E7%9A%84%E6%9E%84%E5%BB%BA%E6%96%B9%E6%B3%95%E5%8F%8A%E6%AD%A5%E9%AA%A4/"/>
    <id>http://nikolahuang.github.io/2024/03/18/%E8%A1%A8%E8%BE%BE%E8%BD%BD%E4%BD%93%E7%9A%84%E6%9E%84%E5%BB%BA%E6%96%B9%E6%B3%95%E5%8F%8A%E6%AD%A5%E9%AA%A4/</id>
    <published>2024-03-18T15:08:00.000Z</published>
    <updated>2024-03-18T15:38:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、载体的选择及如何阅读质粒图谱</strong><br>目前，载体主要有病毒和非病毒两大类,其中质粒 DNA 是一种新的非病毒转基因载体。<br>一个合格质粒的组成要素：<br>（1）复制起始位点 Ori 即控制复制起始的位点。原核生物 DNA 分子中只有一个复制起始点。而<br>真核生物 DNA 分子有多个复制起始位点。<br>（2）抗生素抗性基因可以便于加以检测，如 Amp+ ,Kan+<br>（3）多克隆位点 MCS 克隆携带外源基因片段<br>（4） P&#x2F;E 启动子&#x2F;增强子<br>（5）Terms 终止信号<br>（6）加 poly（A）信号可以起到稳定 mRNA 作用<br>选择载体主要依据构建的目的，同时要考虑载体中应有合适的限制酶切位点。如果构建的目<br>的是要表达一个特定的基因，则要选择合适的表达载体。<br>载体选择主要考虑下述3点：<br>【1】.构建 DNA 重组体的目的，克隆扩增&#x2F;基因表达，选择合适的克隆载体&#x2F;表达载体。<br>【2】.载体的类型：<br>（1）克隆载体的克隆能力－据克隆片段大小（大选大，小选小）。如&lt;10kb 选质粒。<br>（2）表达载体据受体细胞类型－原核&#x2F;真核&#x2F;穿梭，E.coli&#x2F;哺乳类细胞表达载体。<br>（3）对原核表达载体应该注意：选择合适的启动子及相应的受体菌，用于表达真核蛋白质时注意克服4个困难和阅读框错位；表达天然蛋白质或融合蛋白作为相应载体的参考。<br>【3】载体 MCS 中的酶切位点数与组成方向因载体不同而异，适应目的基因与载体易于链接，不能产生阅读框架错位。<br>综上所述，选用质粒（最常用）做载体的5点要求：<br>（1）选分子量小的质粒，即小载体（1－1.5kb）→不易损坏，在细菌里面拷贝数也多（也有大载<br>体）；<br>（2）一般使用松弛型质粒在细菌里扩增不受约束，一般 10个以上的拷贝，而严谨型质粒&lt;10个。<br>（3）必需具备一个以上的酶切位点，有选择的余地；<br>（4）必需有易检测的标记，多是抗生素的抗性基因，不特指多位 Ampr（试一试）。<br>（5）满足自己的实验需求，是否需要包装病毒，是否需要加入荧光标记，是否需要加入标签蛋白，是否需要真核抗性（如Puro、G418）等等。<br>无论选用哪种载体，首先都要获得载体分子，然后采用适当的限制酶将载体 DNA 进行切割，获得线性载体分子，以便于与目的基因片段进行连接。<br>如何阅读质粒图谱<br>第一步：首先看 Ori 的位置，了解质粒的类型（原核&#x2F;真核&#x2F;穿梭质粒）<br>第二步：再看筛选标记，如抗性，决定使用什么筛选标记。<br>（1）Ampr 水解β－内酰胺环，解除氨苄的毒性。<br>（2）tetr 可以阻止四环素进入细胞。<br>（3）camr 生成氯霉素羟乙酰基衍生物，使之失去毒性。<br>（4）neor（kanr）氨基糖苷磷酸转移酶使 G418（长那霉素衍生物）失活<br>（5）hygr 使潮霉素β失活。<br>第三步：看多克隆位点（MCS）。它具有多个限制酶的单一切点。便于外源基因的插入。如果在这些酶切位点以外有外源基因的插入，会导致某种标志基因的失活，而便于筛选。决定能不能放目的基因以及如何放置目的基因。<br>第四步：再看外源 DNA 插入片段大小。质粒一般只能容纳小于10Kb 的外源 DNA 片段。一般来说，外源 DNA 片段越长，越难插入，越不稳定，转化效率越低。<br>第五步：是否含有表达系统元件，即启动子－核糖体结合位点－克隆位点－转录终止信号。这是用来区别克隆载体与表达载体。克隆载体中加入一些与表达调控有关的元件即成为表达载体。选用那种载体，还是要以实验目的为准绳。<br>第六步：启动子－核糖体结合位点－克隆位点－转录终止信号<br>（1）启动子－促进 DNA 转录的 DNA 序列，这个 DNA 区域常在基因或操纵子编码序列的上游，是 DNA 分子上可以与 RNApol 特异性结合并使之开始转录的部位，但启动子本身不被转录。<br>（2）增强子&#x2F;沉默子－为真核基因组（包括真核病毒基因组）中的一种具有增强邻近基因转录过程的调控顺序。其作用与增强子所在的位置或方向无关。即在所调控基因上游或下游均可发挥作用。&#x2F;沉默子－负增强子，负调控序列。<br>（3）核糖体结合位点&#x2F;起始密码&#x2F;SD 序列（Rbs&#x2F;AGU&#x2F;SDs）：mRNA 有核糖体的两个结合位点，对于原核而言是 AUG（起始密码）和 SD 序列。<br>（4）转录终止序列（终止子）&#x2F;翻译终止密码子：结构基因的最后一个外显子中有一个 AATAAA的保守序列，此位点 down－stream 有一段 GT 或 T 富丰区，这2部分共同构成 poly（A）加尾信号。结构基因的最后一个外显子中有一个 AATAAA 的保守序列，此位点 down－stream 有一段GT 或 T 富丰区，这2部分共同构成 poly（A）加尾信号。<br>质粒图谱上有的箭头顺时针有的箭头逆时针，那其实是代表两条 DNA 链，即质粒是环状双链DNA，它的启动子等在其中一条链上，而它的抗性基因在另一条链上 .根据表达宿主不同，构建时所选择的载体也会不同。</p><p><strong>二、目的基因的获得</strong><br>一般来说，目的基因的获得有三种途径：<br>调取基因：根据目的基因的序列，设计引物从含有目的基因的cDNA中通过PCR的方法调取目的基因，链接到克隆载体挑取单克隆进行测序，以获得想要的基因片段，这种方法相对成本较低，但是调取到的基因往往含有突变，还有不同基因的表达丰度不同，转录本比较复杂，或是基因片段很长，这些情况都很难调取到目的基因。<br>全基因合成：根据目的基因的DNA序列，直接设计合成目的基因。此方法准确性高，相对成本会高一些，个人操作比较困难，需要专业的合成公司完成。优点是可以合成难调取及人工改造的任何基因序列，同时可以进行密码子优化，提高目的基因在宿主内的表达量。</p><p><strong>三、克隆构建</strong><br>目前，克隆构建的方法多种多样，除了应用广泛的酶切链接以外，现在还有很多不依赖酶切位点的克隆构建方式。下面具体说一下双酶切方法构建载体的步骤。<br>实验材料</p><p>实验试剂</p><table><thead><tr><th>试剂名称</th><th>生产厂家</th></tr></thead><tbody><tr><td>载体pCDNA3.1</td><td>Transheep</td></tr><tr><td>大肠杆菌菌株DH5α</td><td>Tiangen</td></tr><tr><td>限制性内切酶</td><td>Fermentas</td></tr><tr><td>T4连接酶</td><td>Fermentas</td></tr><tr><td>质粒DNA小,大量抽提试剂盒</td><td>Axygen</td></tr><tr><td>凝胶回收试剂盒</td><td>Axygen</td></tr><tr><td>琼脂糖</td><td>Biowest</td></tr><tr><td>DNA ladder</td><td>Fermentas</td></tr></tbody></table><p>（2）X基因慢病毒载体的构建<br>X基因基因由Transheep全基因合成，构建于载体PUC57中。<br>PUC57-X基因 EcoRI&#x2F;BamHI酶切结果：</p><p><img src="https://assets.dxycdn.com/third-party/xheditor/xheditor_skin/blank.gif" alt="img"></p><p><img src="https://assets.dxycdn.com/third-party/xheditor/xheditor_skin/blank.gif" alt="img"></p><p>酶切完成后进行胶回收<br>\2. 载体用pCDNA3.1双酶切，酶切体系如下。<br>20ul酶切体系 37度3小时<br>4ul pCDNA3.1载体（500 ng&#x2F;ul）<br>1ul BamHI<br>1ul EcoRI<br>2ul 10×buffer<br>12 ul H2O<br>酶切完成后胶回收（见附录）</p><p><img src="https://assets.dxycdn.com/third-party/xheditor/xheditor_skin/blank.gif" alt="img"><img src="https://assets.dxycdn.com/third-party/xheditor/xheditor_skin/blank.gif" alt="img"></p><p>处理好的目的片段与载体连接反应体系：<br>6ul PCR 酶切回收片段（约50ng&#x2F;ul）<br>1ul 酶切好的载体（约50ng&#x2F;ul）<br>2ul ligase buffer<br>1ul T4ligase<br>10ul H2O<br>以上连接液在16℃过夜。<br>转化 (感受态细胞: DH5a),具体步骤见附录转化部分。<br>抗性: Amp; 37℃，培养过夜<br>转化后X基因分别平板挑菌, 37℃ 250转&#x2F;分钟摇菌14小时，PCR鉴定后，将阳性菌液送上海权阳生物技术有限公司测序。<br>X基因慢病毒载体单克隆菌落PCR鉴定（使用载体通用引物,PCR条带大小应比实际大200bp左右）：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;一、载体的选择及如何阅读质粒图谱&lt;/strong&gt;&lt;br&gt;目前，载体主要有病毒和非病毒两大类,其中质粒 DNA 是一种新的非病毒转基因载体。&lt;br&gt;一个合格质粒的组成要素：&lt;br&gt;（1）复制起始位点 Ori 即控制复制起始的位点。原核生物 DNA 分子中只有</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>蛋白质组学数据分析和展示</title>
    <link href="http://nikolahuang.github.io/2024/03/17/%E8%9B%8B%E7%99%BD%E8%B4%A8%E7%BB%84%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/"/>
    <id>http://nikolahuang.github.io/2024/03/17/%E8%9B%8B%E7%99%BD%E8%B4%A8%E7%BB%84%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%B1%95%E7%A4%BA/</id>
    <published>2024-03-17T09:03:15.000Z</published>
    <updated>2024-04-05T16:51:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>使用Maxquant对原始谱图搜库完成后，可以得到大量蛋白质的鉴定和定量信息。下一步就需要通过统计分析和生物信息学分析，从搜库得到的大量信息中筛选和寻找关键蛋白和信号通路，以及进行相关功能的验证。本讲我们会为大家介绍如何进行蛋白质组学的定量数据分析以及结果展示，主要包括：蛋白质鉴定和定量数据统计、差异表达蛋白筛选、功能注释和富集分析以及蛋白互作网络分析。</p><h3 id="定量数据统计和展示"><a href="#定量数据统计和展示" class="headerlink" title="定量数据统计和展示"></a><strong>定量数据统计和展示</strong></h3><p>在蛋白质组学数据分析过程中，首先会对所有的鉴定和定量数据进行统计和展示，主要关注蛋白鉴定数目、肽段鉴定数目、肽段分布情况以及样品相关性和重复性等内容，展示蛋白质组学数据的定量深度、可信度和重复性等。</p><p>如下图所示，蛋白质组定量深度主要体现在各个样品中鉴定及定量到的蛋白和肽段数量，数量越多，表明定量深度越深，意味着能够获得更全面的蛋白质组学信息。同时，不同样品间定量深度的差异，也可以初步反映样品和方法的重复性和稳定性。</p><p><img src="https://pic3.zhimg.com/80/v2-6d39941370abb6c9338a6034c662b122_1440w.webp" alt="img"></p><p>（肽段数量统计图（上）和蛋白数量统计图（下）[1]）</p><p>蛋白质组学数据的可信度，可通过各个蛋白鉴定到的肽段数量以及各条肽段鉴定到的谱图数量分别展示。一般认为鉴定到2条及以上肽段的蛋白或2张及以上谱图的肽段为可信度更高的鉴定结果。</p><p><img src="https://pic3.zhimg.com/80/v2-6f67c0ec5eb6fbaf6dbfc9cf5407c916_1440w.webp" alt="img"></p><p>（谱图数量分布图（上）&#x2F;肽段数量分布图（下） [1]）</p><p>蛋白质组定量数据的相关性和重复性可通过相关系数来体现，组内样品间的蛋白质组定量相关系数往往较高，而组间样品的相关系数则会稍低（如左图）。PCA分析则是通过降维算法，将数百乃至上万个蛋白的定量数据降维为2个或3个反映定量特征的主成分，从而直观展示不同样品之间的定量相关性，在空间位置上接近的点表明其定量特征接近，也就是数据相关性更高。同一组的样品在PCA分析结果中往往会更为聚集（如右图）。</p><p><img src="https://pic1.zhimg.com/80/v2-d51216dbd0bc17a7c9b47261d4ac4490_1440w.webp" alt="img"></p><p>（相关系数热图（左）和PCA分析图（右）[2]）</p><p>定量热图也是蛋白质组学中常用的展示定量数据的结果图形。在定量热图中，通常每一列代表一个样品，每一行代表一个蛋白，以色块颜色表示各个样品中蛋白的定量水平。通过颜色的变化和分布可以直观的展示不同样品中蛋白定量水平的相关性和差异性。</p><p><img src="https://pic2.zhimg.com/80/v2-fa5113e8db515018b2c6cb37dbd261b9_1440w.webp" alt="img"></p><p>（蛋白定量热图[3]）</p><h3 id="差异表达分析"><a href="#差异表达分析" class="headerlink" title="差异表达分析"></a><strong>差异表达分析</strong></h3><p>找出不同处理组间差异表达蛋白是蛋白质组学研究的重要目标之一。统计学上一般选取P值（P-value）和差异倍数（Fold change）两个参数实现差异蛋白的筛选，其中P-value由比较两组样品蛋白定量数据的T检验计算得出，要求各组样品数量不少于3个；Fold change是两样品中同一个蛋白的表达差异倍数，主要根据蛋白定量值计算。如下图所示，根据显著性P&lt;0.05和 Fold Change&gt;1.5或&lt;1&#x2F;1.5设定阈值可挑选出符合标准的差异蛋白质。</p><p><img src="https://pic4.zhimg.com/80/v2-391ee040bee2210b184a2c91e62b7893_1440w.webp" alt="img"></p><p>（差异蛋白火山图[4]）</p><p>筛选出差异表达蛋白后，也可再次通过定量热图与PCA分析图，更为直观地展示这些差异蛋白的定量特征，以及各样本组内及组间的相似和变异程度。</p><h3 id="功能注释和富集分析"><a href="#功能注释和富集分析" class="headerlink" title="功能注释和富集分析"></a><strong>功能注释和富集分析</strong></h3><p>以上分析完成后，有些实验还需要对蛋白的功能、分布、参与的通路等方面进行注释和富集，可为后续生物学和功能机制的研究提供参考和线索。</p><p>蛋白功能注释是将生物学信息关联到蛋白质序列的过程，使用的数据库主要有GO(gene ontology）、KEGG(Kyoto encyclopedia of genes and genomes)、COG(Clusters of Orthologous Groups of proteins)、HallmarkGeneset、Reactome等。以GO分析为例，可理解为将蛋白对应的基因分门别类地放入一个个功能条目的盒子中去，从功能（Molecular Function）、参与的生物途径（Biological Process）和细胞中的定位（Cellular Component）三个维度来较为全面地描述一个蛋白。如下图GO注释，饼图的每一个分区表示一个GO条目，分区大小表示本条目中蛋白数量在差异蛋白中的占比。</p><p><img src="https://pic1.zhimg.com/80/v2-8ca44ab2fd975cfc805711b88cb7c800_1440w.webp" alt="img"></p><p>（GO注释饼状图[5] ）</p><p>富集分析则是在功能注释的基础上的进一步分析，其主要目的是以背景蛋白为参照，分析差异蛋白较为集中分布的注释条目，从而筛选出与差异蛋白更相关、更可能具有生物学意义的功能注释条目。目前最常用的富集分析算法是基于超几何分布的Fisher精确检验。</p><p>富集分析通常以P&lt;0.05作为条目显著富集的筛选阈值。富集得到的注释条目可通过如下柱状图进行展示。其中GO富集分析通常会以不同颜色表示GO条目所属大类。</p><p><img src="https://pic1.zhimg.com/80/v2-337b34639e4ba370168261dffd1c8794_1440w.webp" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-57c2e0b655f6116cb3d0092fc6ad3e98_1440w.webp" alt="img"></p><p>（GO富集柱状图（上）和KEGG富集柱状图（下）[6]）</p><p>气泡图也是富集分析常见图形展示，相比柱状图可以通过气泡的横坐标、颜色、大小展示更多维度的富集参数，包括E-ratio（富集倍数）、p值和条目中蛋白数量等。其中富集倍数越大、p值越小说明该条目在差异蛋白中富集程度越显著。</p><p><img src="https://pic2.zhimg.com/80/v2-b68e4e71aab7f9d68310089014ed8f31_1440w.webp" alt="img"></p><p>（GO富集气泡图（左）和KEGG富集气泡图（右）[1]）</p><h3 id="互作网络分析"><a href="#互作网络分析" class="headerlink" title="互作网络分析"></a><strong>互作网络分析</strong></h3><p>在生物体内，蛋白质并非单独发挥作用，其功能的行使须依赖于其他蛋白的调控和介导，这种调控和介导要求蛋白质之间存在直接或间接的相互作用。</p><p>STRING（Search Tool for the Retrieval of Interaction Gene&#x2F;Proteins）数据库是目前使用最广泛、信息最全面的蛋白互作网络分析工具，既包含了已有报道的蛋白质互作数据，也包含了基于预测的蛋白质互作信息。文章中一般以PPI（Protein‑Protein Interaction）互作网络图进行展示，每个节点为一个差异蛋白，节点之间的连线表示两个蛋白之间存在已知的或预测可能存在的蛋白相互作用，节点颜色表示该蛋白在比较组中的定量信息，如下图所示。PPI互作网络可以直观的展示蛋白间的相互关联，并进一步帮助我们寻找其中的关键节点。</p><p><img src="https://pic4.zhimg.com/80/v2-1d8530ad5f6fd4601149dbaa9211b53f_1440w.webp" alt="img"></p><p>（蛋白互作网络图[7]）</p><p><strong>总结</strong></p><p>蛋白质组学的数据分析通常包含以下内容：通过比较不同蛋白质在不同样本中的表达情况，找到差异表达蛋白；通过功能注释和富集分析，找到差异蛋白显著富集的生物学功能和信号通路；对差异表达蛋白进行蛋白互作网络分析，展示差异蛋白间的相互关联，从而寻找网络中的关键节点。这些分析能够帮助我们筛选获得关键蛋白、生物学功能和信号通路，对于深度解析蛋白质组学数据，指导后续功能研究等具有重要意义。</p><p><strong>参考文献</strong></p><ol><li>Shu T, Ning W, Wu D, et al. Plasma Proteomics Identify Biomarkers and Pathogenesis of COVID-19[J]. Immunity, 2020, 53(5): 1108-1122</li><li>Lin Y H, Platt M P, Fu H, et al. Global Proteome and Phosphoproteome Characterization of Sepsis-induced Kidney Injury[J]. Mol Cell Proteomics, 2020, 19(12): 2030-2047.</li><li>Zhang Q, Lou Y, Yang J, et al. Integrated multiomic analysis reveals comprehensive tumour heterogeneity and novel immunophenotypic classification in hepatocellular carcinomas[J]. Gut, 2019, 68(11): 2019-2031.</li><li>Mohanty V, Subbannayya Y, Patil S, et al. Molecular alterations in oral cancer using high-throughput proteomic analysis of formalin-fixed paraffin-embedded tissue[J]. Journal of cell communication and signaling, 2021, 15(3): 447-459.</li><li>Wen L, Liu Y F, Jiang C, et al. Comparative Proteomic Profiling and Biomarker Identification of Traditional Chinese Medicine-Based HIV&#x2F;AIDS Syndromes[J]. Sci Rep, 2018, 8(1): 4187-4197.</li><li>Zhou F, Luo Q, Han L, et al. Proteomics reveals urine apolipoprotein A-I as a potential biomarker of acute kidney injury following percutaneous coronary intervention in elderly patients[J]. Exp Ther Med, 2021, 22(1): 745-755.</li><li>Ji F, Zhou M, Sun Z, et al. Integrative proteomics reveals the role of E3 ubiquitin ligase SYVN1 in hepatocellular carcinoma metastasis[J]. Cancer Commun (Lond), 2021, 41(10): 1007-1023.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;使用Maxquant对原始谱图搜库完成后，可以得到大量蛋白质的鉴定和定量信息。下一步就需要通过统计分析和生物信息学分析，从搜库得到的大量信息中筛选和寻找关键蛋白和信号通路，以及进行相关功能的验证。本讲我们会为大家介绍如何进行蛋白质组学的定量数据分析</summary>
      
    
    
    
    
    <category term="BioInfo" scheme="http://nikolahuang.github.io/tags/BioInfo/"/>
    
  </entry>
  
  <entry>
    <title>WES数据分析流程(下)--可视化</title>
    <link href="http://nikolahuang.github.io/2024/03/17/WES%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B-%E4%B8%8B/"/>
    <id>http://nikolahuang.github.io/2024/03/17/WES%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B-%E4%B8%8B/</id>
    <published>2024-03-17T06:53:33.000Z</published>
    <updated>2024-04-05T16:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>转自<a href="https://zhuanlan.zhihu.com/p/380684876">Die Linke</a></p><p>MyNotes：</p><p>总体概括为：全外显子测序的标准分析流程通常包括以下步骤：</p><p><strong>质量控制（Quality Control，QC）</strong></p><p>对原始测序数据进行质量控制，包括去除低质量的序列片段、过滤掉低质量的碱基和低覆盖度的测序片段等。</p><p><strong>读取比对（Read Alignment）</strong></p><p>将过滤后的测序数据比对到参考基因组上，以确定每个片段的位置和方向。</p><p><strong>变异检测（Variant Calling）</strong></p><p>通过对比测序数据和参考基因组，识别出样本中存在的单核苷酸多态性（Single Nucleotide Polymorphism，SNP）和插入&#x2F;删除多态性（Insertion&#x2F;Deletion，InDel）等变异。</p><p><strong>注释（Annotation）</strong></p><p>对检测到的变异进行注释，包括位置信息、功能影响、已知疾病关联等。</p><p><strong>过滤（Filtering）</strong></p><p>根据预设的过滤标准，过滤掉可能为假阳性的变异，如常见的多态性、测序误差等。</p><p><strong>数据解读（Data Interpretation）</strong></p><p>将过滤后的变异进行进一步分析和解读，以确定与研究对象相关的变异。</p><p><strong>功能验证（Functional Validation）</strong></p><p>通过实验验证已识别的变异是否与疾病相关，例如验证变异对基因表达、蛋白质功能的影响等。</p><hr><h3 id="分析流程"><a href="#分析流程" class="headerlink" title="分析流程"></a>分析流程</h3><ol><li><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作:"></a>准备工作:</h4></li><li><h5 id="数据上传"><a href="#数据上传" class="headerlink" title="数据上传:"></a>数据上传:</h5></li></ol><p>从本地硬盘通过<strong>FileZilla软件</strong>或在云端通过<a href="https://www.zhihu.com/search?q=scp%E5%8D%8F%E8%AE%AE&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">scp协议</a>将所需数据传输至进行分析的服务器.</p><ul><li>FileZilla示例:</li></ul><p>如下图所示，在窗口拖动数据文件到指定目录即可。</p><p><img src="https://pic1.zhimg.com/v2-8111d0db8f7f9825dd9b1e50e8838f78_b.jpg" alt="img"></p><ul><li>scp协议示例:</li></ul><p>命令行输入以下命令进行文件传输。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scp -r local_folder remote_user_name@remote_ip:remote_folder</span><br><span class="line">#-r表示递归传出路径下所有文件</span><br><span class="line">#local_folder为传出的本地文件夹</span><br><span class="line">#remote_user_name为接收文件的远程用户名</span><br><span class="line">#remote_ip为接收文件的远程用户所在的ip地址</span><br><span class="line"># remote_folder为远程用户下储存接收文件的文件夹</span><br></pre></td></tr></table></figure><ol start="2"><li><h5 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装:"></a>软件安装:</h5></li></ol><ul><li>先在服务器上安装conda, conda的安装使用请参照之前的文章<a href="https://zhuanlan.zhihu.com/p/174802525">生科院的老张：无root权限conda安装PyRosetta同源建模</a>，安装好后通过conda进一步安装软件<strong>fastqc, multiqc, trimmomatic, bwa, samtools, bcftools, vcftools, gffread</strong>, 参考代码如下:</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n WES_WGS_WGRS #新建一个名为WES_WGS_WGRS的conda环境</span><br><span class="line">conda activate WES_WGS_WGRS#激活进入新建的WES_WGS_WGRS环境</span><br><span class="line">conda install fastqc multiqc trimmomatic bwa samtools bcftools vcftools gffread #在该环境下安装fastqc等软件</span><br></pre></td></tr></table></figure><ul><li>如下图所示，<strong>ANNOVAR</strong>软件需要在官网 <a href="https://link.zhihu.com/?target=https://annovar.openbioinformatics.org/en/latest/user-guide/download/">Download ANNOVAR - ANNOVAR Documentation</a> 通过教育邮箱申请下载链接下载。</li></ul><p><img src="https://pic2.zhimg.com/v2-93f49395e5d0c2147f7287f37e7b7485_b.jpg" alt="img"></p><ul><li>通过wget下载安装gtfToGenePred:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64.v369/gtfToGenePred</span><br><span class="line">mkdir -p /path/to/save/gtfToGenePred/bin #创建gtfToGenePred的储存路径并创建bin目录</span><br><span class="line">cp gtfToGenePred /path/to/save/gtfToGenePred/bin #将gtfToGenePred移入储存路径下的bin目录</span><br><span class="line">chmod +x /path/to/save/gtfToGenePred/bin/gtfToGenePred #赋予其读写执行全部权限</span><br></pre></td></tr></table></figure><ul><li>在R中安装stringr, circlize, grid, ComplexHeatmap, 需先安装Bioconductor, 详见之前的文章<a href="https://zhuanlan.zhihu.com/p/345896914">生科院的老张：RNAseq转录组差异表达分析教程</a>:</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BiocManager<span class="operator">::</span>install<span class="punctuation">(</span><span class="string">&#x27;stringr&#x27;</span><span class="punctuation">)</span></span><br><span class="line">BiocManager<span class="operator">::</span>install<span class="punctuation">(</span><span class="string">&#x27;circlize&#x27;</span><span class="punctuation">)</span></span><br><span class="line">BiocManager<span class="operator">::</span>install<span class="punctuation">(</span><span class="string">&#x27;grid&#x27;</span><span class="punctuation">)</span></span><br><span class="line">BiocManager<span class="operator">::</span>install<span class="punctuation">(</span><span class="string">&#x27;ComplexHeatmap&#x27;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ol start="3"><li><h5 id="参考基因组和基因组注释文件"><a href="#参考基因组和基因组注释文件" class="headerlink" title="参考基因组和基因组注释文件:"></a>参考基因组和<a href="https://www.zhihu.com/search?q=%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%B3%A8%E9%87%8A&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">基因组注释</a>文件:</h5></li></ol><p>在对应的网站下载参考基因组和基因组注释文件, 如在NCBI的genome搜索<strong>ZM4</strong>能找到我要的物种对应的<strong>reference genome</strong>和<strong>annotation</strong>. </p><p>如图所示，点击红色方框内的genome和GFF会分别下载到.fasta格式的参考<a href="https://www.zhihu.com/search?q=%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%BA%8F%E5%88%97&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">基因组序列</a>和.gff格式的基因组注释。<strong>下方的基因组全长可以记录下来，在之后的分析中会使用到</strong>。</p><p><img src="https://pic4.zhimg.com/v2-f1c0fc836b2974bb1e039a656ad3cc17_b.jpg" alt="img"></p><hr><ol start="2"><li><h4 id="质量控制"><a href="#质量控制" class="headerlink" title="质量控制:"></a>质量控制:</h4></li></ol><p>任何组学分析第一步都是对测序数据进行质量控制，细节可以参考之前的转录组教程 <a href="https://zhuanlan.zhihu.com/p/345896914">生科院的老张：RNAseq转录组差异表达分析教程</a> , 和转录组一样，使用md5检查数据完整性，fastqc进行质量检测，multiqc合并报告，trimmomatic进行质量过滤,参考代码如下：</p><ol><li><h5 id="md5检查数据完整性："><a href="#md5检查数据完整性：" class="headerlink" title="md5检查数据完整性："></a>md5检查数据完整性：</h5></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">md5sum *gz &gt; md5.txt &amp;&amp; md5sum -c md5.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*gz 任意以gz结尾的文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt; 运行结果保存至</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&amp;&amp; 连接符，前一命令完成继续执行下一命令</span></span><br></pre></td></tr></table></figure><p>2.2.2 fastqc质量控制与multiqc合并质控报告:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastqc *gz &amp;&amp; multiqc ./</span><br><span class="line"># 对所有gz结尾文件进行质控并对当前目录下所有质控报告进行合并</span><br></pre></td></tr></table></figure><p>2.2.3 trimmomatic质量过滤:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">trimmomatic </span><br><span class="line">PE #双端测序，单端测序为SE</span><br><span class="line">-threads 4 #指定线程数为4</span><br><span class="line">~/WES_WGS_WGRS/data/sample1/sample1_1.fq.gz #输入序列</span><br><span class="line">~/WES_WGS_WGRS/data/sample1/sample1_2.fq.gz</span><br><span class="line">~/WES_WGS_WGRS/data/sample1/sample1_paired_clean_1.fq.gz #输出配对序列和非配对序列</span><br><span class="line">~/WES_WGS_WGRS/data/sample1/sample1_unpair_clean_1.fq.gz </span><br><span class="line">~/WES_WGS_WGRS/data/sample1/sample1_paired_clean_2.fq.gz</span><br><span class="line">~/WES_WGS_WGRS/data/sample1/sample1_unpair_clean_2.fq.gz</span><br><span class="line">ILLUMINACLIP:/data1/guest/yinlei/miniconda3/pkgs/trimmomatic-0.39-1/share/trimmomatic/adapters/TruSeq3-PE-2.fa:2:30:10:1:true </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">去除ILLUMINA接头，根据质控报告选择trimmomatic文件夹adapters路径下的接头文件</span></span><br><span class="line">LEADING:3 #从reads开头切除质量低于阈值3的碱基</span><br><span class="line">TRAILING:3 #从reads末尾切除质量低于阈值3的碱基</span><br><span class="line">SLIDINGWINDOW:4:20 #从reads 5‘端开始进行长度为4的滑窗过滤，切除碱基质量低于阈值20的碱基</span><br><span class="line">MINLEN:50 #丢弃剪切后长度低于阈值50的reads</span><br><span class="line">TOPHRED33 #将reads的碱基质量值体系转为phred-33，若为phred-64则为TOPHRED64</span><br></pre></td></tr></table></figure><p>由于一批测序数据中有多个测序文件，因此需要循环以上过程，参考代码如下图所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for dir in A B C D; #循环读取A,B,C,D四个目录</span><br><span class="line">do XXXX; #执行XXXX</span><br><span class="line">done #结束命令</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/v2-9703758821f41b86bfa57ed16c315d27_b.jpg" alt="img"></p><p>trimmomatic质量过滤</p><hr><ol start="3"><li><h4 id="bwa序列比对"><a href="#bwa序列比对" class="headerlink" title="bwa序列比对:"></a>bwa序列比对:</h4></li></ol><p>将经过质量控制的序列与<a href="https://www.zhihu.com/search?q=%E5%8F%82%E8%80%83%E5%9F%BA%E5%9B%A0%E7%BB%84&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">参考基因组</a>进行比对，参考代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立比对索引</span></span><br><span class="line">bwa index genome.fa</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将序列与基因组进行比对</span></span><br><span class="line">bwa mem -t 16 genome.fa sample1_paired_clean_1.fq.gz sample1_paired_clean_2.fq.gz &gt; sample1.sam</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数如下：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mem 比对算法</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t 16 指定线程数为16</span></span><br></pre></td></tr></table></figure><p>同样由于一批测序数据中有多个测序文件，因此需要循环以上过程，参考代码如下图所示：</p><p><img src="https://pic1.zhimg.com/v2-b216223c5c2756b90f70edaf521b5f28_b.png" alt="img"></p><p>bwa比对基因组</p><hr><ol start="4"><li><h4 id="samtools去除PCR重复后排序："><a href="#samtools去除PCR重复后排序：" class="headerlink" title="samtools去除PCR重复后排序："></a>samtools去除PCR重复后排序：</h4></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将比对结果sample1.sam转为.bam格式</span></span><br><span class="line">samtools view -bS sample1.sam &gt; sample1.bam</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数如下:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-bS 表示输出bam文件，输入为sam文件</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">去除PCR重复</span></span><br><span class="line">samtools rmdup -s sample1.bam sample1.rm.bam</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">排序</span></span><br><span class="line">samtools sort -@ 16 sample1.rm.bam &gt; sample1.sorted.bam</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数如下：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-@ 16 指定线程数为16</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立索引</span></span><br><span class="line">samtools index sample1.sorted.bam</span><br></pre></td></tr></table></figure><p>同样由于一批测序数据中有多个测序文件，因此需要循环以上过程，参考代码如下图所示：</p><p><img src="https://pic4.zhimg.com/v2-4f78fbccb367a64b7a57531bd386ce1b_b.png" alt="img"></p><p>samtools去除PCR重复，排序和建立索引</p><hr><ol start="5"><li><h4 id="samtools进行SNP-calling："><a href="#samtools进行SNP-calling：" class="headerlink" title="samtools进行SNP calling："></a>samtools进行SNP calling：</h4></li></ol><p>得到基因组比对的去重复排序结果后，我们将比对信息中SNP的信息提取出来并整理成通用的突变格式VCF.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SNP calling</span></span><br><span class="line">samtools mpileup -gSDf genome.fa sample1.sorted.bam sample1.bcf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将SNP鉴定结果sample1.bcf转为vcf格式</span></span><br><span class="line">bcftools view -cvNg sample1.bcf sample1.vcf</span><br></pre></td></tr></table></figure><p>同样由于一批测序数据中有多个测序文件，因此需要循环以上过程，参考代码如下图所示：</p><p><img src="https://pic3.zhimg.com/v2-3804e06f71efc568efbefce3e3786d9e_b.png" alt="img"></p><p>samtools进行SNP calling</p><p><img src="https://pic1.zhimg.com/v2-32f56b62fbe940b13b82537ce6542244_b.png" alt="img"></p><p>bcftools进行vcf格式转换</p><hr><ol start="6"><li><h4 id="vcftools进行SNP质量过滤："><a href="#vcftools进行SNP质量过滤：" class="headerlink" title="vcftools进行SNP质量过滤："></a>vcftools进行SNP质量过滤：</h4></li></ol><p>得到的VCF文件记录了我们分析得到的外显子(对应WES)或基因组(对应WGS或WGRS)上的全部SNP信息，但是这里边有一些是低质量的噪音信息，我们需要通过设置一系列的筛选标准来将噪音去除，称为SNP质量过滤或数据清洗。我一般选用以下三个标准：</p><ul><li>–max-missing: 最大缺失值</li><li>–minDP: 最小测序深度</li><li>–minQ: 最小碱基质量</li></ul><p>其中比较难以理解的是最大缺失值这个参数，vcftools官方给出的定义是这样的：</p><p><img src="https://pic4.zhimg.com/v2-b3f3afce179cbcf85e1a27f1aa631a43_b.png" alt="img"></p><p>最大缺失值官方定义</p><p>我盯住的是0允许全部缺失而1代表不允许缺失，那就是<strong>说该值是介于0～1之间的浮点数，其大小代表着最少需要多少平行含有该SNP的比例。如0.3就代表至少30%的平行都有该SNP.</strong></p><p>参考代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcftools --vcf sample1.vcf --minDP 3 --max-missing 0.3 --minQ 30 --recode --recode-INFO-all --out sample1.filtered</span><br></pre></td></tr></table></figure><p>同样由于一批测序数据中有多个测序文件，因此需要循环以上过程，参考代码如下图所示：</p><p><img src="https://pic4.zhimg.com/v2-a621573119dd0df2c15dd293d469d9df_b.png" alt="img"></p><p>vcftools进行SNP质量过滤</p><hr><ol start="7"><li><h4 id="ANNOVAR进行SNP注释"><a href="#ANNOVAR进行SNP注释" class="headerlink" title="ANNOVAR进行SNP注释:"></a>ANNOVAR进行SNP注释:</h4></li></ol><p>利用前面下载的基因组和注释文件对质量过滤后的SNP进行注释, 【<strong>将基因组和注释文件放在同一路径下】！</strong></p><ol><li><h5 id="gffread和gtfToGenePred进行注释文件的格式转换："><a href="#gffread和gtfToGenePred进行注释文件的格式转换：" class="headerlink" title="gffread和gtfToGenePred进行注释文件的格式转换："></a>gffread和gtfToGenePred进行注释文件的格式转换：</h5></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">我们下载的参考基因组注释文件是.gff格式的，需要转换为.gtf格式</span></span><br><span class="line">gffread ZM4_annotation.gff -T -o ZM4_annotation.gtf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将.gtf格式的注释文件转为ANNOVAR需要的输入文件</span></span><br><span class="line">/path/to/bin/gtfToGenePred -genePredExt ZM4_annotation.gtf ZM4_refGene.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">【此时ZM4_refGene.txt应该和ZM4_annotation.gtf, ZM4_genome.fa是同一路径！！！】</span></span><br></pre></td></tr></table></figure><ol start="2"><li><h5 id="ANNOVAR进行注释："><a href="#ANNOVAR进行注释：" class="headerlink" title="ANNOVAR进行注释："></a>ANNOVAR进行注释：</h5></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立注释索引</span></span><br><span class="line">perl /path/to/annovar/retrieve_seq_from_fasta.pl --format refGene --seqfile ZM4_genome.fa ZM4_refGene.txt --outfile ZM4_refGeneMrna.fa</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">【此时ZM4_refGeneMrna.fa应该和ZM4_refGene.txt, ZM4_annotation.gtf, ZM4_genome.fa是同一路径！！！】</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将SNP信息文件.vcf转为ANNOVAR需要的输入文件</span></span><br><span class="line">perl /path/to/annovar/convert2annovar.pl -format vcf4old sample1.filtered.recode.vcf &gt; sample1.annovar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注释</span></span><br><span class="line">perl /path/to/annovar/annotate_variation.pl -buildver ZM4 -outfile sample1.anno sample1.annovar /path/to/ZM4_refGeneMrna.fa and ZM4_refGene.txt/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数详解：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-buildver ZM4 指定注释文件的版本是ZM4, 即注释文件XX_refGene.txt和XX_refGeneMrna.fa的前缀XX</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-outfile 输出注释文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后接输入文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后接注释文件的储存路径，即ZM4_refGeneMrna.fa, ZM4_refGene.txt, ZM4_annotation.gtf, ZM4_genome.fa的储存路径</span></span><br></pre></td></tr></table></figure><p>SNP注释结果文件预览结果如下图所示：</p><p><img src="https://pic1.zhimg.com/v2-4a973d12b5754a8aafac5ce6e22913cc_b.png" alt="img"></p><p>由左至右各列信息为：</p><ul><li>所在行</li><li>同义&#x2F;非同义突变</li><li>突变基因&#x2F;外显子&#x2F;核苷酸变化及位置&#x2F;氨基酸变化及位置</li><li>染色体</li><li>突变起始位置</li><li>突变终止位置</li><li><a href="https://www.zhihu.com/search?q=%E5%8E%9F%E5%A7%8B%E5%BA%8F%E5%88%97&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">原始序列</a></li><li>突变序列</li><li>同源&#x2F;异源</li><li>FQ: Phred probability of all samples being the same</li><li>XXX </li><li><a href="https://www.zhihu.com/search?q=%E6%B5%8B%E5%BA%8F%E8%B4%A8%E9%87%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">测序质量</a></li></ul><p>同样由于一批测序数据中有多个测序文件，因此需要循环注释过程，参考代码如下图所示：</p><p><img src="https://pic3.zhimg.com/v2-edb807163059c83846400ed378457922_b.png" alt="img"></p><p>ANNOVAR进行SNP注释</p><hr><ol start="8"><li><h4 id="可视化补充信息—-samtools统计测序覆盖度和深度"><a href="#可视化补充信息—-samtools统计测序覆盖度和深度" class="headerlink" title="可视化补充信息—-samtools统计测序覆盖度和深度:"></a>可视化补充信息—-samtools<a href="https://www.zhihu.com/search?q=%E7%BB%9F%E8%AE%A1%E6%B5%8B%E5%BA%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">统计测序</a>覆盖度和深度:</h4></li></ol><p>前方步骤中得到的去除PCR重复排序后的比对结果sample1.sorted.bam, 可通过samtools统计其中包含的测序覆盖度和深度信息用于可视化，参考代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">samtools depth sample1.sorted.bam sample1.depth</span><br></pre></td></tr></table></figure><p>得到的.depth文件预览结果如下：</p><ul><li>第一列为染色体名称</li><li>第二列为染色体上的核苷酸位置</li><li>第三列为该位置上的测序深度</li></ul><p><img src="https://pic2.zhimg.com/v2-a731b92c8c2fe25660cdc6fe1a71b2b1_b.jpg" alt="img"></p><p>samtools进行测序覆盖度和深度统计</p><hr><h3 id="可视化："><a href="#可视化：" class="headerlink" title="可视化："></a>可视化：</h3><ol><li><h4 id="测序覆盖度和深度："><a href="#测序覆盖度和深度：" class="headerlink" title="测序覆盖度和深度："></a>测序覆盖度和深度：</h4></li></ol><p>将上一步得到的.depth文件用于统计测序深度与覆盖度，在Python中的参考代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">######################################################PARAMETERS#######################################################</span></span><br><span class="line">work_dir=<span class="string">&#x27;/Users/ZYP/Downloads/WES_analysis_on_ZM4_RNAseq_data/3.raw/depth/&#x27;</span> <span class="comment">#输入和输出文件路径</span></span><br><span class="line">files=[<span class="string">&#x27;8P_MUT1&#x27;</span>,<span class="string">&#x27;8P_OE1&#x27;</span>,<span class="string">&#x27;8P_WT1&#x27;</span>,<span class="string">&#x27;G5_MUT1&#x27;</span>,<span class="string">&#x27;G5_OE1&#x27;</span>,<span class="string">&#x27;G5_WT1&#x27;</span>,<span class="string">&#x27;8P_MUT2&#x27;</span>,<span class="string">&#x27;8P_OE2&#x27;</span>,<span class="string">&#x27;8P_WT2&#x27;</span>,<span class="string">&#x27;G5_MUT2&#x27;</span>,<span class="string">&#x27;G5_OE2&#x27;</span>,<span class="string">&#x27;G5_WT2&#x27;</span>] <span class="comment">#输入文件名前缀</span></span><br><span class="line">start_position=<span class="number">254</span><span class="comment">#from depth file 测序起始位置</span></span><br><span class="line">end_position=<span class="number">2056015</span><span class="comment">#from depth file 测序终止位置</span></span><br><span class="line">distance=<span class="number">1000</span><span class="comment">#distance for calculating average depth 用于统计平均深度和覆盖度的片段大小</span></span><br><span class="line">length_genome=<span class="number">2056363</span><span class="comment">#from genome 基因组总长</span></span><br><span class="line"><span class="comment">#######################################################################################################################</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">    list_pos = []</span><br><span class="line">    list_depth = []</span><br><span class="line">    sum_depths = <span class="number">0</span></span><br><span class="line">    distance_pos = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(work_dir+name+<span class="string">&#x27;.depth&#x27;</span>):</span><br><span class="line">        sum_depths += <span class="built_in">float</span>(line[:-<span class="number">1</span>].split(<span class="string">&#x27;\t&#x27;</span>)[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">if</span> start_position &gt;distance*distance_pos:</span><br><span class="line">            list_pos.append(distance_pos)</span><br><span class="line">            list_depth.append(<span class="number">0</span>)</span><br><span class="line">            distance_pos+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> start_position==distance*distance_pos <span class="keyword">or</span> start_position==length_genome:</span><br><span class="line">            list_pos.append(distance_pos)</span><br><span class="line">            <span class="keyword">if</span> start_position==distance*distance_pos:</span><br><span class="line">                list_depth.append(sum_depths/distance)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                list_depth.append(sum_depths/(length_genome%distance))</span><br><span class="line">            sum_depths=<span class="number">0</span></span><br><span class="line">            distance_pos += <span class="number">1</span></span><br><span class="line">        start_position+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> start_position &lt; length_genome:</span><br><span class="line">        <span class="keyword">if</span> start_position &gt; distance*(distance_pos-<span class="number">1</span>):</span><br><span class="line">            list_pos.append(distance_pos)</span><br><span class="line">            list_depth.append(sum_depths/(start_position-distance*(distance_pos-<span class="number">1</span>)))</span><br><span class="line">            distance_pos+=<span class="number">1</span></span><br><span class="line">        list_pos.append(distance_pos)</span><br><span class="line">        list_depth.append(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;data loading finished!&#x27;</span>)</span><br><span class="line">    ax=sns.barplot(x=list_pos,y=list_depth)</span><br><span class="line">    ax.spines[<span class="string">&#x27;top&#x27;</span>].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax.spines[<span class="string">&#x27;right&#x27;</span>].set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax.spines[<span class="string">&#x27;left&#x27;</span>].set_color(<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_color(<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.savefig(work_dir+name+<span class="string">&#x27;_depth.pdf&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>运行结果如下图所示：</p><p><img src="https://pic2.zhimg.com/v2-77bad2eefbf63f30555d5127f8a5fd4d_b.png" alt="img"></p><p>全基因组测序深度覆盖图</p><hr><ol start="2"><li><h4 id="SNP在基因组浏览器IGV的可视化"><a href="#SNP在基因组浏览器IGV的可视化" class="headerlink" title="SNP在基因组浏览器IGV的可视化:"></a>SNP在<a href="https://www.zhihu.com/search?q=%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%B5%8F%E8%A7%88%E5%99%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">基因组浏览器</a>IGV的可视化:</h4></li></ol><p>前方得到的去重复排序后的比对结果文件.sorted.bam可以在基因组浏览器IGV (下载链接为 <a href="https://link.zhihu.com/?target=http://software.broadinstitute.org/software/igv/download">http://software.broadinstitute.org/software/igv/download</a> ) 中打开，从而在基因组全局和单核苷酸局部进行个性化浏览和分析。</p><p><img src="https://pic3.zhimg.com/v2-4ae5313aef5006834c505a4738709c3e_b.jpg" alt="img"></p><p>IGV可视化基因组</p><hr><ol start="3"><li><h4 id="SNV-单核苷酸变异-和InDel-插入缺失-分析："><a href="#SNV-单核苷酸变异-和InDel-插入缺失-分析：" class="headerlink" title="SNV(单核苷酸变异)和InDel(插入缺失)分析："></a>SNV(单核苷酸变异)和InDel(插入缺失)分析：</h4></li></ol><p>包括以下部分：</p><ul><li>SNV(单核苷酸变异，包括同义突变和<a href="https://www.zhihu.com/search?q=%E9%9D%9E%E5%90%8C%E4%B9%89%E7%AA%81%E5%8F%98&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">非同义突变</a>)</li><li>Nonsynonymous SNV(非同义突变单核苷酸变异)</li><li>Amino Acid Substitution(由非同义突变造成的氨基酸替换)</li></ul><p>以ANNOVAR的SNP注释结果文件为输入，在Python中的参考代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#######################################################PARAMETERS#######################################################</span></span><br><span class="line">path=<span class="string">&#x27;/Users/ZYP/Downloads/WES_analysis_on_ZM4_RNAseq_data/3.raw/annotation/&#x27;</span> <span class="comment">#输入和输出文件路径</span></span><br><span class="line">files=[<span class="string">&#x27;8P_MUT1&#x27;</span>,<span class="string">&#x27;8P_OE1&#x27;</span>,<span class="string">&#x27;8P_WT1&#x27;</span>,<span class="string">&#x27;G5_MUT1&#x27;</span>,<span class="string">&#x27;G5_OE1&#x27;</span>,<span class="string">&#x27;G5_WT1&#x27;</span>,<span class="string">&#x27;8P_MUT2&#x27;</span>,<span class="string">&#x27;8P_OE2&#x27;</span>,<span class="string">&#x27;8P_WT2&#x27;</span>,<span class="string">&#x27;G5_MUT2&#x27;</span>,<span class="string">&#x27;G5_OE2&#x27;</span>,<span class="string">&#x27;G5_WT2&#x27;</span>] <span class="comment">#输入文件名前缀</span></span><br><span class="line"><span class="comment">########################################################################################################################</span></span><br><span class="line">list_sample_SNV=[]</span><br><span class="line">list_para_SNV=[]</span><br><span class="line">list_SNV_name=[]</span><br><span class="line">list_sample_SNV_nonsy=[]</span><br><span class="line">list_para_SNV_nonsy=[]</span><br><span class="line">list_SNV_nonsy_name=[]</span><br><span class="line">list_sample_cAA=[]</span><br><span class="line">list_para_cAA=[]</span><br><span class="line">list_cAA_name=[]</span><br><span class="line">save_file_cAA=<span class="built_in">open</span>(path+<span class="string">&#x27;AA_substitution.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">save_file_cAA.write(<span class="string">&#x27;Sample&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;SNP type&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;Gene&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;REF NA&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;ALT NA&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;POS NA&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;REF AA&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;ALT AA&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;POS AA&#x27;</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">save_file_InDel=<span class="built_in">open</span>(path+<span class="string">&#x27;InDel.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">save_file_InDel.write(<span class="string">&#x27;Sample&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;SNP type&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;Hom/Het&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;GeneFrom&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;GeneIn&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;Frame&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;Effect&#x27;</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    sample=file[:-<span class="number">1</span>]</span><br><span class="line">    para=file[-<span class="number">1</span>]</span><br><span class="line">    dict_SNV = &#123;<span class="string">&#x27;A&gt;T|T&gt;A&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;A&gt;C|T&gt;G&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;A&gt;G|T&gt;C&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;C&gt;G|G&gt;C&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;G&gt;A|C&gt;T&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;G&gt;T|C&gt;A&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">    dict_SNV_nonsy = &#123;<span class="string">&#x27;A&gt;T|T&gt;A&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;A&gt;C|T&gt;G&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;A&gt;G|T&gt;C&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;C&gt;G|G&gt;C&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;G&gt;A|C&gt;T&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;G&gt;T|C&gt;A&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">    dict_cAA = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(path+<span class="string">&#x27;SNP_annotation_&#x27;</span>+file+<span class="string">&#x27;.txt&#x27;</span>):</span><br><span class="line">        kind=line.split(<span class="string">&#x27;\t&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> kind <span class="keyword">in</span> [<span class="string">&#x27;frameshift insertion&#x27;</span>,<span class="string">&#x27;framshift deletion&#x27;</span>]:</span><br><span class="line">            confusion=line.split(<span class="string">&#x27;\t&#x27;</span>)[<span class="number">8</span>]</span><br><span class="line">            geneFrom_geneIn_frame_effect = line.split(<span class="string">&#x27;\t&#x27;</span>)[<span class="number">2</span>]</span><br><span class="line">            geneFrom=geneFrom_geneIn_frame_effect.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            geneIn=geneFrom_geneIn_frame_effect.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            frame=geneFrom_geneIn_frame_effect.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line">            effect=geneFrom_geneIn_frame_effect.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">            save_file_InDel.write(file+<span class="string">&#x27;\t&#x27;</span>+kind+<span class="string">&#x27;\t&#x27;</span>+confusion+<span class="string">&#x27;\t&#x27;</span>+geneFrom+<span class="string">&#x27;\t&#x27;</span>+geneIn+<span class="string">&#x27;\t&#x27;</span>+frame+<span class="string">&#x27;\t&#x27;</span>+effect+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> kind <span class="keyword">in</span> [<span class="string">&#x27;synonymous SNV&#x27;</span>,<span class="string">&#x27;nonsynonymous SNV&#x27;</span>]:</span><br><span class="line">            gene_cNA_cAA=line.split(<span class="string">&#x27;\t&#x27;</span>)[<span class="number">2</span>]</span><br><span class="line">            gene=gene_cNA_cAA.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            cNA=gene_cNA_cAA.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>][<span class="number">2</span>:]</span><br><span class="line">            cAA=gene_cNA_cAA.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">1</span>][<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">            REF_NA=cNA[<span class="number">0</span>]</span><br><span class="line">            ALT_NA=cNA[-<span class="number">1</span>]</span><br><span class="line">            POS_NA=cNA[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">            REF_AA=cAA[<span class="number">0</span>]</span><br><span class="line">            ALT_AA=cAA[-<span class="number">1</span>]</span><br><span class="line">            POS_AA=cAA[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">            save_file_cAA.write(file+<span class="string">&#x27;\t&#x27;</span>+kind+<span class="string">&#x27;\t&#x27;</span>+gene+<span class="string">&#x27;\t&#x27;</span>+REF_NA+<span class="string">&#x27;\t&#x27;</span>+ALT_NA+<span class="string">&#x27;\t&#x27;</span>+POS_NA+<span class="string">&#x27;\t&#x27;</span>+REF_AA+<span class="string">&#x27;\t&#x27;</span>+ALT_AA+<span class="string">&#x27;\t&#x27;</span>+POS_AA+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> dict_SNV.keys():</span><br><span class="line">                list_changes=key.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> change <span class="keyword">in</span> list_changes:</span><br><span class="line">                    <span class="keyword">if</span> REF_NA==change[<span class="number">0</span>] <span class="keyword">and</span> ALT_NA==change[-<span class="number">1</span>]:</span><br><span class="line">                        dict_SNV[key]+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> kind==<span class="string">&#x27;nonsynonymous SNV&#x27;</span>:</span><br><span class="line">                name_cAA=REF_AA+<span class="string">&#x27;&gt;&#x27;</span>+ALT_AA</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> dict_SNV_nonsy.keys():</span><br><span class="line">                    list_changes = key.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">                    <span class="keyword">for</span> change <span class="keyword">in</span> list_changes:</span><br><span class="line">                        <span class="keyword">if</span> REF_NA==change[<span class="number">0</span>] <span class="keyword">and</span> ALT_NA==change[-<span class="number">1</span>]:</span><br><span class="line">                            dict_SNV_nonsy[key]+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> name_cAA <span class="keyword">not</span> <span class="keyword">in</span> dict_cAA.keys():</span><br><span class="line">                    dict_cAA[name_cAA]=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dict_cAA[name_cAA]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> SNV <span class="keyword">in</span> dict_SNV.keys():</span><br><span class="line">        <span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,dict_SNV[SNV]):</span><br><span class="line">            list_sample_SNV.append(sample)</span><br><span class="line">            list_para_SNV.append(para)</span><br><span class="line">            list_SNV_name.append(SNV)</span><br><span class="line">    <span class="keyword">for</span> SNV_nonsy <span class="keyword">in</span> dict_SNV_nonsy.keys():</span><br><span class="line">        <span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, dict_SNV[SNV_nonsy]):</span><br><span class="line">            list_sample_SNV_nonsy.append(sample)</span><br><span class="line">            list_para_SNV_nonsy.append(para)</span><br><span class="line">            list_SNV_nonsy_name.append(SNV_nonsy)</span><br><span class="line">    <span class="keyword">for</span> cAA <span class="keyword">in</span> dict_cAA.keys():</span><br><span class="line">        <span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, dict_cAA[cAA]):</span><br><span class="line">            list_sample_cAA.append(sample)</span><br><span class="line">            list_para_cAA.append(para)</span><br><span class="line">            list_cAA_name.append(cAA)</span><br><span class="line">data_SNV=&#123;<span class="string">&#x27;sample&#x27;</span>:list_sample_SNV,<span class="string">&#x27;parallel&#x27;</span>:list_para_SNV,<span class="string">&#x27;SNV&#x27;</span>:list_SNV_name&#125;</span><br><span class="line">data_SNV=pd.DataFrame(data_SNV)</span><br><span class="line">ax1=sns.catplot(x=<span class="string">&#x27;SNV&#x27;</span>, hue=<span class="string">&#x27;parallel&#x27;</span>, col=<span class="string">&#x27;sample&#x27;</span>, kind=<span class="string">&#x27;count&#x27;</span>,data=data_SNV,palette=<span class="string">&#x27;Set1&#x27;</span>)</span><br><span class="line">plt.savefig(path+<span class="string">&#x27;SNV.pdf&#x27;</span>)</span><br><span class="line">data_SNV_nonsy=&#123;<span class="string">&#x27;sample&#x27;</span>:list_sample_SNV_nonsy,<span class="string">&#x27;parallel&#x27;</span>:list_para_SNV_nonsy,<span class="string">&#x27;nonsynonymous SNV&#x27;</span>:list_SNV_nonsy_name&#125;</span><br><span class="line">data_SNV_nonsy=pd.DataFrame(data_SNV_nonsy)</span><br><span class="line">ax2=sns.catplot(x=<span class="string">&#x27;nonsynonymous SNV&#x27;</span>, hue=<span class="string">&#x27;parallel&#x27;</span>, col=<span class="string">&#x27;sample&#x27;</span>, kind=<span class="string">&#x27;count&#x27;</span>,data=data_SNV_nonsy,palette=<span class="string">&#x27;Set1&#x27;</span>)</span><br><span class="line">plt.savefig(path+<span class="string">&#x27;Nonsynonymous_SNV.pdf&#x27;</span>)</span><br><span class="line">data_cAA=&#123;<span class="string">&#x27;sample&#x27;</span>:list_sample_cAA,<span class="string">&#x27;parallel&#x27;</span>:list_para_cAA,<span class="string">&#x27;AA substitution&#x27;</span>:list_cAA_name&#125;</span><br><span class="line">data_cAA=pd.DataFrame(data_cAA)</span><br><span class="line">ax3=sns.catplot(x=<span class="string">&#x27;AA substitution&#x27;</span>, hue=<span class="string">&#x27;parallel&#x27;</span>, col=<span class="string">&#x27;sample&#x27;</span>, kind=<span class="string">&#x27;count&#x27;</span>,data=data_cAA,palette=<span class="string">&#x27;Set1&#x27;</span>)</span><br><span class="line">plt.savefig(path+<span class="string">&#x27;AA_substitution.pdf&#x27;</span>)</span><br><span class="line">save_file_cAA.close()</span><br></pre></td></tr></table></figure><p>如图所示，运行结束得到可视化结果和记录SNV与InDel的两个文件SNV.txt和InDel.txt .</p><p><img src="https://pic4.zhimg.com/v2-0af7b94649de8f5025e4e4b815e2a5c7_b.jpg" alt="img"></p><p>SNV and AA substitution</p><p><img src="https://pic4.zhimg.com/v2-d2403cc08e122cc8961f30bbedfb7e3f_b.jpg" alt="img"></p><p>SNV and InDel</p><hr><ol start="4"><li><h4 id="全基因组测序圈图可视化："><a href="#全基因组测序圈图可视化：" class="headerlink" title="全基因组测序圈图可视化："></a>全基因组测序圈图可视化：</h4></li></ol><p>以前文中提到的测序深度文件.depth, ANNOVAR的SNP注释结果文件, 以及基因组注释文件.gff为输入，在R中的参考代码如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>stringr<span class="punctuation">)</span>    <span class="comment">#方便处理字符串</span></span><br><span class="line">library<span class="punctuation">(</span>circlize<span class="punctuation">)</span>    <span class="comment">#绘制圈图</span></span><br><span class="line">library<span class="punctuation">(</span>grid<span class="punctuation">)</span>    <span class="comment">#设置画板</span></span><br><span class="line">library<span class="punctuation">(</span>ComplexHeatmap<span class="punctuation">)</span>    <span class="comment">#绘制图例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################PARAMETERS####################################</span></span><br><span class="line">sample_name <span class="operator">&lt;-</span><span class="string">&#x27;G5_WT2&#x27;</span><span class="comment">#测序样本名称</span></span><br><span class="line">ref_name <span class="operator">&lt;-</span><span class="string">&#x27;ZM4_genome&#x27;</span><span class="comment">#参考基因组名称</span></span><br><span class="line">genome_size <span class="operator">&lt;-</span><span class="number">205636</span> <span class="comment">#参考基因组长度</span></span><br><span class="line">out_dir<span class="operator">=</span> <span class="string">&#x27;/Users/ZYP/Downloads/WES_analysis_on_ZM4_RNAseq_data/results/Analysis/&#x27;</span> <span class="comment">#输出路径</span></span><br><span class="line">genome_gff <span class="operator">&lt;-</span> <span class="string">&#x27;/Users/ZYP/Downloads/WES_analysis_on_ZM4_RNAseq_data/results/IGV visualization/ZM4_annotation.gff&#x27;</span> <span class="comment">#参考基因组gff注释文件</span></span><br><span class="line">SNP_file <span class="operator">&lt;-</span><span class="string">&#x27;/Users/ZYP/Downloads/WES_analysis_on_ZM4_RNAseq_data/raw/annotation/SNP_annotation_G5_WT2.txt&#x27;</span> <span class="comment">#SNP注释文件</span></span><br><span class="line">depth_base_stat <span class="operator">&lt;-</span> <span class="string">&#x27;/Users/ZYP/Downloads/WES_analysis_on_ZM4_RNAseq_data/raw/depth/G5_WT2.depth&#x27;</span> <span class="comment">#测序深度覆盖度文件</span></span><br><span class="line">seq_split <span class="operator">&lt;-</span> 1000  <span class="comment">#滑窗大小用于统计平均测序深度和SNP密度</span></span><br><span class="line"><span class="comment">##################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##测序覆盖度、平均深度统计</span></span><br><span class="line">depth_base <span class="operator">&lt;-</span> read.delim<span class="punctuation">(</span>depth_base_stat<span class="punctuation">,</span> stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>depth_base<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;gene&#x27;</span><span class="punctuation">,</span><span class="string">&#x27;pos&#x27;</span><span class="punctuation">,</span><span class="string">&#x27;depth&#x27;</span><span class="punctuation">)</span></span><br><span class="line">depth <span class="operator">&lt;-</span> depth_base<span class="operator">$</span>depth</span><br><span class="line">depth_base <span class="operator">&lt;-</span> depth_base<span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">depth_base<span class="operator">$</span>end <span class="operator">&lt;-</span> depth_base<span class="operator">$</span>pos</span><br><span class="line">depth_base<span class="operator">$</span>depth <span class="operator">&lt;-</span> depth</span><br><span class="line"></span><br><span class="line">depth_exist <span class="operator">&lt;-</span> subset<span class="punctuation">(</span>depth_base<span class="punctuation">,</span> depth <span class="operator">!=</span> <span class="number">0</span><span class="punctuation">)</span></span><br><span class="line">coverage <span class="operator">&lt;-</span> <span class="built_in">round</span><span class="punctuation">(</span><span class="number">100</span> <span class="operator">*</span> <span class="built_in">sum</span><span class="punctuation">(</span>depth_exist<span class="operator">$</span>seq_end <span class="operator">-</span> depth_exist<span class="operator">$</span>seq_start <span class="operator">+</span> <span class="number">1</span><span class="punctuation">)</span> <span class="operator">/</span> genome_size<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">average_depth <span class="operator">&lt;-</span> <span class="built_in">round</span><span class="punctuation">(</span>mean<span class="punctuation">(</span>depth_base<span class="operator">$</span>depth<span class="punctuation">)</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">depth_stat <span class="operator">&lt;-</span> <span class="literal">NULL</span></span><br><span class="line">gene <span class="operator">&lt;-</span> unique<span class="punctuation">(</span>depth_exist<span class="operator">$</span>gene<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>gene_n <span class="keyword">in</span> gene<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  depth_subset <span class="operator">&lt;-</span> subset<span class="punctuation">(</span>depth_exist<span class="punctuation">,</span> gene <span class="operator">==</span> gene_n<span class="punctuation">)</span></span><br><span class="line">  seq_end <span class="operator">&lt;-</span> seq_split</span><br><span class="line">  depth_num <span class="operator">&lt;-</span> 0</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">1</span><span class="operator">:</span>nrow<span class="punctuation">(</span>depth_subset<span class="punctuation">)</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="punctuation">(</span>depth_subset<span class="punctuation">[</span>i<span class="punctuation">,</span><span class="string">&#x27;pos&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;=</span> seq_end<span class="punctuation">)</span> depth_num <span class="operator">&lt;-</span> depth_num <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line">      depth_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>depth_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>gene_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_end<span class="punctuation">,</span>depth_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">      </span><br><span class="line">      seq_end <span class="operator">&lt;-</span> seq_end <span class="operator">+</span> seq_split</span><br><span class="line">      depth_num <span class="operator">&lt;-</span> 0</span><br><span class="line">      <span class="keyword">while</span> <span class="punctuation">(</span>depth_subset<span class="punctuation">[</span>i<span class="punctuation">,</span><span class="string">&#x27;pos&#x27;</span><span class="punctuation">]</span> <span class="operator">&gt;</span> seq_end<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        depth_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>depth_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>gene_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_end<span class="punctuation">,</span> depth_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">        seq_end <span class="operator">&lt;-</span> seq_end <span class="operator">+</span> seq_split</span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">      depth_num <span class="operator">&lt;-</span> depth_num <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="punctuation">(</span>seq_end <span class="operator">&lt;</span> depth_stat<span class="punctuation">[</span>gene_n<span class="punctuation">,</span><span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">]</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    depth_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>depth_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>gene_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_end<span class="punctuation">,</span> depth_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">    seq_end <span class="operator">&lt;-</span> seq_end <span class="operator">+</span> seq_split</span><br><span class="line">    depth_num <span class="operator">&lt;-</span> 0</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  depth_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>depth_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>gene_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_stat<span class="punctuation">[</span>gene_n<span class="punctuation">,</span><span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">]</span><span class="punctuation">,</span> depth_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">depth_stat <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>depth_stat<span class="punctuation">,</span> stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>depth_stat<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;gene&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_start&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;depth_num&#x27;</span><span class="punctuation">)</span></span><br><span class="line">depth_stat<span class="operator">$</span>seq_start <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>depth_stat<span class="operator">$</span>seq_start<span class="punctuation">)</span></span><br><span class="line">depth_stat<span class="operator">$</span>seq_end <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>depth_stat<span class="operator">$</span>seq_end<span class="punctuation">)</span></span><br><span class="line">depth_stat<span class="operator">$</span>depth_num <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>depth_stat<span class="operator">$</span>depth_num<span class="punctuation">)</span></span><br><span class="line">depth_stat</span><br><span class="line"></span><br><span class="line">seq_stat <span class="operator">&lt;-</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>gene <span class="keyword">in</span> unique<span class="punctuation">(</span>depth_base<span class="operator">$</span>gene<span class="punctuation">)</span><span class="punctuation">)</span> seq_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>seq_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>gene<span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">2056363</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">seq_stat <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>seq_stat<span class="punctuation">,</span> stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>seq_stat<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;seq_ID&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_start&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">)</span></span><br><span class="line">rownames<span class="punctuation">(</span>seq_stat<span class="punctuation">)</span> <span class="operator">&lt;-</span> seq_stat<span class="operator">$</span>seq_ID</span><br><span class="line">seq_stat<span class="operator">$</span>seq_start <span class="operator">&lt;-</span> <span class="built_in">as.integer</span><span class="punctuation">(</span>seq_stat<span class="operator">$</span>seq_start<span class="punctuation">)</span></span><br><span class="line">seq_stat<span class="operator">$</span>seq_end <span class="operator">&lt;-</span> <span class="built_in">as.integer</span><span class="punctuation">(</span>seq_stat<span class="operator">$</span>seq_end<span class="punctuation">)</span></span><br><span class="line">seq_stat</span><br><span class="line"></span><br><span class="line"><span class="comment">##参考基因组基因信息，CDS &amp; rRNA &amp; tRNA</span></span><br><span class="line">gene <span class="operator">&lt;-</span> read.delim<span class="punctuation">(</span>genome_gff<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> comment.char <span class="operator">=</span> <span class="string">&#x27;#&#x27;</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">gene <span class="operator">&lt;-</span> subset<span class="punctuation">(</span>gene<span class="punctuation">,</span> V3 <span class="operator">%in%</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;CDS&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;rRNA&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;tRNA&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>gene<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;seq_ID&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_start&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;type&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;strand&#x27;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">gene<span class="punctuation">[</span>which<span class="punctuation">(</span>gene<span class="operator">$</span>type <span class="operator">==</span> <span class="string">&#x27;CDS&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span><span class="string">&#x27;type&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="number">1</span></span><br><span class="line">gene<span class="punctuation">[</span>which<span class="punctuation">(</span>gene<span class="operator">$</span>type <span class="operator">==</span> <span class="string">&#x27;rRNA&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span><span class="string">&#x27;type&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="number">2</span></span><br><span class="line">gene<span class="punctuation">[</span>which<span class="punctuation">(</span>gene<span class="operator">$</span>type <span class="operator">==</span> <span class="string">&#x27;tRNA&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span><span class="string">&#x27;type&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="number">3</span></span><br><span class="line">gene<span class="operator">$</span>type <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>gene<span class="operator">$</span>type<span class="punctuation">)</span></span><br><span class="line">gene <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>subset<span class="punctuation">(</span>gene<span class="punctuation">,</span> strand <span class="operator">==</span> <span class="string">&#x27;-&#x27;</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="operator">-</span><span class="number">5</span><span class="punctuation">]</span><span class="punctuation">,</span> subset<span class="punctuation">(</span>gene<span class="punctuation">,</span> strand <span class="operator">==</span> <span class="string">&#x27;+&#x27;</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="operator">-</span><span class="number">5</span><span class="punctuation">]</span><span class="punctuation">)</span></span><br><span class="line">gene</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取 SNP 文件，统计 SNP 类型</span></span><br><span class="line">snp <span class="operator">&lt;-</span> read.delim<span class="punctuation">(</span>SNP_file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> colClasses <span class="operator">=</span> <span class="string">&#x27;character&#x27;</span><span class="punctuation">,</span> comment.char <span class="operator">=</span> <span class="string">&#x27;#&#x27;</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">snp<span class="operator">$</span>V5 <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>snp<span class="operator">$</span>V5<span class="punctuation">)</span></span><br><span class="line">snp<span class="operator">$</span>change <span class="operator">&lt;-</span> str_c<span class="punctuation">(</span>snp<span class="operator">$</span>V7<span class="punctuation">,</span> snp<span class="operator">$</span>V8<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;AT&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;A&gt;T|T&gt;A&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;tv&#x27;</span></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;AG&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;A&gt;G|T&gt;C&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;ti&#x27;</span></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;AC&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;A&gt;C|T&gt;G&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;tv&#x27;</span></span><br><span class="line"></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;TA&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;A&gt;T|T&gt;A&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;tv&#x27;</span></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;TG&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;A&gt;C|T&gt;G&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;tv&#x27;</span></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;TC&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;A&gt;G|T&gt;C&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;ti&#x27;</span></span><br><span class="line"></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;GA&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;G&gt;A|C&gt;T&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;ti&#x27;</span></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;GT&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;G&gt;T|C&gt;A&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;tv&#x27;</span></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;GC&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;G&gt;C|C&gt;G&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;tv&#x27;</span></span><br><span class="line"></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;CA&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;G&gt;T|C&gt;A&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;tv&#x27;</span></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;CT&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;G&gt;A|C&gt;T&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;ti&#x27;</span></span><br><span class="line">change <span class="operator">&lt;-</span> which<span class="punctuation">(</span>snp<span class="operator">$</span>change <span class="operator">==</span> <span class="string">&#x27;CG&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type1&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;G&gt;C|C&gt;G&#x27;</span>; snp<span class="punctuation">[</span>change<span class="punctuation">,</span><span class="string">&#x27;type2&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="string">&#x27;tv&#x27;</span></span><br><span class="line"></span><br><span class="line">change_list <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;A&gt;T|T&gt;A&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;A&gt;G|T&gt;C&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;A&gt;C|T&gt;G&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;G&gt;A|C&gt;T&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;G&gt;T|C&gt;A&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;G&gt;C|C&gt;G&#x27;</span><span class="punctuation">)</span></span><br><span class="line">change_type <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;synonymous SNV&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;nonsynonymous SNV&#x27;</span><span class="punctuation">)</span></span><br><span class="line">anno_list <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#length(anno_list) &lt;- length(change_list) * length(change_type)</span></span><br><span class="line">l <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">anno <span class="operator">&lt;-</span> read.delim<span class="punctuation">(</span>SNP_file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> colClasses <span class="operator">=</span> <span class="string">&#x27;character&#x27;</span><span class="punctuation">,</span> comment.char <span class="operator">=</span> <span class="string">&#x27;#&#x27;</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">12</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">anno<span class="operator">$</span>V7 <span class="operator">&lt;-</span>snp<span class="operator">$</span>type1</span><br><span class="line">anno<span class="operator">$</span>V5 <span class="operator">&lt;-</span> <span class="built_in">as.integer</span><span class="punctuation">(</span>anno<span class="operator">$</span>V5<span class="punctuation">)</span></span><br><span class="line">anno<span class="operator">$</span>V5.1 <span class="operator">&lt;-</span> <span class="built_in">as.integer</span><span class="punctuation">(</span>anno<span class="operator">$</span>V5.1<span class="punctuation">)</span></span><br><span class="line">anno<span class="operator">$</span>V12 <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>anno<span class="operator">$</span>V12<span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>anno<span class="punctuation">)</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">6</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;seq_ID&#x27;</span><span class="punctuation">,</span><span class="string">&#x27;seq_start&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">,</span><span class="string">&#x27;change&#x27;</span><span class="punctuation">,</span><span class="string">&#x27;ratio&#x27;</span><span class="punctuation">,</span><span class="string">&#x27;type&#x27;</span><span class="punctuation">)</span></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> change_list<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="keyword">for</span> <span class="punctuation">(</span>j <span class="keyword">in</span> change_type<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    select <span class="operator">&lt;-</span> anno<span class="punctuation">[</span>which<span class="punctuation">(</span>anno<span class="operator">$</span>change <span class="operator">==</span> i <span class="operator">&amp;</span> anno<span class="operator">$</span>type <span class="operator">==</span> j<span class="punctuation">)</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br><span class="line">    <span class="keyword">if</span> <span class="punctuation">(</span><span class="built_in">length</span><span class="punctuation">(</span>row.names<span class="punctuation">(</span>select<span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">!=</span><span class="number">0</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    l <span class="operator">=</span> l <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    anno_list<span class="punctuation">[[</span>l<span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> select</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">snp_ti <span class="operator">&lt;-</span> <span class="built_in">length</span><span class="punctuation">(</span>which<span class="punctuation">(</span>snp<span class="operator">$</span>type2 <span class="operator">==</span> <span class="string">&#x27;ti&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">snp_tv <span class="operator">&lt;-</span> <span class="built_in">length</span><span class="punctuation">(</span>which<span class="punctuation">(</span>snp<span class="operator">$</span>type2 <span class="operator">==</span> <span class="string">&#x27;tv&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">snp_at <span class="operator">&lt;-</span> <span class="built_in">length</span><span class="punctuation">(</span>which<span class="punctuation">(</span>snp<span class="operator">$</span>type1 <span class="operator">==</span> <span class="string">&#x27;A&gt;T|T&gt;A&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">snp_ag <span class="operator">&lt;-</span> <span class="built_in">length</span><span class="punctuation">(</span>which<span class="punctuation">(</span>snp<span class="operator">$</span>type1 <span class="operator">==</span> <span class="string">&#x27;A&gt;G|T&gt;C&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">snp_ac <span class="operator">&lt;-</span> <span class="built_in">length</span><span class="punctuation">(</span>which<span class="punctuation">(</span>snp<span class="operator">$</span>type1 <span class="operator">==</span> <span class="string">&#x27;A&gt;C|T&gt;G&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">snp_ga <span class="operator">&lt;-</span> <span class="built_in">length</span><span class="punctuation">(</span>which<span class="punctuation">(</span>snp<span class="operator">$</span>type1 <span class="operator">==</span> <span class="string">&#x27;G&gt;A|C&gt;T&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">snp_gt <span class="operator">&lt;-</span> <span class="built_in">length</span><span class="punctuation">(</span>which<span class="punctuation">(</span>snp<span class="operator">$</span>type1 <span class="operator">==</span> <span class="string">&#x27;G&gt;T|C&gt;A&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">snp_gc <span class="operator">&lt;-</span> <span class="built_in">length</span><span class="punctuation">(</span>which<span class="punctuation">(</span>snp<span class="operator">$</span>type1 <span class="operator">==</span> <span class="string">&#x27;G&gt;C|C&gt;G&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#统计 SNP 密度</span></span><br><span class="line">snp <span class="operator">&lt;-</span> snp<span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">colnames<span class="punctuation">(</span>snp<span class="punctuation">)</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">2</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;seq_ID&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_site&#x27;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">snp_stat <span class="operator">&lt;-</span> <span class="literal">NULL</span></span><br><span class="line">seq_ID <span class="operator">&lt;-</span> unique<span class="punctuation">(</span>snp<span class="operator">$</span>seq_ID<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>seq_ID_n <span class="keyword">in</span> seq_ID<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  snp_subset <span class="operator">&lt;-</span> subset<span class="punctuation">(</span>snp<span class="punctuation">,</span> seq_ID <span class="operator">==</span> seq_ID_n<span class="punctuation">)</span></span><br><span class="line">  seq_end <span class="operator">&lt;-</span> seq_split</span><br><span class="line">  snp_num <span class="operator">&lt;-</span> 0</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">1</span><span class="operator">:</span>nrow<span class="punctuation">(</span>snp_subset<span class="punctuation">)</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="punctuation">(</span>snp_subset<span class="punctuation">[</span>i<span class="punctuation">,</span><span class="string">&#x27;seq_site&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;=</span> seq_end<span class="punctuation">)</span> snp_num <span class="operator">&lt;-</span> snp_num <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line">      snp_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>snp_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>seq_ID_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_end<span class="punctuation">,</span> snp_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">      </span><br><span class="line">      seq_end <span class="operator">&lt;-</span> seq_end <span class="operator">+</span> seq_split</span><br><span class="line">      snp_num <span class="operator">&lt;-</span> 0</span><br><span class="line">      <span class="keyword">while</span> <span class="punctuation">(</span>snp_subset<span class="punctuation">[</span>i<span class="punctuation">,</span><span class="string">&#x27;seq_site&#x27;</span><span class="punctuation">]</span> <span class="operator">&gt;</span> seq_end<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        snp_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>snp_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>seq_ID_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_end<span class="punctuation">,</span> snp_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">        seq_end <span class="operator">&lt;-</span> seq_end <span class="operator">+</span> seq_split</span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">      snp_num <span class="operator">&lt;-</span> snp_num <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="punctuation">(</span>seq_end <span class="operator">&lt;</span> seq_stat<span class="punctuation">[</span>seq_ID_n<span class="punctuation">,</span><span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">]</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    snp_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>snp_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>seq_ID_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_end<span class="punctuation">,</span> snp_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">    seq_end <span class="operator">&lt;-</span> seq_end <span class="operator">+</span> seq_split</span><br><span class="line">    snp_num <span class="operator">&lt;-</span> 0</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  snp_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>snp_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>seq_ID_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_stat<span class="punctuation">[</span>seq_ID_n<span class="punctuation">,</span><span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">]</span><span class="punctuation">,</span> snp_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">snp_stat <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>snp_stat<span class="punctuation">,</span> stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>snp_stat<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;seq_ID&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_start&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;snp_num&#x27;</span><span class="punctuation">)</span></span><br><span class="line">snp_stat<span class="operator">$</span>seq_start <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>snp_stat<span class="operator">$</span>seq_start<span class="punctuation">)</span></span><br><span class="line">snp_stat<span class="operator">$</span>seq_end <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>snp_stat<span class="operator">$</span>seq_end<span class="punctuation">)</span></span><br><span class="line">snp_stat<span class="operator">$</span>snp_num <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>snp_stat<span class="operator">$</span>snp_num<span class="punctuation">)</span></span><br><span class="line">snp_stat</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取 SNP 文件，统计 InDel 长度</span></span><br><span class="line">snp <span class="operator">&lt;-</span> read.delim<span class="punctuation">(</span>SNP_file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> colClasses <span class="operator">=</span> <span class="string">&#x27;character&#x27;</span><span class="punctuation">,</span> comment.char <span class="operator">=</span> <span class="string">&#x27;#&#x27;</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">snp<span class="operator">$</span>V5 <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>snp<span class="operator">$</span>V5<span class="punctuation">)</span></span><br><span class="line">snp<span class="operator">$</span>change <span class="operator">&lt;-</span> str_c<span class="punctuation">(</span>snp<span class="operator">$</span>V7<span class="punctuation">,</span> snp<span class="operator">$</span>V8<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">indel <span class="operator">&lt;-</span> read.delim<span class="punctuation">(</span>SNP_file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> colClasses <span class="operator">=</span> <span class="string">&#x27;character&#x27;</span><span class="punctuation">,</span> comment.char <span class="operator">=</span> <span class="string">&#x27;#&#x27;</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">indel<span class="operator">$</span>V5 <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>indel<span class="operator">$</span>V5<span class="punctuation">)</span></span><br><span class="line">indel<span class="operator">$</span><span class="built_in">length</span> <span class="operator">&lt;-</span> str_length<span class="punctuation">(</span>indel<span class="punctuation">[</span> <span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">)</span> <span class="operator">-</span> str_length<span class="punctuation">(</span>indel<span class="punctuation">[</span> <span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">)</span></span><br><span class="line">indel_insert <span class="operator">&lt;-</span> <span class="built_in">length</span><span class="punctuation">(</span>which<span class="punctuation">(</span>indel<span class="operator">$</span><span class="built_in">length</span> <span class="operator">&gt;</span> <span class="number">0</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">indel_delet <span class="operator">&lt;-</span> <span class="built_in">length</span><span class="punctuation">(</span>which<span class="punctuation">(</span>indel<span class="operator">$</span><span class="built_in">length</span> <span class="operator">&lt;</span> <span class="number">0</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#统计 InDel 密度</span></span><br><span class="line">indel <span class="operator">&lt;-</span> indel<span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">colnames<span class="punctuation">(</span>indel<span class="punctuation">)</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">2</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;seq_ID&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_site&#x27;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">indel_stat <span class="operator">&lt;-</span> <span class="literal">NULL</span></span><br><span class="line">seq_ID <span class="operator">&lt;-</span> unique<span class="punctuation">(</span>indel<span class="operator">$</span>seq_ID<span class="punctuation">)</span></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>seq_ID_n <span class="keyword">in</span> seq_ID<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  indel_subset <span class="operator">&lt;-</span> subset<span class="punctuation">(</span>indel<span class="punctuation">,</span> seq_ID <span class="operator">==</span> seq_ID_n<span class="punctuation">)</span></span><br><span class="line">  seq_end <span class="operator">&lt;-</span> seq_split</span><br><span class="line">  indel_num <span class="operator">&lt;-</span> 0</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">1</span><span class="operator">:</span>nrow<span class="punctuation">(</span>indel_subset<span class="punctuation">)</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="punctuation">(</span>indel_subset<span class="punctuation">[</span>i<span class="punctuation">,</span><span class="string">&#x27;seq_site&#x27;</span><span class="punctuation">]</span> <span class="operator">&lt;=</span> seq_end<span class="punctuation">)</span> indel_num <span class="operator">&lt;-</span> indel_num <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line">      indel_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>indel_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>seq_ID_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_end<span class="punctuation">,</span> indel_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">      </span><br><span class="line">      seq_end <span class="operator">&lt;-</span> seq_end <span class="operator">+</span> seq_split</span><br><span class="line">      indel_num <span class="operator">&lt;-</span> 0</span><br><span class="line">      <span class="keyword">while</span> <span class="punctuation">(</span>indel_subset<span class="punctuation">[</span>i<span class="punctuation">,</span><span class="string">&#x27;seq_site&#x27;</span><span class="punctuation">]</span> <span class="operator">&gt;</span> seq_end<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        indel_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>indel_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>seq_ID_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_end<span class="punctuation">,</span> indel_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">        seq_end <span class="operator">&lt;-</span> seq_end <span class="operator">+</span> seq_split</span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">      indel_num <span class="operator">&lt;-</span> indel_num <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> <span class="punctuation">(</span>seq_end <span class="operator">&lt;</span> seq_stat<span class="punctuation">[</span>seq_ID_n<span class="punctuation">,</span><span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">]</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    indel_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>indel_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>seq_ID_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_end<span class="punctuation">,</span> indel_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">    seq_end <span class="operator">&lt;-</span> seq_end <span class="operator">+</span> seq_split</span><br><span class="line">    indel_num <span class="operator">&lt;-</span> 0</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  indel_stat <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>indel_stat<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>seq_ID_n<span class="punctuation">,</span> seq_end <span class="operator">-</span> seq_split <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> seq_stat<span class="punctuation">[</span>seq_ID_n<span class="punctuation">,</span><span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">]</span><span class="punctuation">,</span> indel_num<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">indel_stat <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>indel_stat<span class="punctuation">,</span> stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>indel_stat<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;seq_ID&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_start&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;seq_end&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;indel_num&#x27;</span><span class="punctuation">)</span></span><br><span class="line">indel_stat<span class="operator">$</span>seq_start <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>indel_stat<span class="operator">$</span>seq_start<span class="punctuation">)</span></span><br><span class="line">indel_stat<span class="operator">$</span>seq_end <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>indel_stat<span class="operator">$</span>seq_end<span class="punctuation">)</span></span><br><span class="line">indel_stat<span class="operator">$</span>indel_num <span class="operator">&lt;-</span> <span class="built_in">as.numeric</span><span class="punctuation">(</span>indel_stat<span class="operator">$</span>indel_num<span class="punctuation">)</span></span><br><span class="line">indel_stat</span><br><span class="line"></span><br><span class="line">pdf<span class="punctuation">(</span>str_c<span class="punctuation">(</span>out_dir<span class="punctuation">,</span> sample_name<span class="punctuation">,</span> <span class="string">&#x27;.circlize.pdf&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">40</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">28</span><span class="punctuation">)</span></span><br><span class="line">circle_size <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="string">&#x27;snpc&#x27;</span><span class="punctuation">)</span></span><br><span class="line">circos.par<span class="punctuation">(</span>gap.degree <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> start.degree <span class="operator">=</span> <span class="number">90</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一圈，染色体区域</span></span><br><span class="line">circos.genomicInitialize<span class="punctuation">(</span>seq_stat<span class="punctuation">,</span> plotType <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;axis&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;labels&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> major.by <span class="operator">=</span> <span class="number">250000</span><span class="punctuation">,</span> track.height <span class="operator">=</span> <span class="number">0.2</span><span class="punctuation">)</span><span class="comment">#, gap.degree=1</span></span><br><span class="line"></span><br><span class="line">circos.genomicTrackPlotRegion<span class="punctuation">(</span></span><br><span class="line">  seq_stat<span class="punctuation">,</span> track.height <span class="operator">=</span> <span class="number">0.05</span><span class="punctuation">,</span> stack <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> bg.border <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span></span><br><span class="line">  panel.fun <span class="operator">=</span> <span class="keyword">function</span><span class="punctuation">(</span>region<span class="punctuation">,</span> value<span class="punctuation">,</span> ...<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    circos.genomicRect<span class="punctuation">(</span>region<span class="punctuation">,</span> value<span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&#x27;#049a0b&#x27;</span><span class="punctuation">,</span> border <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line">  <span class="punctuation">&#125;</span> <span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二圈，覆盖度 &amp; 深度</span></span><br><span class="line">circos.genomicTrack<span class="punctuation">(</span></span><br><span class="line">  depth_stat<span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> track.height <span class="operator">=</span> <span class="number">0.08</span><span class="punctuation">,</span>  ylim <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="punctuation">(</span><span class="built_in">max</span><span class="punctuation">(</span>depth_stat<span class="operator">$</span>depth<span class="punctuation">)</span> <span class="operator">+</span> <span class="number">1</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span> bg.col <span class="operator">=</span> <span class="string">&#x27;#EEEEEE6E&#x27;</span><span class="punctuation">,</span> bg.border <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span></span><br><span class="line">  panel.fun <span class="operator">=</span> <span class="keyword">function</span><span class="punctuation">(</span>region<span class="punctuation">,</span>value<span class="punctuation">,</span> ...<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    circos.genomicRect<span class="punctuation">(</span>region<span class="punctuation">,</span> value<span class="punctuation">,</span> ytop.column <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> ybottom <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> border <span class="operator">=</span> <span class="string">&#x27;white&#x27;</span><span class="punctuation">,</span> lwd <span class="operator">=</span> <span class="number">0.2</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line">    circos.lines<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="built_in">max</span><span class="punctuation">(</span>region<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span>average_depth<span class="punctuation">,</span> average_depth<span class="punctuation">)</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&#x27;red3&#x27;</span><span class="punctuation">,</span> lwd<span class="operator">=</span><span class="number">0.15</span><span class="punctuation">,</span> lty <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">    circos.yaxis<span class="punctuation">(</span> lwd <span class="operator">=</span> <span class="number">0.1</span><span class="punctuation">,</span> tick.length <span class="operator">=</span> convert_x<span class="punctuation">(</span><span class="number">0.15</span><span class="punctuation">,</span> <span class="string">&#x27;mm&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span>labels.cex <span class="operator">=</span> <span class="number">0.3</span><span class="punctuation">)</span></span><br><span class="line">  <span class="punctuation">&#125;</span> <span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第三圈，CDS &amp; rRNA &amp; tRNA</span></span><br><span class="line">color_assign <span class="operator">&lt;-</span> colorRamp2<span class="punctuation">(</span>breaks <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;#00ADFF&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;orange&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;green2&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">circos.genomicTrackPlotRegion<span class="punctuation">(</span></span><br><span class="line">  gene<span class="punctuation">,</span> track.height <span class="operator">=</span> <span class="number">0.16</span><span class="punctuation">,</span> stack <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> bg.border <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span></span><br><span class="line">  panel.fun <span class="operator">=</span> <span class="keyword">function</span><span class="punctuation">(</span>region<span class="punctuation">,</span> value<span class="punctuation">,</span> ...<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    circos.genomicRect<span class="punctuation">(</span>region<span class="punctuation">,</span> value<span class="punctuation">,</span> col <span class="operator">=</span> color_assign<span class="punctuation">(</span>value<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">)</span><span class="punctuation">,</span> border <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line">  <span class="punctuation">&#125;</span> <span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第四圈，SNP 密度</span></span><br><span class="line">value_max <span class="operator">&lt;-</span> <span class="built_in">max</span><span class="punctuation">(</span>snp_stat<span class="operator">$</span>snp_num<span class="punctuation">)</span></span><br><span class="line">colorsChoice <span class="operator">&lt;-</span> colorRampPalette<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;white&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#245B8E&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">color_assign <span class="operator">&lt;-</span> colorRamp2<span class="punctuation">(</span>breaks <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">0</span><span class="operator">:</span>value_max<span class="punctuation">)</span><span class="punctuation">,</span> col <span class="operator">=</span> colorsChoice<span class="punctuation">(</span>value_max <span class="operator">+</span> <span class="number">1</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">circos.genomicTrackPlotRegion<span class="punctuation">(</span></span><br><span class="line">  snp_stat<span class="punctuation">,</span> track.height <span class="operator">=</span> <span class="number">0.08</span><span class="punctuation">,</span> stack <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> bg.border <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span></span><br><span class="line">  panel.fun <span class="operator">=</span> <span class="keyword">function</span><span class="punctuation">(</span>region<span class="punctuation">,</span> value<span class="punctuation">,</span> ...<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    circos.genomicRect<span class="punctuation">(</span>region<span class="punctuation">,</span> value<span class="punctuation">,</span> col <span class="operator">=</span> color_assign<span class="punctuation">(</span>value<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">)</span><span class="punctuation">,</span> border <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line">  <span class="punctuation">&#125;</span> <span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第五圈，InDel 密度</span></span><br><span class="line">value_max <span class="operator">&lt;-</span> <span class="built_in">max</span><span class="punctuation">(</span>indel_stat<span class="operator">$</span>indel_num<span class="punctuation">)</span></span><br><span class="line">colorsChoice <span class="operator">&lt;-</span> colorRampPalette<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;white&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#7744A4&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">color_assign <span class="operator">&lt;-</span> colorRamp2<span class="punctuation">(</span>breaks <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">0</span><span class="operator">:</span>value_max<span class="punctuation">)</span><span class="punctuation">,</span> col <span class="operator">=</span> colorsChoice<span class="punctuation">(</span>value_max <span class="operator">+</span> <span class="number">1</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">circos.genomicTrackPlotRegion<span class="punctuation">(</span></span><br><span class="line">  indel_stat<span class="punctuation">,</span> track.height <span class="operator">=</span> <span class="number">0.08</span><span class="punctuation">,</span> stack <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> bg.border <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span></span><br><span class="line">  panel.fun <span class="operator">=</span> <span class="keyword">function</span><span class="punctuation">(</span>region<span class="punctuation">,</span> value<span class="punctuation">,</span> ...<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    circos.genomicRect<span class="punctuation">(</span>region<span class="punctuation">,</span> value<span class="punctuation">,</span> col <span class="operator">=</span> color_assign<span class="punctuation">(</span>value<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">)</span><span class="punctuation">,</span> border <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line">  <span class="punctuation">&#125;</span> <span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第六圈, SNV分布图</span></span><br><span class="line">color_assign <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;#BC80BD&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#FDB462&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#80B1D3&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#FB8072&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#8DD3C7&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#FFFFB3&#x27;</span><span class="punctuation">)</span></span><br><span class="line">pch_assign <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">16</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">circos.genomicTrackPlotRegion<span class="punctuation">(</span></span><br><span class="line">  anno_list<span class="punctuation">,</span> track.height <span class="operator">=</span> <span class="number">0.08</span><span class="punctuation">,</span> bg.border <span class="operator">=</span> <span class="string">&#x27;black&#x27;</span><span class="punctuation">,</span> bg.lwd <span class="operator">=</span> <span class="number">0.4</span><span class="punctuation">,</span></span><br><span class="line">  panel.fun <span class="operator">=</span> <span class="keyword">function</span><span class="punctuation">(</span>region<span class="punctuation">,</span> value<span class="punctuation">,</span> ...<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  n <span class="operator">=</span> getI<span class="punctuation">(</span>...<span class="punctuation">)</span></span><br><span class="line">  circos.genomicPoints<span class="punctuation">(</span>region<span class="punctuation">,</span> value<span class="punctuation">,</span> cex <span class="operator">=</span> <span class="number">1.0</span><span class="punctuation">,</span> pch <span class="operator">=</span> pch_assign<span class="punctuation">[</span>ifelse<span class="punctuation">(</span>n<span class="operator">%%</span><span class="number">2</span><span class="punctuation">,</span> n<span class="operator">%%</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">]</span><span class="punctuation">,</span> col <span class="operator">=</span> color_assign<span class="punctuation">[</span>ifelse<span class="punctuation">(</span>n<span class="operator">%%</span><span class="number">6</span><span class="punctuation">,</span> n<span class="operator">%%</span><span class="number">6</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">)</span><span class="punctuation">]</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line">  circos.yaxis<span class="punctuation">(</span>labels.cex <span class="operator">=</span> <span class="number">0.3</span><span class="punctuation">,</span> lwd <span class="operator">=</span> <span class="number">0.1</span><span class="punctuation">,</span> tick.length <span class="operator">=</span> convert_x<span class="punctuation">(</span><span class="number">0.15</span><span class="punctuation">,</span> <span class="string">&#x27;mm&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">  xlim <span class="operator">=</span> CELL_META<span class="operator">$</span>xlim</span><br><span class="line">  ylim <span class="operator">=</span> CELL_META<span class="operator">$</span>ylim</span><br><span class="line">  <span class="punctuation">&#125;</span> <span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#draw.sector(start.degree, end.degree, clock.wise = FALSE)#突出显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测序深度、覆盖度图例</span></span><br><span class="line">depth_legend <span class="operator">&lt;-</span> Legend<span class="punctuation">(</span></span><br><span class="line">  at <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> labels <span class="operator">=</span> str_c<span class="punctuation">(</span><span class="string">&#x27; Depth ( average: &#x27;</span><span class="punctuation">,</span> average_depth<span class="punctuation">,</span> <span class="string">&#x27; X )&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> labels_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">8</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  title <span class="operator">=</span> str_c<span class="punctuation">(</span><span class="string">&#x27;Coverage: &#x27;</span><span class="punctuation">,</span> coverage <span class="punctuation">,</span> <span class="string">&#x27; %&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> title_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">9</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  grid_height <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0.4</span><span class="punctuation">,</span> <span class="string">&#x27;cm&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> grid_width <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0.4</span><span class="punctuation">,</span> <span class="string">&#x27;cm&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> type <span class="operator">=</span> <span class="string">&#x27;points&#x27;</span><span class="punctuation">,</span> pch <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> background <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CDS &amp; rRNA &amp; tRNA 图例</span></span><br><span class="line">gene_legend <span class="operator">&lt;-</span> Legend<span class="punctuation">(</span></span><br><span class="line">  at <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">)</span><span class="punctuation">,</span> labels <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27; CDS&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27; rRNA&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27; tRNA&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> labels_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">8</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  title <span class="operator">=</span> <span class="string">&#x27;CDS | rRNA | tRNA&#x27;</span><span class="punctuation">,</span> title_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">9</span><span class="punctuation">)</span><span class="punctuation">,</span> </span><br><span class="line">  grid_height <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0.4</span><span class="punctuation">,</span> <span class="string">&#x27;cm&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> grid_width <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0.4</span><span class="punctuation">,</span> <span class="string">&#x27;cm&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> type <span class="operator">=</span> <span class="string">&#x27;points&#x27;</span><span class="punctuation">,</span> pch <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> background <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;#00ADFF&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;orange&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;green2&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#SNP 密度图例</span></span><br><span class="line">snp_legend <span class="operator">&lt;-</span> Legend<span class="punctuation">(</span></span><br><span class="line">  at <span class="operator">=</span> <span class="built_in">round</span><span class="punctuation">(</span>seq<span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="built_in">max</span><span class="punctuation">(</span>snp_stat<span class="operator">$</span>snp_num<span class="punctuation">)</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">6</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">)</span><span class="punctuation">,</span> labels_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">8</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  col_fun <span class="operator">=</span> colorRamp2<span class="punctuation">(</span><span class="built_in">round</span><span class="punctuation">(</span>seq<span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="built_in">max</span><span class="punctuation">(</span>snp_stat<span class="operator">$</span>snp_num<span class="punctuation">)</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">6</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">)</span><span class="punctuation">,</span> colorRampPalette<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;white&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#245B8E&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">(</span><span class="number">6</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  title_position <span class="operator">=</span> <span class="string">&#x27;topleft&#x27;</span><span class="punctuation">,</span> title <span class="operator">=</span> <span class="string">&#x27;SNP density&#x27;</span><span class="punctuation">,</span> legend_height <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="string">&#x27;cm&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> title_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">9</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#SNV 分布图例</span></span><br><span class="line">snv_legend <span class="operator">&lt;-</span> Legend<span class="punctuation">(</span></span><br><span class="line">  at <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  labels <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27; SNP: A&gt;T|T&gt;A&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27; SNP: A&gt;G|T&gt;C&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27; SNP: A&gt;C|T&gt;G&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27; SNP: G&gt;A|C&gt;T&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27; SNP: G&gt;T|C&gt;A&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27; SNP: G&gt;C|C&gt;G&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;synonymous SNV&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;nonsynonymous SNV&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  labels_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">5</span><span class="punctuation">)</span><span class="punctuation">,</span> title <span class="operator">=</span> <span class="string">&#x27;variant type\n&#x27;</span><span class="punctuation">,</span> title_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">6</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  grid_height <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0.4</span><span class="punctuation">,</span> <span class="string">&#x27;cm&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> grid_width <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0.4</span><span class="punctuation">,</span> <span class="string">&#x27;cm&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> type <span class="operator">=</span> <span class="string">&#x27;points&#x27;</span><span class="punctuation">,</span> background <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span></span><br><span class="line">  legend_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;#BC80BD&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#FDB462&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#80B1D3&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#FB8072&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#8DD3C7&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;#FFFFB3&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;gray&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;gray&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  pch <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">20</span><span class="punctuation">,</span> <span class="number">20</span><span class="punctuation">,</span> <span class="number">20</span><span class="punctuation">,</span> <span class="number">20</span><span class="punctuation">,</span> <span class="number">20</span><span class="punctuation">,</span> <span class="number">20</span><span class="punctuation">,</span> <span class="number">16</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">)</span> <span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#左侧统计总览（涵括了上文大部分的统计概况，例如 SNP 替换类型统计等）</span></span><br><span class="line">stat_legend <span class="operator">&lt;-</span> Legend<span class="punctuation">(</span></span><br><span class="line">  at <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> labels <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span><span class="punctuation">,</span> labels_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">0</span><span class="punctuation">)</span><span class="punctuation">,</span> title_gp <span class="operator">=</span> gpar<span class="punctuation">(</span>fontsize <span class="operator">=</span> <span class="number">9</span><span class="punctuation">)</span><span class="punctuation">,</span> </span><br><span class="line">  grid_height <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&#x27;cm&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> grid_width <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&#x27;cm&#x27;</span><span class="punctuation">)</span><span class="punctuation">,</span> type <span class="operator">=</span> <span class="string">&#x27;points&#x27;</span><span class="punctuation">,</span> pch <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> background <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> </span><br><span class="line">  title <span class="operator">=</span> str_c<span class="punctuation">(</span><span class="string">&#x27;Sample: &#x27;</span><span class="punctuation">,</span> sample_name<span class="punctuation">,</span> <span class="string">&#x27;\nRefer species: &#x27;</span><span class="punctuation">,</span> ref_name<span class="punctuation">,</span> <span class="string">&#x27;\nRefer size: &#x27;</span><span class="punctuation">,</span> genome_size<span class="punctuation">,</span> <span class="string">&#x27; bp\n\n\nTotal SNP: &#x27;</span><span class="punctuation">,</span> snp_ti <span class="operator">+</span> snp_tv<span class="punctuation">,</span> <span class="string">&#x27;\nTransitions: &#x27;</span><span class="punctuation">,</span> snp_ti<span class="punctuation">,</span> <span class="string">&#x27;\nTransversions: &#x27;</span><span class="punctuation">,</span> snp_tv<span class="punctuation">,</span> <span class="string">&#x27;\nTi/Tv: &#x27;</span><span class="punctuation">,</span> <span class="built_in">round</span><span class="punctuation">(</span>snp_ti <span class="operator">/</span> snp_tv<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="string">&#x27;\nA&gt;T|T&gt;A: &#x27;</span><span class="punctuation">,</span> snp_at<span class="punctuation">,</span> <span class="string">&#x27;\nA&gt;G|T&gt;C: &#x27;</span><span class="punctuation">,</span> snp_ag<span class="punctuation">,</span> <span class="string">&#x27;\nA&gt;C|T&gt;G: &#x27;</span><span class="punctuation">,</span> snp_ac<span class="punctuation">,</span> <span class="string">&#x27;\nG&gt;A|C&gt;T: &#x27;</span><span class="punctuation">,</span> snp_ga<span class="punctuation">,</span> <span class="string">&#x27;\nG&gt;T|C&gt;A: &#x27;</span><span class="punctuation">,</span> snp_gt<span class="punctuation">,</span> <span class="string">&#x27;\nG&gt;C|C&gt;G: &#x27;</span><span class="punctuation">,</span> snp_gc<span class="punctuation">,</span> <span class="string">&#x27;\n\n\nTotal InDel: &#x27;</span><span class="punctuation">,</span> indel_insert <span class="operator">+</span> indel_delet<span class="punctuation">,</span> <span class="string">&#x27;\nInsert: &#x27;</span><span class="punctuation">,</span> indel_insert<span class="punctuation">,</span> <span class="string">&#x27;\nDelet: &#x27;</span><span class="punctuation">,</span> indel_delet<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#图例存放位置</span></span><br><span class="line">y_coord <span class="operator">&lt;-</span> 1.01</span><br><span class="line">x_coord <span class="operator">&lt;-</span> 0.275</span><br><span class="line"></span><br><span class="line">pushViewport<span class="punctuation">(</span>viewport<span class="punctuation">(</span>x <span class="operator">=</span> x_coord<span class="operator">+</span><span class="number">0.05</span><span class="punctuation">,</span> y <span class="operator">=</span> y_coord<span class="operator">-</span><span class="number">0.208</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">grid.draw<span class="punctuation">(</span>stat_legend<span class="punctuation">)</span></span><br><span class="line">upViewport<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">pushViewport<span class="punctuation">(</span>viewport<span class="punctuation">(</span>x <span class="operator">=</span> x_coord<span class="operator">-</span><span class="number">0.0005</span> <span class="punctuation">,</span> y <span class="operator">=</span> y_coord<span class="operator">-</span><span class="number">0.165</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">grid.draw<span class="punctuation">(</span>depth_legend<span class="punctuation">)</span></span><br><span class="line">upViewport<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">pushViewport<span class="punctuation">(</span>viewport<span class="punctuation">(</span>x <span class="operator">=</span> x_coord<span class="operator">-</span><span class="number">0.005</span> <span class="punctuation">,</span> y <span class="operator">=</span> y_coord<span class="operator">-</span><span class="number">0.197</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">grid.draw<span class="punctuation">(</span>gene_legend<span class="punctuation">)</span></span><br><span class="line">upViewport<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">pushViewport<span class="punctuation">(</span>viewport<span class="punctuation">(</span>x <span class="operator">=</span> x_coord<span class="operator">-</span><span class="number">0.0097</span> <span class="punctuation">,</span> y <span class="operator">=</span> y_coord<span class="operator">-</span><span class="number">0.25</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">grid.draw<span class="punctuation">(</span>snp_legend<span class="punctuation">)</span></span><br><span class="line">y_coord <span class="operator">&lt;-</span> y_coord</span><br><span class="line">upViewport<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">pushViewport<span class="punctuation">(</span>viewport<span class="punctuation">(</span>x <span class="operator">=</span> x_coord<span class="operator">-</span><span class="number">0.0097</span> <span class="punctuation">,</span> y <span class="operator">=</span> y_coord<span class="operator">-</span><span class="number">0.3</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">grid.draw<span class="punctuation">(</span>indel_legend<span class="punctuation">)</span></span><br><span class="line">upViewport<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">pushViewport<span class="punctuation">(</span>viewport<span class="punctuation">(</span>x <span class="operator">=</span> <span class="number">0.5</span><span class="punctuation">,</span> y <span class="operator">=</span> <span class="number">0.5</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">grid.draw<span class="punctuation">(</span>snv_legend<span class="punctuation">)</span></span><br><span class="line">upViewport<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">circos.clear<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span><span class="comment">#保存</span></span><br></pre></td></tr></table></figure><p>运行结果如图所示，由外向内依次是：</p><ul><li>左上方图例和统计信息</li><li>基因组</li><li>染色体</li><li>测序深度与覆盖度</li><li>编码区和<a href="https://www.zhihu.com/search?q=%E9%9D%9E%E7%BC%96%E7%A0%81%E5%8C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">非编码区</a></li><li>SNV和InDel密度</li><li>SNV分布</li><li>SNV类型</li></ul><p><img src="https://pic1.zhimg.com/v2-015b406c0f4b81f31bfd5c180b32798c_b.jpg" alt="img"></p><p>全基因组测序圈图</p><p><img src="https://pic4.zhimg.com/v2-bae7e95a80a91430a351d587f163290f_b.jpg" alt="img"></p><p>全基因组测序圈图参数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;转自&lt;a href=&quot;https://zhuanlan.zhihu.com/p/380684876&quot;&gt;Die Linke&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MyNotes：&lt;/p&gt;
&lt;p&gt;总体概括为：全外显子测序的标准分析流程通常包括以下步骤：&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="BioInfo" scheme="http://nikolahuang.github.io/tags/BioInfo/"/>
    
  </entry>
  
  <entry>
    <title>WES数据分析流程(上)</title>
    <link href="http://nikolahuang.github.io/2024/03/17/WES%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B-%E4%B8%8A/"/>
    <id>http://nikolahuang.github.io/2024/03/17/WES%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B-%E4%B8%8A/</id>
    <published>2024-03-17T05:09:57.000Z</published>
    <updated>2024-04-05T16:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>来源：<a href="https://www.zhihu.com/people/ma-pan-13-72">多啦A梦詹</a>；<a href="https://www.zhihu.com/question/432826287/answer/3080622038">菩年</a>;<a href="https://zhuanlan.zhihu.com/p/380684876">Die Linke</a></p><hr><ol><li>WES，WGS和WGRS的区别和联系是什么？</li></ol><ul><li><strong>WES (whole exome sequencing, <a href="https://www.zhihu.com/search?q=%E5%85%A8%E5%A4%96%E6%98%BE%E5%AD%90%E7%BB%84%E6%B5%8B%E5%BA%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">全外显子组测序</a>)</strong>: 是指利用序列捕获技术将【全基因组的外显子区域DNA】捕获富集后进行高通量测序，能够直接发现与蛋白质功能变异相关的遗传变异SNP(单核苷酸多态性)。以<a href="https://www.zhihu.com/search?q=%E4%BA%BA%E7%B1%BB%E5%9F%BA%E5%9B%A0%E7%BB%84&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">人类基因组</a>为例，虽然外显子(蛋白质编码区)只占基因组的1%，但人类基因组85%的致病突变都在外显子区域，因此具有重要意义。</li><li><strong>WGS (whole genome sequencing, 全基因组测序)</strong>: 是指对基因组整体进行<a href="https://www.zhihu.com/search?q=%E9%AB%98%E9%80%9A%E9%87%8F%E6%B5%8B%E5%BA%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">高通量测序</a>，分析不同个体间的差异，同时完成SNP及基因组结构注释。</li><li><strong>WGRS (whole genome re-sequencing, <a href="https://www.zhihu.com/search?q=%E5%85%A8%E5%9F%BA%E5%9B%A0%E7%BB%84%E9%87%8D%E6%B5%8B%E5%BA%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">全基因组重测序</a>)</strong>: 是指对已知参考基因组和注释的物种进行不同个体间的全基因组测序(WGS)<strong>，</strong>并在此基础上对个体或群体进行<a href="https://www.zhihu.com/search?q=%E5%B7%AE%E5%BC%82%E6%80%A7%E5%88%86%E6%9E%90&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">差异性分析</a>，鉴定出与某类表型相关的SNP.</li></ul><p>通过比较可以发现，这三个测序技术<strong>其实都是在找基因组上的SNP(<a href="https://www.zhihu.com/search?q=%E5%8D%95%E6%A0%B8%E8%8B%B7%E9%85%B8%E5%A4%9A%E6%80%81%E6%80%A7&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">单核苷酸多态性</a>)</strong>, SNP分为四种：</p><ol><li>SNV(单核苷酸变异)</li><li>InDel(插入缺失)</li><li>SV(结构变异)</li><li>CNV(<a href="https://www.zhihu.com/search?q=%E6%8B%B7%E8%B4%9D%E6%95%B0%E5%8F%98%E5%BC%82&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">拷贝数变异</a>)</li></ol><p>只是这三个技术的<strong>覆盖程度不同</strong>：</p><ul><li>WES：覆盖全基因组上的外显子区域</li><li>WGS：覆盖全基因组</li><li>WGRS：覆盖全基因组，是WGS在不同样本上的重复</li></ul><p>只要你掌握了其中一种的<a href="https://www.zhihu.com/search?q=%E6%B5%8B%E5%BA%8F%E5%88%86%E6%9E%90&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22380684876%22%7D">测序分析</a>与可视化，剩下的两种其实是一样的，本文就以WES测序分析与可视化为例（原因是手头只有RNA-Seq的转录组数据，勉强可以用来做WES数据的替代品吧），进行WES&#x2F;WGS&#x2F;WGRS的分析教学。</p><p>外显子是基因组中能够转录组出成熟RNA的部分。一个基因组中所有外显子的集合，即为<a href="https://www.zhihu.com/search?q=%E5%A4%96%E6%98%BE%E5%AD%90%E7%BB%84&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%223080622038%22%7D">外显子组</a>。值得注意的是，通常所说的全外显子组测序，是指针对蛋白编码基因的外显子，很少涉及非编码基因。</p><p>基因(gene)是DNA中含有特定遗传信息的一段<a href="https://www.zhihu.com/search?q=%E6%A0%B8%E8%8B%B7%E9%85%B8%E5%BA%8F%E5%88%97&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%223080622038%22%7D">核苷酸序列</a>的总称，是具有遗传效应的DNA分子片段,是控制生物性状的基本遗传单位。人类基因区间的大小可从数百个bp至超过200万个bp不等。根据<a href="https://www.zhihu.com/search?q=%E4%BA%BA%E7%B1%BB%E5%9F%BA%E5%9B%A0%E7%BB%84%E8%AE%A1%E5%88%92&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%223080622038%22%7D">人类基因组计划</a>(The Human Genome Project)估计，人类拥有20000-25000个蛋白编码基因。</p><p>基因组(genome)指一个生物体所包含DNA的全部遗传信息。基因组由基因区域和非编码区域组成。**人类的基因组大小约为30亿个碱基对(bp)(3GB)**，其中非编码区域占到绝大多数，编码蛋白质的区域仅占约2%左右。</p><p>外显子组(exome)是基因组中所有外显子的集合。人类拥有约18万个外显子，约占人类基因组的1%，即<strong>约3000万个bp(30MB)。</strong></p><p><img src="https://pica.zhimg.com/80/v2-0aa2c0929b7fc072f415fb3e52f9321a_1440w.webp" alt="img"></p><p>图：蛋白编码基因由内含子(非编码序列)和外显子(包括编码序列以及UTR区域)组成。要翻译有功能的蛋白，要进行以下步骤：基因从DNA转录为RNA前体，通过剪接形成成熟RNA，成熟RNA序列翻译成氨基酸链，以及蛋白质分子的翻译后修饰。</p><p>关于外显子，需要注意的一个特殊情况是非翻译区(UTR)。在mRNA的两侧分别存在5’UTR(前导序列)和3’UTR(尾部序列)，它们的作用分别是调控翻译的启动和终止。它们由外显子序列构成，但不会被翻译成氨基酸。 所以，并非所有外显子序列都会被翻译成氨基酸。</p><p><img src="https://pica.zhimg.com/80/v2-d72f78f1b03486e21ddc1bc10ccb5d68_1440w.webp" alt="img"></p><p>图：信使RNA前体(pre-mRNA)中的外显子。外显子既包括编码氨基酸的序列(红色)，也包括不被翻译的序列(灰色)。</p><p>对外显子组(基因组里的所有外显子)进行测序的方法，即为 全外显子组测序 (Whole-Exome Sequencing，WES)，也称为 外显子组测序、全<a href="https://www.zhihu.com/search?q=%E5%A4%96%E6%98%BE%E5%AD%90%E6%B5%8B%E5%BA%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%223080622038%22%7D">外显子测序</a>，全外测序 等。</p><p>全基因组测序(Whole-Genome Sequencing, WGS)是对整个基因组进行测序。靶向测序(Targeted-sequencing，也称Panel sequencing)是对选定的基因进行测序，通常有几十个至一千个基因不等。因而，从覆盖基因组的范围来说，全基因组测序&gt;全外显子组测序&gt;靶向测序。</p><p>全外测序可以视作一种特殊的靶向测序——它靶向的区域是基因组上的所有外显子。</p><p><img src="https://pic1.zhimg.com/80/v2-29a4d2c84fbc1e7621f1239b79b8f1ea_1440w.webp" alt="img"></p><p>panel测序有两种技术原理：杂交捕获测序和多重扩增子测序。全外是基于序列杂交原理实现的</p><p>需要特别说明的是对CNV的检测。使用全外检测CNV时，在杂交捕获过程中，由于各个外显子的杂交效率不同，故不同外显子的覆盖率差异会较大。当出现阳性结果时，无法判断是由于杂交未捕获到，还是由于缺失。 故使用全外检测CNV容易出现假阳性结果。一般情况下，全外测序不用于CNV的检测 ，但在癌症研究中，利用癌组织和癌旁组织对照，可以检测体细胞CNV。</p><p>人类全外显子组所占基因组比例不超过2%，但它包含了约85%与疾病相关的变异，因此在研究编码基因变异层面，全外测序是比全基因组测序更为经济高效的替代方法。全外测序适用于<a href="https://www.zhihu.com/search?q=%E5%AD%9F%E5%BE%B7%E5%B0%94&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%223080622038%22%7D">孟德尔</a>疾病、肿瘤、复杂疾病等多个研究领域。对于表现出异质性的疾病，或者患者表现出多个系统受累的复杂疾病症状时，尤为适合使用全外测序。</p><p>例如在肿瘤临床检测中，寻求肺癌靶向治疗的患者通常会先做panel测序，因为与肺癌靶向治疗相关的基因是比较明确的，几十至一百多个基因的panel测序通常就可以满足需求。而对于寻求免疫治疗的患者，通常会使用全外或大panel测序，来评估肿瘤突变负荷(Tumor Mutational Burden, TMB)，TMB高的患者通常对免疫治疗有更好的响应。全外测序是业内公认的评估TMB的金标准。</p><p>*<strong>WES检测流程*</strong></p><p>一个WES测序的工作流程，大体可以分为这3个部分：文库制备，测序，生信分析。</p><p>文库制备通常包含这些步骤：样本处理，DNA提取，定量，建库，杂交捕获，扩增，质控。</p><p>测序，目前的仪器包括国外Illumina公司测序平台，以及<a href="https://www.zhihu.com/search?q=%E5%8D%8E%E5%A4%A7%E6%99%BA%E9%80%A0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%223080622038%22%7D">华大智造</a>国产测序平台等。</p><p>生信分析的流程通常包含这些步骤：质控，拼接比对，去重和重排，变异检测，降噪和过滤，注释等。常用的软件有FastQC，BWA，GATK，ANNOVAR等。</p><p>一个完整的全外显子组测序，从样本处理到完成数据分析，通常需要10天左右时间。</p><p><em><strong>捕获探针性能的评估指标</strong></em></p><p>市面上的厂商会提供现成的全外探针，我们可以根据自己的需要来选择，也可以定制更为符合自己需要的“全外+”探针。</p><p>如果选择现成的探针产品，除了关注下面的探针评价指标外，也需要考虑探针大小、探针长度、探针设计等是否符合我们的样品和研究需求。</p><p>如果选择定制的产品，则可以在现成的探针产品上加入自己感兴趣的区域，也可以完全自主设计。在设计探针时常用的参考数据库有RefSeq、CCDS、Ensembl、GENCODE和ClinVar等。除了设计捕获区域外，还可以要求对某些特别的区域增加探针密度以提高捕获效率。</p><p><strong>中靶率</strong></p><p>中靶率(On-target rate)是一个百分数，用来表示测序数据中有多少能够比对到目标区域上。</p><p>在基因组上有许多与外显子有同源性的部分(比如内含子和<a href="https://www.zhihu.com/search?q=%E5%9F%BA%E5%9B%A0%E9%97%B4%E5%8C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%223080622038%22%7D">基因间区</a>)，在实际工作中，这些并不属于目标(外显子)的部分在杂交过程中也会被捕获下来。这种探针捕获到非目标区域片段的情况称为脱靶(off target)。脱靶的数据是无效的，不能用于后续分析，即这部分测序数据被浪费了。</p><p>同等情况下，中靶率越高，由于脱靶产生的浪费越少，这款探针越好。</p><p><strong>覆盖度</strong></p><p>覆盖度(coverage)经常是和深度一起出现的，比如“10X覆盖度”、“30X覆盖度”。比如，“10X覆盖度为90%”指测序数据比对到目标区域后，有90%的区域被覆盖了至少10次，或者说有90%的区域有至少10条reads覆盖。</p><p>如果覆盖度没有和深度一起出现，则可以理解为“1X覆盖度”。比如“覆盖度为95%”，指95%的目标区域有至少1条reads覆盖到。换言之，有5%的目标区域连1条覆盖到的reads都没有，它们在这次测序中完全没被测到，被漏掉了。</p><p>同等情况下，覆盖度越高，越少比例的目标区域被漏掉，这款探针越好。</p><p><strong>均一性</strong></p><p>目标区域内不同的位点被覆盖的情况是不同的。比如一次WES测序的平均深度是60X，很有可能有的位点深度为10X，有的为40X，有的为90X这样的情况。均一性(uniformity)越好，即这些位点各自的深度越接近平均深度。</p><p>在实际工作中，我们根据期望达到的目标测序深度来分配数据量，即决定了这次测序的平均深度(平均深度&#x3D;数据量&#x2F;探针大小)。当某个区域的实际测序深度高于目标深度时，造成数据的浪费;而当某个区域的实际测序深度低于目标深度时，我们可能会认为这部分数据质量不好而丢弃它，导致这一区域无测序数据。均一性优良的探针可以帮助减少这两种情况的发生。</p><p>Fold-80是用来评价均一性的指标。它的定义是，为确保80%的目标碱基达到平均深度所需的额外测序的倍数。Fold-80越低，捕获效率越高，测序浪费越少。理想情况下的Fold-80为1。</p><p>Fold-80越低，均一性越好，越能节约测序成本，这款探针越好。</p><p><strong>重复率</strong></p><p>重复率(Dup rate)指的是<a href="https://www.zhihu.com/search?q=%E9%87%8D%E5%A4%8D%E5%BA%8F%E5%88%97&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%223080622038%22%7D">重复序列</a>(Duplicate reads)在总测序序列中的占比。由于这些重复序列不能带来额外信息，相反会影响变异检测结果准确性，因此需要在下游生信分析中去除这些重复序列。Dup rate越高，数据利用率越低，浪费的测序成本也就越多。</p><p>同等情况下，重复率越低，越能节省测序成本，这款探针越好</p><p><strong>WES对于涉及<a href="https://www.zhihu.com/search?q=%E6%8B%B7%E8%B4%9D%E6%95%B0%E5%8F%98%E5%BC%82&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%223080622038%22%7D">拷贝数变异</a>、非编码区变异和结构变异的疾病研究不适用。其次，在对目标区域进行捕获时, 存在捕获不均、捕获偏差等现象, 可以通过增加测序深度, 获得更多的序列信息进行统计分析, 以尽可能弥补这些偏差。</strong></p><p>首先创建一个项目目录wes和存放每个步骤生成文件的子目录raw, clean, align, genome, hg19_VCF</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#123;raw,clean,align,genome,hg19_VCF&#125;</span><br></pre></td></tr></table></figure><p>此流程包含两个raw外显子测序文件：wes.1.fq.gz，wes.2.fq.gz；存放于raw目录</p><h3 id="原始数据质控，用fastp"><a href="#原始数据质控，用fastp" class="headerlink" title="原始数据质控，用fastp"></a>原始数据质控，用fastp</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 项目主目录下运行，在clean目录下生成两个过滤的fq文件</span><br><span class="line">nohup fastp -i raw/wes.1.fq.gz -o clean/wes.1.clean.fq.gz -I raw/wes.2.fq.gz -O clean/wes.2.clean.fq.gz &amp;</span><br></pre></td></tr></table></figure><h3 id="下载参考基因组（hg19）文件，存放于genome目录，并建立索引："><a href="#下载参考基因组（hg19）文件，存放于genome目录，并建立索引：" class="headerlink" title="下载参考基因组（hg19）文件，存放于genome目录，并建立索引："></a>下载参考基因组（hg19）文件，存放于genome目录，并建立索引：</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 1 22) X Y M;</span><br><span class="line">do </span><br><span class="line">nohup wget http://hgdownload.cse.ucsc.edu/goldenPath/hg19/chromosomes/chr$&#123;i&#125;.fa.gz &amp; </span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in $(seq 1 22) X Y M;</span><br><span class="line">do cat chr$&#123;i&#125;.fa &gt;&gt; hg19.fa;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nohup bwa index -a bwtsw -p hg19 hg19.fa  &amp;</span><br></pre></td></tr></table></figure><h3 id="比对"><a href="#比对" class="headerlink" title="比对"></a>比对</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># clean目录下运行此命令，在align目录下生成sam文件</span><br><span class="line">nohup bwa mem -t 4 -M -R &quot;@RG\tID:lane1\tPL:illumina\tLB:library\tSM:wes&quot; ../genome/hg19  wes.1.clean.fq.gz  wes.2.clean.fq.gz &gt;../align/wes.sam 2&gt;wes.bwa.align.log &amp;</span><br><span class="line">-t，线程数；</span><br><span class="line">  -M , -M 将 shorter split hits 标记为次优，以兼容 Picard markDuplicates 软件;</span><br><span class="line">  -R 接的是 Read Group的字符串信息，它是用来将比对的read进行分组的，这个信息对于我们后续对比对数据进行错误率分析和Mark duplicate时非常重要。</span><br><span class="line">  (1) ID，这是Read Group的分组ID，一般设置为测序的lane ID</span><br><span class="line">  (2) PL，指的是所用的测序平台</span><br><span class="line">  (3) SM，样本ID</span><br><span class="line">  (4) LB，测序文库的名字</span><br><span class="line">这些信息设置好之后，在RG字符串中要用制表符（\t）将它们分开</span><br><span class="line">samtools view -b -S wes.sam &gt; wes.bam  #sam2bam,便于存储</span><br><span class="line">samtools sort wes.bam -o wes.sorted.bam    #有顺序的排序，便于后面的操作</span><br><span class="line">samtools flagstat wes.sorted.bam &gt; wes.sorted.bam.flagstat    #统计比对信息</span><br><span class="line">1. QC pass的reads的数量为5002344 ，未通过QC的reads数量为0，意味着一共有5002344条reads；</span><br><span class="line">2.标记为secondary的read</span><br><span class="line">3. 嵌合体reads</span><br><span class="line">4.PCR 重复引起的reads</span><br><span class="line">5.  比对到参考基因组上的reads数量；</span><br><span class="line">6.  paired reads数据数量；</span><br><span class="line">7.  read1的数量；</span><br><span class="line">8.  read2 的数量；</span><br><span class="line">9.  正确地匹配到参考序列的reads数量；</span><br><span class="line">10.  一对reads都比对到了参考序列上的数量，但是并不一定比对到同一条染色体上；</span><br><span class="line">11. 一对reads中只有一条与参考序列相匹配的数量； </span><br><span class="line">12.  一对reads比对到不同染色体的数量；</span><br><span class="line">13.  一对reads比对到不同染色体的且比对质量值大于5的数量。</span><br></pre></td></tr></table></figure><h3 id="外显子区域覆盖度"><a href="#外显子区域覆盖度" class="headerlink" title="外显子区域覆盖度"></a>外显子区域覆盖度</h3><p>需要生成外显子interval文件，生成这个文件的前提又需要dict文件和外显子bed文件（此处用的是安捷伦外显子bed文件，也可以去UCSC下载）。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gatk CreateSequenceDictionary -R hg19.fa -O hg19.dict</span><br><span class="line">gatk BedToIntervalList -I S31285117_Regions.bed -O Exon.Interval.bed -SD ./genome/hg19.dict</span><br><span class="line">gatk CollectHsMetrics -BI Exon.Interval.bed -TI Exon.Interval.bed -I wes.sorted.bam -O wes.stat.txt</span><br></pre></td></tr></table></figure><h3 id="标记PCR重复序列并建立索引"><a href="#标记PCR重复序列并建立索引" class="headerlink" title="标记PCR重复序列并建立索引"></a>标记PCR重复序列并建立索引</h3><p>以前用picard标记重复序列，现在这个工具全部整合到gatk中了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nohup gatk --java-options &quot;-Xmx10G -Djava.io.tmpdir=./&quot; MarkDuplicates -I wes.sorted.bam -O wes.sorted.MarkDuplicates.bam -M wes.sorted.bam.metrics &gt; log.mark 2&gt;&amp;1 &amp;</span><br><span class="line">samtools view -f 1024 wes.sorted.MarkDuplicates.bam | less</span><br><span class="line">samtools index wes.sorted.MarkDuplicates.bam</span><br></pre></td></tr></table></figure><p>wes.sorted.bam.metrics有统计信息 wes.sorted.MarkDuplicates.bam创建索引文件，他的作用能够让我们可以随机访问这个文件中的任意位置，而且后面的步骤也要求这个bam文件一定要有索引。</p><h3 id="变异检测"><a href="#变异检测" class="headerlink" title="变异检测"></a>变异检测</h3><h3 id="重新校正碱基质量值（BQSR）"><a href="#重新校正碱基质量值（BQSR）" class="headerlink" title="重新校正碱基质量值（BQSR）"></a>重新校正碱基质量值（BQSR）</h3><p><strong>变异检测是一个极度依赖测序碱基质量值，因为这个质量值是衡量我们测序出来的这个碱基到底有多正确的重要指标</strong>。它来自于测序图像数据的base calling，因此，基本上是由测序仪和测序系统来决定的，计算出来的碱基质量值未必与真实结果统一。 BQSR（Base Quality Score Recalibration）这个步骤主要是通过机器学习的方法构建测序碱基的错误率模型，然后对这些碱基的质量值进行相应的调整。 这里包含了两个步骤： 第一步，BaseRecalibrator，这里计算出了所有需要进行重校正的read和特征值，然后把这些信息输出为一份校准表文件（wes.recal_data.table） 第二步，ApplyBQSR，这一步利用第一步得到的校准表文件（wes.recal_data.table）重新调整原来BAM文件中的碱基质量值，并使用这个新的质量值重新输出一份新的BAM文件。</p><h3 id="首先下载变异注释文件"><a href="#首先下载变异注释文件" class="headerlink" title="首先下载变异注释文件"></a>首先下载变异注释文件</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wget  -c -r -nd -np -k -L -p ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/hg19</span><br><span class="line">下载文件均为压缩文件，需要解压才能使用</span><br><span class="line">samtools faidx hg19.fa</span><br><span class="line">GENOME=./genome/hg19.fa</span><br><span class="line">hg19_VCF=./hg19_VCF/</span><br><span class="line">gatk --java-options &quot;-Xmx10G -Djava.io.tmpdir=./&quot; BaseRecalibrator \</span><br><span class="line">-R $GENOME -I ./align/wes.sorted.MarkDuplicates.bam \</span><br><span class="line">--known-sites $hg19_VCF/1000G_phase1.indels.hg19.sites.vcf \</span><br><span class="line">--known-sites $hg19_VCF/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf \</span><br><span class="line">--known-sites $hg19_VCF/dbsnp_138.hg19.vcf \</span><br><span class="line">-L S31285117_Regions.bed -O wes.recal_data.table</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gatk --java-options &quot;-Xmx10G -Djava.io.tmpdir=./&quot; ApplyBQSR \</span><br><span class="line">-R $GENOME -I ./align/wes.sorted.MarkDuplicates.bam \</span><br><span class="line">-bqsr wes.recal_data.table -L S31285117_Regions.bed  \</span><br><span class="line">-O wes.sorted.MarkDuplicates.BQSR.bam</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># gatk AnalyzeCovariates -bqsr wes.recal_data.table -plots wes.recal_data.table.plot</span><br></pre></td></tr></table></figure><h3 id="变异检测-1"><a href="#变异检测-1" class="headerlink" title="变异检测"></a>变异检测</h3><p>HaplotypeCaller的应用有两种做法，差别只在于要不要在中间生成一个gVCF： （1）直接进行HaplotypeCaller，这适合于单样本，或者那种固定样本数量的情况，也就是只执行一次HaplotypeCaller。如果增加一个样本就得重新运行这个HaplotypeCaller，而这个时候算法需要重新去读取所有人的BAM文件，浪费大量时间； （2）每个样本先各自生成gVCF，然后再进行群体joint-genotype。gVCF全称是genome VCF，是每个样本用于变异检测的中间文件，格式类似于VCF，它把joint-genotype过程中所需的所有信息都记录在这里面，文件无论是大小还是数据量都远远小于原来的BAM文件。这样一旦新增加样本也不需要再重新去读取所有人的BAM文件了，只需为新样本生成一份gVCF，然后重新执行这个joint-genotype就行了。</p><p>推荐使用第二种，<strong>变异检测不是一个样本的事情，有越多的同类样本放在一起joint calling结果将会越准确，而如果样本足够多的话，在低测序深度的情况下也同样可以获得完整并且准确的结果。</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">第一种方法</span><br><span class="line">gatk --java-options &quot;-Xmx8G -Djava.io.tmpdir=./&quot; HaplotypeCaller \</span><br><span class="line">-R $GENOME -I wes.sorted.MarkDuplicates.BQSR.bam \</span><br><span class="line">-D $hg19_VCF/dbsnp_138.hg19.vcf -L S31285117_Regions.bed \</span><br><span class="line">-O wes.raw1.vcf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二种方法</span><br><span class="line"># 1.生成中间文件gvcf</span><br><span class="line">gatk --java-options &quot;-Xmx8G -Djava.io.tmpdir=./&quot; HaplotypeCaller -R $GENOME \</span><br><span class="line">--emit-ref-confidence GVCF -I wes.sorted.MarkDuplicates.BQSR.bam \</span><br><span class="line">-D $hg19_VCF/dbsnp_138.hg19.vcf -L S31285117_Regions.bed  -O wes.gvcf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2.通过gvcf检测变异</span><br><span class="line">gatk --java-options &quot;-Xmx8G -Djava.io.tmpdir=./&quot; GenotypeGVCFs \</span><br><span class="line">-R $GENOME -V wes.gvcf -L S31285117_Regions.bed  \</span><br><span class="line">-O wes.raw.vcf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">若有多个样本的gvcf文件，运行gatk CombineGVCFs  \</span><br><span class="line">-V 1.gvcf –V 2.gvcf ……  -O final.gvcf ，再用final.gvcf运行第二步</span><br></pre></td></tr></table></figure><h3 id="变异质控与过滤"><a href="#变异质控与过滤" class="headerlink" title="变异质控与过滤"></a>变异质控与过滤</h3><p><strong>质控的含义和目的是指通过一定的标准，最大可能地剔除假阳性的结果，并尽可能地保留最多的正确数据。 第一种方法 GATK VQSR</strong>，它通过机器学习的方法利用多个不同的数据特征训练一个模型（高斯混合模型）对变异数据进行质控，使用VQSR需要具备以下两个条件： 第一，需要一个精心准备的已知变异集，它将作为训练质控模型的真集。比如，Hapmap、OMNI，1000G和dbsnp等这些国际性项目的数据，这些可以作为高质量的已知变异集。 第二，要求新检测的结果中有足够多的变异，不然VQSR在进行模型训练的时候会因为可用的变异位点数目不足而无法进行。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gatk --java-options &quot;-Xmx8G -Djava.io.tmpdir=./&quot; VariantRecalibrator -R $GENOME -V wes.raw.vcf \</span><br><span class="line">-resource hapmap,known=false,training=true,truth=true,prior=15.0:$hg19_VCF/hapmap_3.3.hg19.sites.vcf \</span><br><span class="line">-resource omini,known=false,training=true,truth=false,prior=12.0:$hg19_VCF/1000G_omni2.5.hg19.sites.vcf \ </span><br><span class="line">-resource 1000G,known=false,training=true,truth=false,prior=10.0:$hg19_VCF/1000G_phase1.snps.high_confidence.hg19.sites.vcf \</span><br><span class="line">-resource dbsnp,known=true,training=false,truth=false,prior=6.0:$hg19_VCF/dbsnp_138.hg19.vcf \</span><br><span class="line">-an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an DP -mode SNP \</span><br><span class="line">-O wes.snps.recal.vcf --tranches-file wes.snps.tranches --rscript-file wes.snps.plots.R &amp; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gatk  ApplyRecalibration  -V wes.raw.vcf -O wes.VQSR.vcf --recal-file wes.snps.recal.vcf  \</span><br><span class="line">--tranches-file wes.snps.tranches  -mode SNP</span><br></pre></td></tr></table></figure><p>此方法要求新检测的结果中有足够多的变异，不然VQSR在进行模型训练的时候会因为可用的变异位点数目不足而无法进行。可能很多非人的物种在完成变异检测之后没法使用GATK VQSR的方法进行质控，一些小panel、外显子测序，由于最后的变异位点不够，也无法使用VQSR。全基因组分析或多个样本的全外显子组分析适合用此方法。</p><p><strong>第二种方法通过过滤指标过滤。</strong> QualByDepth（QD）：QD是变异质量值（Quality）除以覆盖深度（Depth）得到的比值。 FisherStrand (FS)：FS是一个通过Fisher检验的p-value转换而来的值，它要描述的是测序或者比对时对于只含有变异的read以及只含有参考序列碱基的read是否存在着明显的正负链特异性（Strand bias，或者说是差异性） StrandOddsRatio (SOR)：对链特异（Strand bias）的一种描述. RMSMappingQuality (MQ)：MQ这个值是所有比对至该位点上的read的比对质量值的均方根. MappingQualityRankSumTest (MQRankSum) ReadPosRankSumTest (ReadPosRankSum) <strong>通过过滤指标过滤</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用SelectVariants，选出SNP</span><br><span class="line">gatk SelectVariants -select-type SNP -V wes.raw.vcf -O wes.snp.vcf</span><br><span class="line"># 为SNP作过滤</span><br><span class="line">gatk VariantFiltration -V wes.snp.vcf --filter-expression &quot;QD &lt; 2.0 || MQ &lt; 40.0 || FS &gt; 60.0 || SOR &gt; 3.0 || MQRankSum &lt; -12.5 || ReadPosRankSum &lt; -8.0&quot; --filter-name &quot;PASS&quot; -O wes.snp.filter.vcf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用SelectVariants，选出Indel</span><br><span class="line">gatk SelectVariants -select-type INDEL -V wes.raw.vcf -O wes.indel.vcf</span><br><span class="line"># 为Indel作过滤</span><br><span class="line">gatk VariantFiltration -V wes.indel.vcf --filter-expression &quot;QD &lt; 2.0 || FS &gt; 200.0 || SOR &gt; 10.0 || MQRankSum &lt; -12.5 || ReadPosRankSum &lt; -8.0&quot; --filter-name &quot;PASS&quot; -O wes.indel.filter.vcf</span><br></pre></td></tr></table></figure><h3 id="突变注释"><a href="#突变注释" class="headerlink" title="突变注释"></a>突变注释</h3><p>ANNOVAR是一个perl编写的命令行工具，能在安装了perl解释器的多种操作系统上执行。允许多种输入文件格式，包括最常被使用的VCF格式。输出文件也有多种格式，包括注释过的VCF文件、用tab或者逗号分隔的txt文件，ANNOVAR能快速注释遗传变异并预测其功能。这个软件需要edu邮箱注册才能下载。 ANNOVAR website</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">数据库下载</span><br><span class="line">perl annotate_variation.pl -buildver hg19 -downdb -webfrom annovar refGene humandb/</span><br><span class="line"> # -buildver 表示version </span><br><span class="line"> # -downdb 下载数据库的指令</span><br><span class="line"> # -webfrom annovar 从annovar提供的镜像下载，不加此参数将寻找数据库本身的源</span><br><span class="line"> # humandb/ 存放于humandb/目录下</span><br><span class="line">其它数据库下载</span><br><span class="line">perl annotate_variation.pl --buildver hg19 --downdb gwascatalog humandb/ &amp;</span><br><span class="line">perl annotate_variation.pl --buildver hg19 --downdb ljb26_all --webfrom annovar humandb/ &amp;</span><br><span class="line">perl annotate_variation.pl --buildver hg19 --downdb esp6500siv2_ea --webfrom annovar humandb/ &amp;</span><br><span class="line">perl annotate_variation.pl --buildver hg19 --downdb esp6500siv2_all --webfrom annovar humandb/ &amp;</span><br><span class="line">perl annotate_variation.pl --buildver hg19 --downdb 1000g2014oct humandb/ &amp;</span><br><span class="line">perl annotate_variation.pl --buildver hg19 --downdb cytoBand humandb/ &amp;</span><br><span class="line">perl annotate_variation.pl --buildver hg19 --downdb avsift -webfrom annovar humandb/ &amp;</span><br><span class="line">perl annotate_variation.pl --buildver hg19 --downdb snp138 humandb/ &amp;</span><br><span class="line">perl annotate_variation.pl --buildver hg19 --downdb genomicSuperDups humandb/ &amp;</span><br><span class="line">perl annotate_variation.pl --buildver hg19 --downdb phastConsElements46way humandb/ &amp;</span><br><span class="line">perl annotate_variation.pl --buildver hg19 --downdb tfbs humandb/</span><br></pre></td></tr></table></figure><h3 id="三种注释方式"><a href="#三种注释方式" class="headerlink" title="三种注释方式"></a>三种注释方式</h3><p>**Gene-based Annotation(基于基因的注释)**：基于基因的注释（gene-based annotation）揭示variant与已知基因直接的关系以及对其产生的功能性影响。 <strong>Region-based Annotation（基于区域的注释）</strong>：基于过滤的注释精确匹配查询变异与数据库中的记录：如果它们有相同的染色体，起始位置，结束位置，REF的等位基因和ALT的等位基因，才能认为匹配。基于区域的注释看起来更像一个区域的查询（这个区域也可以是一个单一的位点），在一个数据库中，它不在乎位置的精确匹配，它不在乎核苷酸的识别。基于区域的注释（region-based annotation）揭示variant与不同基因组特定段的关系。 <strong>Filter-based Annotation（基于过滤的注释）</strong>：filter-based和region-based主要的区别是，filter-based针对mutation（核苷酸的变化）而region-based针对染色体上的位置。如在全基因组数据中的变异频率，可使用1000g2015aug、kaviar_20150923等数据库；在全外显组数据中的变异频率，可使用exac03、esp6500siv2等；在孤立的或者低代表人群中的变异频率，可使用ajews等数据库。 <strong>用table_annovar.pl进行注释，可一次性完成三种类型的注释。</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">convert2annovar.pl # 将多种格式转为.avinput的程序</span><br><span class="line">convert2annovar.pl -format vcf4   wes.snp.filter.vcf &gt;snp.avinput</span><br><span class="line">格式如下：</span><br><span class="line">chr1    69511   69511   A       G       hom     1736.03 53</span><br><span class="line">chr1    877831  877831  T       C       hom     85.10   4</span><br><span class="line">chr1    881627  881627  G       A       het     399.60  37</span><br><span class="line">chr1    887801  887801  A       G       hom     1623.03 39</span><br><span class="line">chr1    888639  888639  T       C       hom     3991.03 106</span><br><span class="line">chr1    888659  888659  T       C       hom     4114.03 109</span><br><span class="line">chr1    897325  897325  G       C       hom     3998.03 113</span><br><span class="line">chr1    898852  898852  C       T       het     647.60  38</span><br><span class="line">chr1    900505  900505  G       C       het     478.60  35</span><br><span class="line">chr1    906272  906272  A       C       het     540.60  30</span><br></pre></td></tr></table></figure><p>avinput文件由tab分割，最重要的地方为前5列，分别是: 1. 染色体(Chromosome) 2. 起始位置(Start) 3. 结束位置(End) 4. 参考等位基因(Reference Allele) 5. 替代等位基因(Alternative Allele) ANNOVAR主要也是利用前五列信息对数据库进行比对，注释变异。</p><h3 id="SNP注释："><a href="#SNP注释：" class="headerlink" title="SNP注释："></a>SNP注释：</h3><p><strong>用table_annovar.pl进行注释，可一次性完成三种类型的注释。</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">table_annovar.pl snp.avinput $humandb -buildver hg19 -out snpanno \</span><br><span class="line">-remove -protocol refGene,cytoBand,genomicSuperDups,esp6500siv2_all \</span><br><span class="line">-operation g,r,r,f -nastring . -csvout</span><br></pre></td></tr></table></figure><p>-buildver hg19 表示使用hg19版本 -out snpanno 表示输出文件的前缀为snpanno -remove 表示删除注释过程中的临时文件 -protocol 表示注释使用的数据库，用逗号隔开，且要注意顺序 -operation 表示对应顺序的数据库的类型（g代表gene-based、r代表region-based、f代表filter-based），用逗号隔开，注意顺序 -nastring . 表示用点号替代缺省的值 -csvout 表示最后输出.csv文件</p><h3 id="Indel注释同上"><a href="#Indel注释同上" class="headerlink" title="Indel注释同上"></a>Indel注释同上</h3><p>测试数据：链接：<a href="https://link.zhihu.com/?target=https://pan.baidu.com/s/16tX5GrCLBAov9k_GjYYOyA">https://pan.baidu.com/s/16tX5GrCLBAov9k_GjYYOyA</a> 提取码：9pab</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://www.zhihu.com/people/ma-pan-13-72&quot;&gt;多啦A梦詹&lt;/a&gt;；&lt;a href=&quot;https://www.zhihu.com/question/432826287/answer/30</summary>
      
    
    
    
    
    <category term="BioInfo" scheme="http://nikolahuang.github.io/tags/BioInfo/"/>
    
  </entry>
  
</feed>
